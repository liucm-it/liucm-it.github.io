<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>学习笔记</title>
  
  <subtitle>一个博客、一个记录、一份笔记，温故而知新！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.kming6.com/"/>
  <updated>2021-05-27T11:58:15.385Z</updated>
  <id>https://www.kming6.com/</id>
  
  <author>
    <name>Kming Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java线程之ThreadLocal</title>
    <link href="https://www.kming6.com/posts/16706/"/>
    <id>https://www.kming6.com/posts/16706/</id>
    <published>2020-06-29T09:26:53.000Z</published>
    <updated>2021-05-27T11:58:15.385Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>ThreadLocal笔记</p><a id="more"></a><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>提供<code>线程局部</code>变量；一个线程局部变量在多个线程中，分别有独立的值（副本）。</p></blockquote><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><blockquote><p>简单（开箱即用）、快速（无额外开销）、安全（线程安全）</p></blockquote><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><blockquote><p>多线程场景（资源持有、线程一致性、并发计算、线程安全等场景）</p></blockquote><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><blockquote><p>Java中使用<code>哈希表</code>实现。</p></blockquote><h3 id="应用范围"><a href="#应用范围" class="headerlink" title="应用范围"></a>应用范围</h3><blockquote><p>几乎所有提供多线程特征的语言。</p></blockquote><h3 id="ThreadLocal基本使用"><a href="#ThreadLocal基本使用" class="headerlink" title="ThreadLocal基本使用"></a>ThreadLocal基本使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;Long&gt; tl = <span class="keyword">new</span> Threadlocal() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Long <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Inital Value run..."</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">500L</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(tl.get()); <span class="comment">// 500</span></span><br><span class="line">    tl.set(<span class="number">100L</span>);</span><br><span class="line">    System.out.println(tl.get()); <span class="comment">// 100</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ThreadLocal笔记&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.kming6.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.kming6.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JVM类加载剖析</title>
    <link href="https://www.kming6.com/posts/35784/"/>
    <id>https://www.kming6.com/posts/35784/</id>
    <published>2020-06-24T16:33:01.000Z</published>
    <updated>2021-05-27T11:58:15.385Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h3 id="类加载、连接与初始化"><a href="#类加载、连接与初始化" class="headerlink" title="类加载、连接与初始化"></a>类加载、连接与初始化</h3><ul><li>加载: 查找并加载类的二进制数据</li><li>连接:<ul><li>验证: 确保被加载的类的正确性</li><li>准备: 为类的静态变量分配内存，并将其初始化为默认值</li><li>解析: 把类中的符号引用转换为直接引用</li></ul></li><li>初始化: 为类的静态变量赋予正确的初始值</li></ul><blockquote><p>连接的准备阶段初始的值是默认值，初始化阶段时的值才是正确赋予的值<br>private static int a = 3; a准备阶段先被初始化为0，初始化阶段赋予的3</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> value1;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> value2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    value1++;</span><br><span class="line">    value2++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> singleton;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Singleton singleton = singleton.getInstance();</span><br><span class="line">    System.out.println(<span class="string">"value1 = "</span> + singleton.value1)；<span class="comment">// value1 = 1</span></span><br><span class="line">    System.out.println(<span class="string">"value2 = "</span> + singleton.value2)；<span class="comment">// value2 = 0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类加载的触发方式<ul><li>创建类的实例</li><li>访问某个类或接口的静态变量，或者对该静态变量赋值</li><li>调用类的静态方法</li><li>反射(例如：<code>Class.forName(&quot;com.github.Test&quot;)</code>)</li><li>初始化一个类的子类</li><li>Java虚拟机启动时被标明为启动类的类(Java Test)</li></ul></li></ul><blockquote><p>类加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法内，然后在堆区创建一个java.lang.Class对象，用来封装类的方法区的数据结构</p></blockquote><ul><li>加载.class文件的方式<ul><li>从本地系统中直接加载</li><li>通过网络下载.class文件</li><li>从zip、jar等归档文件中加载.class文件</li><li>从专有数据库中提取.class文件</li><li>将Java源文件动态编译为.class文件</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/liucm-it/ImgHosting/pic/Java-class-load.png" alt="类的加载"></p><blockquote><p>类加载的最终产品是位于堆区中的Class对象<br>Class对象封装了类在方法区内的数据结构，并且向Java程序员提供了访问方法区内的数据结构的接口</p></blockquote><h3 id="类加载器ClassLoader"><a href="#类加载器ClassLoader" class="headerlink" title="类加载器ClassLoader"></a>类加载器ClassLoader</h3><ul><li>Java虚拟机自带加载器<ul><li>根类加载器（Bootstrap）</li><li>扩展类加载器 （Extension）</li><li>系统类加载器 （System）</li></ul></li><li>用户自定义加载器<ul><li>java.lang.classLoader的子类</li><li>用可定制类的加载方式</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Java" scheme="https://www.kming6.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.kming6.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java之集合框架</title>
    <link href="https://www.kming6.com/posts/15243/"/>
    <id>https://www.kming6.com/posts/15243/</id>
    <published>2020-06-15T21:02:46.000Z</published>
    <updated>2021-05-27T11:58:15.385Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Java的集合框架就是常见数据结构的实现，学习Java的集合框架可以加深对数据结构的理解</p><a id="more"></a><h2 id="集合接口总览"><a href="#集合接口总览" class="headerlink" title="集合接口总览"></a>集合接口总览</h2><h3 id="List、Set、Map三者的区别"><a href="#List、Set、Map三者的区别" class="headerlink" title="List、Set、Map三者的区别"></a>List、Set、Map三者的区别</h3><ul><li>List：List接口存储一组不唯一且有序的对象，可以存在多个相同元素</li><li>Set: 不允许重复的集合。相同的元素只会存在一个。</li><li>Map：使用键值对存储。Key不能重复，Value可以重复，典型的Key是String，也可以是Object</li></ul><h3 id="集合框架底层数据结构"><a href="#集合框架底层数据结构" class="headerlink" title="集合框架底层数据结构"></a>集合框架底层数据结构</h3><ul><li>List<ul><li>ArrayList: Object 数组</li><li>Vector: Object 数组</li><li>LinkedList: 双向链表(JDK1.6之前为循环链表，JDK1.7取消循环)</li></ul></li><li>Set<ul><li>HashSet(无序、唯一): 本质上基于 HashMap 实现，底层直接采用 HashMap 保存元素</li><li>LinkedHashSet: LinkedHashSet继承于HashSet，底层通过 LinkedHashMap 实现，类似 HashSet 内部基于 HashMap 实现一样，有一点区别。</li><li>TreeSet(有序、唯一): 基于红黑树实现(自平衡排序二叉树)</li></ul></li><li>Map<ul><li>HashMap: JDK1.8之前 HashMap 由<code>数组+链表</code>组成的，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）。JDK1.8以后由<code>数组+链表+红黑树</code>组成，当链表长度大于阈值（默认为8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间</li><li>LinkedHashMap: LinkedHashMap 继承自 HashMap，所以它的底层仍然是基于拉链式散列结构即由数组和链表或红黑树组成。另外，LinkedHashMap 在上面结构的基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的操作，实现了访问顺序相关逻辑。</li><li>Hashtable: <code>数组+链表</code>组成的，数组是 Hashtable 的主体，链表则是主要为了解决哈希冲突而存在的</li><li>TreeMap: 红黑树（自平衡的排序二叉树）</li></ul></li></ul><h2 id="集合中的Iterator迭代器"><a href="#集合中的Iterator迭代器" class="headerlink" title="集合中的Iterator迭代器"></a>集合中的Iterator迭代器</h2><h3 id="ArrayList与LinkedList区别"><a href="#ArrayList与LinkedList区别" class="headerlink" title="ArrayList与LinkedList区别"></a>ArrayList与LinkedList区别</h3><ul><li>是否线程安全：<code>ArrayList</code> 和 <code>LinkedList</code> 都是不保证线程安全的</li><li>底层数据结构: Arraylist 底层使用的是 <code>Object 数组</code>；LinkedList 底层使用的是 <code>双向链表</code> 数据结构</li><li>是否支持随机访问: LinkedList 不支持高效的随机元素访问，而 ArrayList 支持。快速随机访问就是通过元素的序号快速获取元素对象(对应get(int index)方法)</li><li>插入删除影响:<ul><li>ArrayList 采用数组存储，所以插入和删除元素的时间复杂度会受元素位置的影响。 比如：执行add(E e)方法的时候， ArrayList 会默认在将指定的元素追加到此列表的末尾，这种情况时间复杂度就是O(1)。对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针</li><li>LinkedList 采用链表存储，所以对于add(E e)方法的插入，删除元素时间复杂度不受元素位置的影响，时间复杂度近似 O(1)，对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。</li><li>对ArrayList和LinkedList而言，在列表末尾增加一个元素所花的开销都是固定的。对ArrayList而言，主要是在内部数组中增加一项，指向所添加的元素，偶尔可能会导致对数组重新进行分配；而对LinkedList而言，这个开销是统一的，分配一个内部Entry对象。</li><li>在ArrayList的中间插入或删除一个元素意味着这个列表中剩余的元素都会被移动；而在LinkedList的中间插入或删除一个元素的开销是固定的。</li></ul></li><li>内存空间占用: ArrayList的空 间浪费主要体现在在list列表的结尾会预留一定的容量空间，而LinkedList的空间花费则体现在它的每一个元素都需要消耗比ArrayList更多的空间</li></ul><blockquote><p>当操作是在一列数据的后面添加数据而不是在前面或中间,并且需要随机地访问其中的元素时,使用ArrayList会提供比较好的性能；当你的操作是在一列数据的前面或中间添加或删除数据,并且按照顺序访问其中的元素时,就应该使用LinkedList了</p></blockquote><h3 id="RandomAccess接口"><a href="#RandomAccess接口" class="headerlink" title="RandomAccess接口"></a>RandomAccess接口</h3><p>RandomAccess 接口中什么都没有定义。所以， RandomAccess 接口是一个标识接口，就像 Serializable 序列化接口一样。标识什么？ 标识实现这个接口的类具有(随机访问)功能</p><p>在 binarySearch（) 方法中，使用到RandomAccess接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(List&lt;? extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; list, T key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (list <span class="keyword">instanceof</span> RandomAccess || list.size()&lt;BINARYSEARCH_THRESHOLD)</span><br><span class="line">        <span class="keyword">return</span> Collections.indexedBinarySearch(list, key);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> Collections.iteratorBinarySearch(list, key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ArrayList 实现了 RandomAccess 接口， 而 LinkedList 没有实现。为什么？这是和底层数据结构有关！ArrayList 底层是<code>数组</code>，而 LinkedList 底层是<code>链表</code>。数组天然支持随机访问，时间复杂度为 O(1)，所以称为快速随机访问。链表需要遍历到特定位置才能访问特定位置的元素，时间复杂度为 O(n)，所以不支持快速随机访问。，ArrayList 实现了 RandomAccess 接口，就表明了他具有快速随机访问功能。 RandomAccess 接口只是标识，并不是说 ArrayList 因为实现 RandomAccess 接口才具有快速随机访问的功能！</p><h4 id="List遍历方式选择"><a href="#List遍历方式选择" class="headerlink" title="List遍历方式选择"></a>List遍历方式选择</h4><blockquote><p>实现了 RandomAccess 接口的list，优先选择普通 for 循环 ，其次 foreach,<br>未实现 RandomAccess接口的list，优先选择iterator遍历（foreach遍历底层也是通过iterator实现的），大size的数据，千万不要使用普通for循环</p></blockquote><h3 id="双向链表和双向循环链表"><a href="#双向链表和双向循环链表" class="headerlink" title="双向链表和双向循环链表"></a>双向链表和双向循环链表</h3><p><strong><em>双向链表</em></strong>： 包含两个指针，一个prev指向前一个节点，一个next指向后一个节点。<br><strong><em>双向循环链表</em></strong>： 最后一个节点(尾部)的 next 指向head，而 head 的prev指向最后一个节点(尾部)，构成一个环。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java的集合框架就是常见数据结构的实现，学习Java的集合框架可以加深对数据结构的理解&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.kming6.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.kming6.com/tags/Java/"/>
    
      <category term="集合框架" scheme="https://www.kming6.com/tags/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>CentOs下升级git版本</title>
    <link href="https://www.kming6.com/posts/54696/"/>
    <id>https://www.kming6.com/posts/54696/</id>
    <published>2020-06-10T22:56:07.000Z</published>
    <updated>2021-05-27T11:58:15.385Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>你是否在使用git pull、git push、git clone的时候，或者在使用jenkins发版的时候，可能会报类似如下的错误</p><a id="more"></a><h3 id="为什么升级"><a href="#为什么升级" class="headerlink" title="为什么升级"></a>为什么升级</h3><p>在使用git pull、git push、git clone的时候，或者在使用jenkins发版的时候，可能会报类似如下的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error: The requested URL returned error: 401 Unauthorized while accessing https://git.oschina.net/demo/demo.git/info/refs </span><br><span class="line">fatal: HTTP request failed</span><br></pre></td></tr></table></figure><p>像centos7.5一般自带的git都是1.8.3.1版本的，比较老了，所以有时候需要升级一下git版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># git --version</span><br><span class="line">git version 1.8.3.1</span><br></pre></td></tr></table></figure><h3 id="安装依赖软件"><a href="#安装依赖软件" class="headerlink" title="安装依赖软件"></a>安装依赖软件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel asciidoc</span><br><span class="line"></span><br><span class="line">yum install  gcc perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure><h3 id="卸载系统自带低版本Git"><a href="#卸载系统自带低版本Git" class="headerlink" title="卸载系统自带低版本Git"></a>卸载系统自带低版本Git</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove git</span><br></pre></td></tr></table></figure><h3 id="编译安装最新的Git版本"><a href="#编译安装最新的Git版本" class="headerlink" title="编译安装最新的Git版本"></a>编译安装最新的Git版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost home]<span class="comment">#  cd /usr/local/src/</span></span><br><span class="line"></span><br><span class="line">[root@localhost home]<span class="comment">#  wget https://www.kernel.org/pub/software/scm/git/git-2.9.5.tar.xz</span></span><br><span class="line"></span><br><span class="line">[root@localhost home]<span class="comment">#  tar -vxf git-2.9.5.tar.xz</span></span><br><span class="line"></span><br><span class="line">[root@localhost home]<span class="comment">#  cd git-2.9.5</span></span><br><span class="line"></span><br><span class="line">[root@localhost home]<span class="comment">#  make prefix=/usr/local/git all</span></span><br><span class="line"></span><br><span class="line">[root@localhost home]<span class="comment">#  make prefix=/usr/local/git install</span></span><br><span class="line"></span><br><span class="line">[root@localhost home]<span class="comment">#  echo "export PATH=$PATH:/usr/local/git/bin" &gt;&gt; /etc/profile</span></span><br><span class="line"></span><br><span class="line">[root@localhost home]<span class="comment">#  source /etc/profile</span></span><br><span class="line"></span><br><span class="line">[root@localhost home]<span class="comment">#  git --version</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你是否在使用git pull、git push、git clone的时候，或者在使用jenkins发版的时候，可能会报类似如下的错误&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://www.kming6.com/categories/Git/"/>
    
    
      <category term="CentOs" scheme="https://www.kming6.com/tags/CentOs/"/>
    
      <category term="Liunx" scheme="https://www.kming6.com/tags/Liunx/"/>
    
      <category term="Git" scheme="https://www.kming6.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>工作必备技能之Git</title>
    <link href="https://www.kming6.com/posts/6335/"/>
    <id>https://www.kming6.com/posts/6335/</id>
    <published>2020-06-10T21:52:57.000Z</published>
    <updated>2021-05-27T11:58:15.389Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>程序员必学技能Git</p><a id="more"></a><h3 id="Git基础学习"><a href="#Git基础学习" class="headerlink" title="Git基础学习"></a>Git基础学习</h3><ul><li>推荐学习地址<a href="https://git-scm.com/book/zh/v2" rel="external nofollow noopener noreferrer" target="_blank">Pro Git</a>至少学习完前五章</li><li>学习的过程多练习、多思考，多多注意Git的提示信息，读懂Git提示信息对你很有帮助</li><li>扩展推荐学习<a href="https://ohshitgit.com" rel="external nofollow noopener noreferrer" target="_blank">Oh Shit, Git!?!</a></li></ul><h3 id="Git初始配置"><a href="#Git初始配置" class="headerlink" title="Git初始配置"></a>Git初始配置</h3><blockquote><p>配置文件优先级：.git/config &gt; ~/.gitconfig &gt; /etc/gitconfig<br>可以根据自己习惯调整配置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;XXX XXX&quot; # 换成自己的名字</span><br><span class="line">git config --global user.email xxx@xxx.com # 换成自己的邮箱</span><br><span class="line">git config --global core.editor vim</span><br><span class="line">git config --global core.quotepath false</span><br><span class="line">git config --global push.default simple</span><br><span class="line">git config --global rerere.enabled true</span><br><span class="line">git config --global alias.c checkout</span><br><span class="line">git config --global alias.d diff</span><br><span class="line">git config --global alias.dc &quot;diff --cached&quot;</span><br><span class="line">git config --global alias.dw &quot;diff --word-diff&quot;</span><br><span class="line">git config --global alias.l &quot;log --all --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit --date=relative&quot;</span><br><span class="line">git config --global alias.s status -sb</span><br><span class="line">git config --global alias.reset-permission &apos;!git diff -p -R --no-color | grep -E &quot;^(diff|(old|new) mode)&quot; --color=never | git apply&apos;</span><br></pre></td></tr></table></figure><h3 id="正确使用-gitignore"><a href="#正确使用-gitignore" class="headerlink" title="正确使用.gitignore"></a>正确使用.gitignore</h3><ul><li>项目中通常有些文件是不用提交到版本管理的，可以在.gitignore中配置忽略无需提交的文件，例如：<ul><li>编辑器、IDE的状态文件或临时文件</li><li>编译或构建生成的文件</li><li>第三方依赖文件，通常使用对应的包管理器</li></ul></li><li>推荐一些<a href="https://github.com/github/gitignore" rel="external nofollow noopener noreferrer" target="_blank">常用模板</a></li></ul><h3 id="Git撤销改动"><a href="#Git撤销改动" class="headerlink" title="Git撤销改动"></a>Git撤销改动</h3><blockquote><p>理解 checkout、reset、revert（撤销改动）</p></blockquote><!-- markdownlint-disable no-inline-html - Inline --><ul><li>未缓存(uncached): git checkout <paths></paths></li><li>已缓存(cached): git reset <tree-ish> – <paths></paths></tree-ish></li><li>已提交(committed):<ul><li>git reset <tree-ish> – <paths>; git checkout <paths></paths></paths></tree-ish></li><li>git reset <commit> –hard</commit></li><li>git revert <commit>  // 会增加一个删除的提交记录</commit></li></ul></li></ul><h3 id="Git更新、合并"><a href="#Git更新、合并" class="headerlink" title="Git更新、合并"></a>Git更新、合并</h3><blockquote><p>理解 fetch、pull、merge、rebase</p></blockquote><ul><li>fetch：从 remote（一般是 GitHub 等服务器）下载 object、ref 到 git directory。</li><li>pull：相当于fetch + merge。</li><li>pull –rebase：相当于fetch + rebase， 可以简写成<code>pull -r</code></li><li>merge：会产生一个额外 commit，这个 commit 有两个父 commit。</li><li>rebase（变基）：以指定 branch（一般是刚刚 fetch 过的 remote branch）为基础重放当前 branch 的新 commit，不会产生额外 commit，一般用于单人独立开发时与主分支同步，另外给开源项目发 PR 一般也要用 rebase 以方便合并。</li></ul><h3 id="Git项目流程"><a href="#Git项目流程" class="headerlink" title="Git项目流程"></a>Git项目流程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 生成 ssh 公私钥</span><br><span class="line">ssh-keygen</span><br><span class="line"># 复制公钥到SSh配置中，以gitee为例: https://gitee.com/profile/sshkeys</span><br><span class="line">cat ~/.ssh/id_rsa.pub</span><br><span class="line"># 克隆需要的项目，以自己的 blog 项目为例</span><br><span class="line">git clone git@gitee.com:liucm-it/liucm-it.git</span><br><span class="line"># 查看当前 branch，默认 branch 一般是 develop，</span><br><span class="line">git branch</span><br><span class="line"># 从 develop branch 切出功能或 bug branch</span><br><span class="line">git checkout -b feat-xxx</span><br><span class="line"># 提交 commit</span><br><span class="line">git add xxx</span><br><span class="line">git commit</span><br><span class="line"># push branch 到 GitLab</span><br><span class="line">git push --set-upstream origin feat-xxx</span><br><span class="line"># 可选：同步 develop branch 最新代码</span><br><span class="line">git stash</span><br><span class="line">git fetch</span><br><span class="line">git rebase origin/develop</span><br><span class="line">git stash pop</span><br><span class="line"># 可选：根据 code review 评论修改 commit，push 修改后的 commit 到 GitLab</span><br><span class="line">git add xxx</span><br><span class="line">git commit --amend</span><br><span class="line">git push -f</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;程序员必学技能Git&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://www.kming6.com/categories/Git/"/>
    
    
      <category term="Git" scheme="https://www.kming6.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Maven的scope都有什么区别？</title>
    <link href="https://www.kming6.com/posts/44361/"/>
    <id>https://www.kming6.com/posts/44361/</id>
    <published>2020-05-25T20:47:29.000Z</published>
    <updated>2021-05-27T11:58:15.389Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>scope元素的作用：控制 dependency 元素的使用范围。通俗来说，就是控制 Jar 包在哪些范围被加载和使用。</p><a id="more"></a><h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><p>含义：<code>compile</code>为默认值，如果没有指定 scope 值，该元素的默认值为 compile。被依赖项目需要参与到当前项目的编译，测试，打包，运行等阶段。打包的时候通常会包含被依赖项目。</p><h3 id="provided"><a href="#provided" class="headerlink" title="provided"></a>provided</h3><p>含义：被依赖项目理论上可以参与编译、测试、运行等阶段，相当于compile，但是再打包阶段做了exclude的动作。<br>适用场景：例如， 如果我们在开发一个web 应用，在编译时我们需要依赖 servlet-api.jar，但是在运行时我们不需要该 jar 包，因为这个 jar 包已由应用服务器提供，此时我们需要使用 provided 进行范围修饰。</p><h3 id="runtime"><a href="#runtime" class="headerlink" title="runtime"></a>runtime</h3><p>含义：表示被依赖项目无需参与项目的编译，但是会参与到项目的测试和运行。与compile相比，被依赖项目无需参与项目的编译。<br>适用场景：例如，在编译的时候我们不需要 JDBC API 的 jar 包，而在运行的时候我们才需要 JDBC 驱动包。</p><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p>含义： 表示被依赖项目仅仅参与测试相关的工作，包括测试代码的编译，执行。<br>适用场景：例如，Junit 测试。</p><h3 id="system"><a href="#system" class="headerlink" title="system"></a>system</h3><p>含义：system 元素与 provided 元素类似，但是被依赖项不会从 maven 仓库中查找，而是从本地系统中获取，systemPath 元素用于制定本地系统中 jar 文件的路径。</p><p>比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.open<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>open-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;basedir&#125;/WEB-INF/lib/xxx.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>它只使用在<dependencymanagement>中，表示从其它的pom中导入dependency的配置，例如 (B项目导入A项目中的包配置)：</dependencymanagement></p><p>springBoot项目，常常会有如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Maven的继承和Java的继承一样，是无法实现多重继承的，如果10个、20个甚至更多模块继承自同一个模块，那么按照我们之前的做法，这个父模块的dependencyManagement会包含大量的依赖。如果你想把这些依赖分类以更清晰的管理，那就不可能了，import scope依赖能解决这个问题。你可以把dependencyManagement放到单独的专门用来管理依赖的pom中，然后在需要使用依赖的模块中通过import scope依赖，就可以引入dependencyManagement。</p><p>如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.test.package<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commen-parent1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactid</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactid</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以通过非继承的方式来引入这段依赖管理配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.test.package<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactid</span>&gt;</span>commen-parent1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactid</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactid</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>import scope只能用在dependencyManagement里面</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;scope元素的作用：控制 dependency 元素的使用范围。通俗来说，就是控制 Jar 包在哪些范围被加载和使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.kming6.com/categories/Java/"/>
    
    
      <category term="Maven" scheme="https://www.kming6.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Spring boot整合Druid连接池</title>
    <link href="https://www.kming6.com/posts/15769/"/>
    <id>https://www.kming6.com/posts/15769/</id>
    <published>2020-05-13T21:25:10.000Z</published>
    <updated>2021-05-27T11:58:15.389Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>druid是阿里巴巴开源、java语言的数据库连接池，除连接池功能外，druid还提供了强大的监控和扩展功能。官方号称为java语言最好的数据库连接池。</p><a id="more"></a><h3 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h3><p>在spring-boot的配置文件application.yml中添加数据库基本配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    druid:</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">jdbc:postgresql://127.0.0.1:5432/activiti-demo</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">louie</span></span><br><span class="line"><span class="attr">      password:</span> <span class="string">louie1234</span></span><br><span class="line"><span class="attr">      driver-class-name:</span> <span class="string">org.postgresql.Driver</span></span><br></pre></td></tr></table></figure><blockquote><p>以上配置中spring.datasource.druid.xxx为druid为spring-boot提供的配置属性，您也可以不适用它们，使用spring-boot原有的配置属性也是一样的。</p></blockquote><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>执行Application类启动spring-boot，浏览器访问<a href="http://localhost:8080/druid/index.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/druid/index.html</a>查看监控效果:</p><p><img src="https://cdn.jsdelivr.net/gh/liucm-it/ImgHosting/pic/druid_datasource.png" alt="效果图"></p><h3 id="数据库密码加密"><a href="#数据库密码加密" class="headerlink" title="数据库密码加密"></a>数据库密码加密</h3><p>将数据库密码直接写在配置文件中，安全方面考虑是具有风险的，druid的configFilter具备数据库密码加密功能。</p><ul><li>密码加密</li></ul><p>cmd进入<code>Druid</code>jar包所在目录，执行以下命令，其中PASSWORD为您数据的密码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp druid-<span class="number">1.1</span>.9.jar com.alibaba.druid.filter.config.ConfigTools PASSWORD</span><br></pre></td></tr></table></figure><p>输出如下，其中password即为加密后的密码，publicKey为加密的公钥：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">privateKey:MIIBVQIBADANBgkqhkiG9w0BAQEFAASCAT8wggE7AgEAAkEAjhd6PlxyNExMYJsPuIXnvJIVIL77q1ZE+YcZDFMaCMcK3hznsx89NrobrFXaEoHyLWuzRsD2q9/7tpv3fn+3owIDAQABAkBNS6I5OEr7/iFyUAfORjGY2BLcPGhlfUmKQB61IKPB781xWit3FtFocqKGde6iuRBjMGtDKINFD5CqUYYuIK8hAiEAxQ1r03pi+uAqSrb75pieniJuN9fljLlomE5+UGVN3ZMCIQC4mRRs9YsW0i9QjybqvzD615eIv8c9eQjJG67Ot4uHsQIhAJdJcptuv0d1i4LJciTc0AsAzDY7n5WnU9J7kScQX/PZAiEApw450uVfizaJhSEXugduXwOuah4MRBB9p+o6h27JgfECIHrHqsV57OZh9m2f28j5/Ax5O4xUDy9STvkWR/zvHhu5</span><br><span class="line">publicKey:MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAI4Xej5ccjRMTGCbD7iF57ySFSC++6tWRPmHGQxTGgjHCt4c57MfPTa6G6xV2hKB8i1rs0bA9qvf+7ab935/t6MCAwEAAQ==</span><br><span class="line">password:TT0HLMKz6fPGiaih/F7r/s6zRonc9XiViRY5abqJSZTANPppXpxuMntcwuXqFEZH15v/qlE3UNnHx7pb9I3xWA==</span><br></pre></td></tr></table></figure><ul><li>修改application.yml<ul><li>密码改为加密后的密码</li><li>开启druid的configFilter</li><li>启用加密并配置publicKey</li></ul></li></ul><p>参考配置如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    druid:</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">jdbc:postgresql://127.0.0.1:5432/activiti-demo</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">louie</span></span><br><span class="line"><span class="attr">      password:</span> <span class="string">TT0HLMKz6fPGiaih/F7r/s6zRonc9XiViRY5abqJSZTANPppXpxuMntcwuXqFEZH15v/qlE3UNnHx7pb9I3xWA==</span> <span class="comment">#加密后的密码</span></span><br><span class="line"><span class="attr">      driver-class-name:</span> <span class="string">org.postgresql.Driver</span></span><br><span class="line"><span class="attr">      filter:</span></span><br><span class="line"><span class="attr">        config:</span></span><br><span class="line"><span class="attr">          enabled:</span> <span class="literal">true</span> <span class="comment">#开启configFilter</span></span><br><span class="line"><span class="attr">      connection-properties:</span> <span class="string">config.decrypt=true;config.decrypt.key=$&#123;public_key&#125;</span> <span class="comment">#启用加密，配置公钥</span></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line"><span class="attr">      ddl-auto:</span> <span class="string">none</span></span><br><span class="line"><span class="attr">    database:</span> <span class="string">postgresql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">public_key:</span> <span class="string">MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAI4Xej5ccjRMTGCbD7iF57ySFSC++6tWRPmHGQxTGgjHCt4c57MfPTa6G6xV2hKB8i1rs0bA9qvf+7ab935/t6MCAwEAAQ==</span></span><br></pre></td></tr></table></figure><h3 id="spring监控"><a href="#spring监控" class="headerlink" title="spring监控"></a>spring监控</h3><p>Druid提供了Spring和Jdbc的关联监控，基于spring AOP实现，可通过类型、方法名等多种方法配置拦截，其详细说明点击<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_Druid%E5%92%8CSpring%E5%85%B3%E8%81%94%E7%9B%91%E6%8E%A7%E9%85%8D%E7%BD%AE" rel="external nofollow noopener noreferrer" target="_blank">这里</a>查看，以下示例为按方法名正则匹配拦截的配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring</span></span><br><span class="line">  <span class="string">datasource</span></span><br><span class="line">    <span class="string">druid</span></span><br><span class="line"><span class="attr">      aop-patterns:</span> <span class="string">com.github.*</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;druid是阿里巴巴开源、java语言的数据库连接池，除连接池功能外，druid还提供了强大的监控和扩展功能。官方号称为java语言最好的数据库连接池。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.kming6.com/categories/Java/"/>
    
    
      <category term="SpringBoot" scheme="https://www.kming6.com/tags/SpringBoot/"/>
    
      <category term="Druid" scheme="https://www.kming6.com/tags/Druid/"/>
    
  </entry>
  
  <entry>
    <title>mysql创建表出错 [Err] 1055</title>
    <link href="https://www.kming6.com/posts/51518/"/>
    <id>https://www.kming6.com/posts/51518/</id>
    <published>2020-02-29T13:01:10.000Z</published>
    <updated>2021-05-27T11:58:15.389Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1055 - Expression #1 of ORDER BY clause is not in GROUP BY clause and contains nonaggregated column ‘information_schema.PROFILING.SEQ’ which is not functionally dependent on columns in GROUP BY clause</p><a id="more"></a><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> sql_mode=(<span class="keyword">SELECT</span> <span class="keyword">REPLACE</span>(@@sql_mode,<span class="string">'ONLY_FULL_GROUP_BY'</span>,<span class="string">''</span>));</span><br></pre></td></tr></table></figure><p>优点：不用重启mysql</p><p>缺点：重启mysql后还会出现标题错误</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @@global.sql_mode;</span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>在my.cnf中修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure><p>注:sql_mode值用select @@sql_mode;查询出来后，将ONLY_FULL_GROUP_BY去掉剩余的值</p><p>优点：重启mysql 一次性解决问题</p><p>缺点：需要重启mysql</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1055 - Expression #1 of ORDER BY clause is not in GROUP BY clause and contains nonaggregated column ‘information_schema.PROFILING.SEQ’ which is not functionally dependent on columns in GROUP BY clause&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://www.kming6.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="Mysql" scheme="https://www.kming6.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://www.kming6.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>如何让Mysql数据库支持emoji配置?</title>
    <link href="https://www.kming6.com/posts/57060/"/>
    <id>https://www.kming6.com/posts/57060/</id>
    <published>2020-02-17T21:58:26.000Z</published>
    <updated>2021-05-27T11:58:15.389Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>以下两种方案任选一<br>notes: 修改数据库配置可以一劳永逸，直接sql修改当机器重启时新加的设置会被还原</p><a id="more"></a><h2 id="改数据库编码"><a href="#改数据库编码" class="headerlink" title="改数据库编码"></a>改数据库编码</h2><h3 id="修改数据库配置文件"><a href="#修改数据库配置文件" class="headerlink" title="修改数据库配置文件"></a>修改数据库配置文件</h3><p>windows下的为my.ini(linux下的为my.cnf)<br>windows下的my.ini路径：C:\ProgramData\MySQL\MySQL Server 5.6</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set = utf8mb4</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set = utf8mb4</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server = utf8mb4</span><br><span class="line">collation-server = utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure><h2 id="修改数据库、表、字段的编码为utf8m64"><a href="#修改数据库、表、字段的编码为utf8m64" class="headerlink" title="修改数据库、表、字段的编码为utf8m64"></a>修改数据库、表、字段的编码为utf8m64</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改数据库:</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> <span class="string">`test`</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4 <span class="keyword">COLLATE</span> = utf8mb4_unicode_ci;</span><br><span class="line"><span class="comment">-- 修改表:</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`article`</span> <span class="keyword">CONVERT</span> <span class="keyword">TO</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci;</span><br><span class="line"><span class="comment">-- 修改表字段:</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`article`</span> <span class="keyword">CHANGE</span> <span class="string">`content`</span> <span class="keyword">content</span> LONGTEXT <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">COMMENT</span> <span class="string">'文章内容'</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`article`</span> <span class="keyword">CHANGE</span> <span class="string">`content_md`</span> content_md LONGTEXT <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">COMMENT</span> <span class="string">'markdown版的文章内容'</span>;</span><br></pre></td></tr></table></figure><h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">    datasource:</span><br><span class="line">        druid:</span><br><span class="line">            connection-init-sqls: set names utf8mb4</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下两种方案任选一&lt;br&gt;notes: 修改数据库配置可以一劳永逸，直接sql修改当机器重启时新加的设置会被还原&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://www.kming6.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="Mysql" scheme="https://www.kming6.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://www.kming6.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>如何使用Win10系统远程Ubuntu16.4系统</title>
    <link href="https://www.kming6.com/posts/30266/"/>
    <id>https://www.kming6.com/posts/30266/</id>
    <published>2020-02-11T08:39:13.000Z</published>
    <updated>2021-05-27T11:58:15.389Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>偶然遇到需要使用win10远程Ubuntu16.4系统进行远程办公，记录一下方便以后使用</p><a id="more"></a><h3 id="Ubuntu系统具体步骤如下"><a href="#Ubuntu系统具体步骤如下" class="headerlink" title="Ubuntu系统具体步骤如下"></a>Ubuntu系统具体步骤如下</h3><ul><li>安装相关软件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install tightvncserver xrdp  xubuntu-desktop</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> xfce4-session &gt;~/.xsession</span><br></pre></td></tr></table></figure><ul><li>编辑startwm.sh，在<code>./etc/X11/Xsession</code>的前一行添加<code>xfce4-session</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/xrdp/startwm.sh <span class="comment"># 编辑文件，在 ./etc/X11/Xsession前添加一行 xfce4-session</span></span><br></pre></td></tr></table></figure><ul><li>重启服务，重启系统</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service xrdp restart</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><h3 id="Win10系统操作步骤"><a href="#Win10系统操作步骤" class="headerlink" title="Win10系统操作步骤"></a>Win10系统操作步骤</h3><ul><li>打开远程桌面，(WIN + R输入mstsc)，输入IP地址</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liucm-it/ImgHosting/pic/1581382630(1).jpg" alt="mstsc"></p><ul><li>登陆模式选择，使用的默认的，输入密码账号连接即可</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liucm-it/ImgHosting/pic/15813828.png" alt="mode"></p><ul><li>连接上如图所示</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liucm-it/ImgHosting/pic/15813.png" alt="pic"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;偶然遇到需要使用win10远程Ubuntu16.4系统进行远程办公，记录一下方便以后使用&lt;/p&gt;
    
    </summary>
    
    
      <category term="远程连接" scheme="https://www.kming6.com/categories/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    
    
      <category term="Win10" scheme="https://www.kming6.com/tags/Win10/"/>
    
      <category term="Ubuntu16.4" scheme="https://www.kming6.com/tags/Ubuntu16-4/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot注解整理</title>
    <link href="https://www.kming6.com/posts/52374/"/>
    <id>https://www.kming6.com/posts/52374/</id>
    <published>2020-01-10T19:39:06.000Z</published>
    <updated>2021-05-27T11:58:15.389Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>使用Spring Boot框架过程中会遇到许多的注解，在此整理一下方便查阅</p><a id="more"></a><h3 id="Spring-MVC注解"><a href="#Spring-MVC注解" class="headerlink" title="Spring MVC注解"></a>Spring MVC注解</h3><ul><li>@RequestMapping</li></ul><p>@RequestMapping注解主要使用在类或方法上，将Web请求的路径与Controller类中的方法做映射。<br>@RequestMapping注解有以下几种配置属性：</p><ul><li>value: 映射请求URL或者其别名</li><li>method: 兼容HTTP的方法名</li><li>params: 根据HTTP参数的存在、缺省或值对请求进行过滤</li><li>header: 根据HTTP Header的存在、缺省或值对请求进行过滤</li><li>consume: 设定在HTTP请求正文中允许使用的媒体类型</li><li>product: 在HTTP响应体中允许使用的媒体类型</li></ul><p>常用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/demo/test"</span>, method=RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"/test"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/test"</span>, method=RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"/test"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@RequestHeader<br>可以使用@RequestHeader注释将请求头绑定到控制器中的方法参数。</li></ul><p>常见的Request headers</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host                    localhost:8080</span><br><span class="line">Accept                  text/html,application/xhtml+xml,application/xml;q=0.9</span><br><span class="line">Accept-Language         fr,en-gb;q=0.7,en;q=0.3</span><br><span class="line">Accept-Encoding         gzip,deflate</span><br><span class="line">Accept-Charset          ISO-8859-1,utf-8;q=0.7,*;q=0.7</span><br><span class="line">Keep-Alive              300</span><br></pre></td></tr></table></figure><p>获取<code>Accept-Encoding</code>和<code>Keep-Alive</code>的值，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/demo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @RequestHeader(<span class="string">"Accept-Encoding"</span>)</span> String encoding,</span></span><br><span class="line"><span class="function">        @<span class="title">RequestHeader</span><span class="params">(<span class="string">"Keep-Alive"</span>)</span> <span class="keyword">long</span> keepAlive) </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@RequestBody</li></ul><p>@RequestBody在处理请求方法的参数列表中使用，它可以将请求主体中的参数绑定到一个对象中，请求主体参数是通过HttpMessageConverter传递的，<br>根据请求主体中的参数名与对象的属性名进行匹配并绑定值。此外，还可以通过@Valid注解对请求主体中的参数进行校验。</p><p>常用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">addUser</span><span class="params">(@Valid @RequestBody User user)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> userService.save(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@GetMapping</li></ul><p>@GetMapping注解用于处理HTTP GET请求，并将请求映射到具体的处理方法中。具体来说，@GetMapping是一个组合注解，它相当于是@RequestMapping(method=RequestMethod.GET)的简写方式。<br>常用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> userService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findById</span><span class="params">(@PathVariable(name=<span class="string">"id"</span>)</span> <span class="keyword">long</span> id) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> userService.findOne(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@PostMapping</li></ul><p>@PostMapping注解用于处理HTTP POST请求，并将请求映射到具体的处理方法中。@PostMapping与@GetMapping一样，也是一个组合注解，它相当于是@RequestMapping(method=HttpMethod.POST)的简写方式。<br>常用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">addUser</span><span class="params">(@Valid @RequestBody User user)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> userService.save(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@PutMapping</li></ul><p>@PutMapping注解用于处理HTTP PUT请求，并将请求映射到具体的处理方法中，@PutMapping是一个组合注解，相当于是@RequestMapping(method=HttpMethod.PUT)的简写方式。<br>常用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">editUser</span><span class="params">(@PathVariable(name=<span class="string">"id"</span>)</span> <span class="keyword">long</span> id, User user) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> userService.update(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@DeleteMapping</li></ul><p>@DeleteMapping注解用于处理HTTP DELETE请求，并将请求映射到删除方法中。@DeleteMapping是一个组合注解，它相当于是@RequestMapping(method=HttpMethod.DELETE)的简写方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteById</span><span class="params">(@PathVariable(name=<span class="string">"id"</span>)</span> <span class="keyword">long</span> id) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> userService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@PatchMapping</li></ul><p>@PatchMapping注解用于处理HTTP PATCH请求，并将请求映射到对应的处理方法中。@PatchMapping相当于是@RequestMapping(method=HttpMethod.PATCH)的简写方式。<br>常用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PatchMapping</span>(<span class="string">"/patch"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Object&gt; <span class="title">patch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity(<span class="string">"patch method response message"</span>, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@ControllerAdvice</li></ul><p>@ControllerAdvice是@Component注解的一个延伸注解，Spring会自动扫描并检测被@ControllerAdvice所标注的类。@ControllerAdvice需要和@ExceptionHandler、@InitBinder以及@ModelAttribute注解搭配使用，主要是用来处理控制器所抛出的异常信息。定义一个被@ControllerAdvice所标注的类，在该类中，定义一个用于处理具体异常的方法，并使用@ExceptionHandler注解进行标记。此外，在有必要的时候，可以使用@InitBinder在类中进行全局的配置，还可以使用@ModelAttribute配置与视图相关的参数。使用@ControllerAdvice注解，就可以快速的创建统一的，自定义的异常处理类。</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InitBinder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(WebDataBinder binder)</span> </span>&#123;</span><br><span class="line">        CustomDateEditor editor = <span class="keyword">new</span> CustomDateEditor(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>),<span class="keyword">true</span>);</span><br><span class="line">        binder.registerCustomEditor(Date.class, editor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ModelAttribute</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modelAttribute</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"user not found error."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = &#123;AccountException.class&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">unauthorizedExceptionHandle</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        e.printStackTrace(); <span class="comment">// 打印异常栈</span></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.addObject(<span class="string">"ex"</span>, ex);</span><br><span class="line">        modelAndView.setViewName(<span class="string">"error"</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@ResponseBody</li></ul><p>@ResponseBody会自动将控制器中方法的返回值写入到HTTP响应中。特别的，@ResponseBody注解只能用在被@Controller注解标记的类中。如果在被@RestController标记的类中，则方法不需要使用@ResponseBody注解进行标注。@RestController相当于是@Controller和@ResponseBody的组合注解。<br>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findOne</span><span class="params">(@PathVariable(name=<span class="string">"id"</span>)</span> <span class="keyword">long</span> id) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> userService.findOne(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@ExceptionHandler</li></ul><p>@ExceptionHander注解用于标注处理特定类型异常类所抛出异常的方法。当控制器中的方法抛出异常时，Spring会自动捕获异常，并将捕获的异常信息传递给被@ExceptionHandler标注的方法。<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = &#123;AccountException.class&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">unauthorizedExceptionHandle</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        e.printStackTrace(); <span class="comment">// 打印异常栈</span></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.addObject(<span class="string">"ex"</span>, ex);</span><br><span class="line">        modelAndView.setViewName(<span class="string">"error"</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@ResponseStatus</li></ul><p>@ResponseStatus注解可以标注请求处理方法。使用此注解，可以指定响应所需要的HTTP STATUS。特别地，我们可以使用HttpStauts类对该注解的value属性进行赋值。<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/401"</span>)</span><br><span class="line"><span class="meta">@ResponseStatus</span>(HttpStatus.BAD_REQUEST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml401</span><span class="params">(HttpServletRequest request, HttpServletResponse response, WebRequest webRequest)</span> </span>&#123;</span><br><span class="line">    response.setStatus(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">    Map&lt;String, Object&gt; model = getErrorAttributes(webRequest, isIncludeStackTrace(request, MediaType.TEXT_HTML));</span><br><span class="line">    model.put(<span class="string">"queryString"</span>, request.getQueryString());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"error/401"</span>, model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@PathVariable</li></ul><p>@PathVariable注解是将方法中的参数绑定到请求URI中的模板变量上。可以通过@RequestMapping注解来指定URI的模板变量，然后使用@PathVariable注解将方法中的参数绑定到模板变量上。@PathVariable注解允许我们使用value或name属性来给参数取一个别名。<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findOne</span><span class="params">(@PathVariable(name=<span class="string">"id"</span>)</span> <span class="keyword">long</span> id) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> userService.findOne(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模板变量名需要使用“{ }”进行包裹，如果方法的参数名与URI模板变量名一致，则在@PathVariable中就可以省略别名的定义。<br>如果参数是一个非必须的，可选的项，则可以在@PathVariable中设置require = false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findOne</span><span class="params">(@PathVariable <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> userService.findOne(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@RequestParam</li></ul><p>@RequestParam注解用于将方法的参数与Web请求的传递的参数进行绑定。使用@RequestParam可以轻松的访问HTTP请求参数的值。<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/getUserTag"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> UserTag <span class="title">getUserTag</span><span class="params">(@RequestParam(name=<span class="string">"id"</span>)</span> Long id) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userTagService.findById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Controller</li></ul><p>@Controller是@Component注解的一个延伸，Spring会自动扫描并配置被该注解标注的类。此注解用于标注Spring MVC的控制器。<br>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findOne</span><span class="params">(@PathVariable <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> userService.findOne(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@RestController</li></ul><p>@RestController是在Spring 4.0开始引入的，这是一个特定的控制器注解。此注解相当于@Controller和@ResponseBody的简写方式。当使用此注解时，不需要再在方法上使用@ResponseBody注解。<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findOne</span><span class="params">(@PathVariable <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> userService.findOne(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@CookieValue</li></ul><p>可以使用@CookieValue注释将HTTP cookie的值绑定到控制器中的方法参数。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/demo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(@CookieValue(<span class="string">"JSESSIONID"</span>)</span> String cookie) </span>&#123; </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@SessionAttributes</li></ul><p>@SessionAttributes用于在请求之间的HTTP Servlet会话中存储模型属性。它是类型级别的注释，声明特定控制器使用的会话属性。这通常列出模型属性的名称或模型属性的类型，它们应该透明地存储在会话中，以便后续请求访问。@SessionAttributes用于在请求之间的HTTP Servlet会话中存储模型属性。它是类型级别的注释，声明特定控制器使用的会话属性。这通常列出模型属性的名称或模型属性的类型，它们应该透明地存储在会话中，以便后续请求访问。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@SessionAttributes</span>(<span class="string">"pet"</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EditPetForm</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果您需要访问全局管理的预先存在的会话属性(即，在控制器之外——例如，通过过滤器)，并且可能存在也可能不存在，那么您可以在方法参数上使用@SessionAttribute注释，如下面的示例所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handle</span><span class="params">(@SessionAttribute User user)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@RequestAttribute</li></ul><p>与@SessionAttribute类似，您可以使用@RequestAttribute注释来访问先前创建的已存在的请求属性(例如，通过Servlet过滤器或HandlerInterceptor):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handle</span><span class="params">(@RequestAttribute Client client)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@ModelAttribute、</li></ul><p>通过此注解，可以通过模型索引名称来访问已经存在于控制器中的model。<br>与@PathVariable和@RequestParam注解一样，如果参数名与模型具有相同的名字，则不必指定索引名称<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(@ModelAttribute(<span class="string">"user"</span>)</span> User user) </span>&#123;</span><br><span class="line">    userService.save(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@CrossOrigin</li></ul><p>@CrossOrigin注解将为请求处理类或请求处理方法提供跨域调用支持。如果我们将此注解标注类，那么类中的所有方法都将获得支持跨域的能力。使用此注解的好处是可以微调跨域行为。<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/user/profile"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">userDetails</span><span class="params">(@RequestParam(name=<span class="string">"id"</span>, defaultValue=<span class="string">"0"</span>)</span> <span class="keyword">long</span> id) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (id == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> userService.findOne(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@InitBinder</li></ul><p>@InitBinder注解用于标注初始化WebDataBinider的方法，该方法用于对Http请求传递的表单数据进行处理，如时间格式化、字符串处理等。<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@InitBinder</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(WebDataBinder binder)</span> </span>&#123;</span><br><span class="line">    CustomDateEditor editor = <span class="keyword">new</span> CustomDateEditor(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>),<span class="keyword">true</span>);</span><br><span class="line">    binder.registerCustomEditor(Date.class, editor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-Bean相关注解"><a href="#Spring-Bean相关注解" class="headerlink" title="Spring Bean相关注解"></a>Spring Bean相关注解</h3><ul><li>@ComponentScan</li></ul><p>@ComponentScan注解用于配置Spring需要扫描的被组件注解注释的类所在的包。可以通过配置其basePackages属性或者value属性来配置需要扫描的包路径。value属性是basePackages的别名。<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages=<span class="string">"com.example"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">ScanConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Component</li></ul><p>@Component注解用于标注一个普通的组件类，它没有明确的业务范围，只是通知Spring被此注解的类需要被纳入到Spring Bean容器中并进行管理。<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QuartzJobRepository quartzJobRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QuartzManage quartzManage;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments applicationArguments)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"----------------------注入定时任务-----------------------"</span>);</span><br><span class="line">        List&lt;QuartzJob&gt; quartzJobs = quartzJobRepository.findByIsPauseIsFalse();</span><br><span class="line">        quartzJobs.forEach(quartzJob -&gt; &#123;</span><br><span class="line">            quartzManage.addJob(quartzJob);</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">"--------------------定时任务注入完成---------------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Service</li></ul><p>@Service注解是@Component的一个延伸（特例），它用于标注业务逻辑类。与@Component注解一样，被此注解标注的类，会自动被Spring所管理。<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"userService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Repository</li></ul><p>@Repository注解也是@Component注解的延伸，与@Component注解一样，被此注解标注的类会被Spring自动管理起来，@Repository注解用于标注DAO层的数据持久化类。<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-Dependency-Inject-与-Bean-Scops注解"><a href="#Spring-Dependency-Inject-与-Bean-Scops注解" class="headerlink" title="Spring Dependency Inject 与 Bean Scops注解"></a>Spring Dependency Inject 与 Bean Scops注解</h3><h4 id="Spring-DI注解"><a href="#Spring-DI注解" class="headerlink" title="Spring DI注解"></a>Spring DI注解</h4><ul><li>@DependsOn</li></ul><p>@DependsOn注解可以配置Spring IoC容器在初始化一个Bean之前，先初始化其他的Bean对象。<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SecondBean secondBean;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ThirdBean thirdBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondBean</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecondBean</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThirdBean</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThirdBean</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerBeanConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"firstBean"</span>)</span><br><span class="line">    <span class="meta">@DependsOn</span>(value=&#123;<span class="string">"secondBean"</span>, <span class="string">"thirdBean"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> FirstBean <span class="title">firstBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FirstBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"secondBean"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecondBean <span class="title">secondBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SecondBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"thirdBean"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThirdBean <span class="title">thirdBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThirdBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Bean</li></ul><p>@Bean注解主要的作用是告知Spring，被此注解所标注的类将需要纳入到Bean管理工厂中。@Bean注解的用法很简单，在这里，着重介绍@Bean注解中initMethod和destroyMethod的用法。<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"this is init method."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"this is destroy method."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(initMethod=<span class="string">"init"</span>, destoryMethod=<span class="string">"destroy"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserServiceImpl <span class="title">userService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Scope</li></ul><p>@Scope注解可以用来定义@Component标注的类的作用范围以及@Bean所标记的类的作用范围。</p><p>@Scope所限定的作用范围有：singleton、prototype、request、session、globalSession或者其他的自定义范围。这里以prototype为例子进行讲解。当一个Spring Bean被声明为prototype（原型模式）时，在每次需要使用到该类的时候，Spring IoC容器都会初始化一个新的改类的实例。在定义一个Bean时，可以设置Bean的scope属性为prototype：scope=“prototype”,也可以使用@Scope注解设置，如下：</p><p>@Scope(value=ConfigurableBeanFactory.SCOPE_PROPTOTYPE)</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Scope</span>(value=ConfigurableBeanFactory.SCOPE_PROPTOTYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Scope</span>(value=ConfigurableBeanFactory.SCOPE_PROPTOTYPE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserServiceImpl <span class="title">userService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Scope 单例模式</p><p>当@Scope的作用范围设置成Singleton时，被此注解所标注的类只会被Spring IoC容器初始化一次。在默认情况下，Spring IoC容器所初始化的类实例都为singleton。同样的原理，此情形也有两种配置方式，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Scope</span>(ConfigurableBeanFactory.SCOPE_SINGLETON)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Scope</span>(ConfigurableBeanFactory.SCOPE_SINGLETON)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserServiceImpl <span class="title">userService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="容器配置注解"><a href="#容器配置注解" class="headerlink" title="容器配置注解"></a>容器配置注解</h4><ul><li>@Autowired</li></ul><p>@Autowired注解用于标记Spring将要解析和注入的依赖项。此注解可以作用在构造函数、字段和setter方法上。</p><p>作用于构造函数</p><p>下面是@Autowired注解标注构造函数的使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserController</span><span class="params">(UserService userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userServic = userservice;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作用于setter方法</p><p>下面是@Autowired注解标注setter方法的示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserService</span><span class="params">(UserService userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userServic = userservice;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作用于字段</p><p>@Autowired注解标注字段是最简单的，只需要在对应的字段上加入此注解即可，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Primary</li></ul><p>当系统中需要配置多个具有相同类型的bean时，@Primary可以定义这些Bean的优先级。下面将给出一个实例代码来说明这一特性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MessageService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">sendMessage</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabitMQMessageImpl</span> <span class="keyword">implements</span> <span class="title">MessageService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMessage</span><span class="params">(String ms)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"this is RabitMQ message"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaMessageImpl</span> <span class="keyword">implements</span> <span class="title">MessageService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMessage</span><span class="params">(String ms)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"this is Kafka message"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMQMessageImpl</span> <span class="keyword">implements</span> <span class="title">MessageService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMessage</span><span class="params">(String ms)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"this is ActiveMQ message"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageService messageService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/info"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">info</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> messageService.sendMessage(); <span class="comment">// this is ActiveMQ message</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@PostConstruct与@PreDestroy</li></ul><p>值得注意的是，这两个注解不属于Spring,它们是源于JSR-250中的两个注解，位于common-annotations.jar中。@PostConstruct注解用于标注在Bean被Spring初始化之前需要执行的方法。@PreDestroy注解用于标注Bean被销毁前需要执行的方法。下面是具体的示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoComponent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      list.add(<span class="string">"aaa"</span>);</span><br><span class="line">      list.add(<span class="string">"bbb"</span>);</span><br><span class="line">      list.add(<span class="string">"ccc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      list.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Qualifier</li></ul><p>当系统中存在同一类型的多个Bean时，@Autowired在进行依赖注入的时候就不知道该选择哪一个实现类进行注入。此时，我们可以使用@Qualifier注解来微调，帮助@Autowired选择正确的依赖项。下面是一个关于此注解的代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MessageService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">sendMessage</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"emailService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailServiceImple</span> <span class="keyword">implements</span> <span class="title">MessageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMessage</span><span class="params">(String ms)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"send email, message is "</span> + ms;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"smsService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SMSServiceImpl</span> <span class="keyword">implements</span> <span class="title">MessageService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMessage</span><span class="params">(String ms)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"send sms, message is "</span> + ms;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MessageProcessor</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">processMessage</span><span class="params">(String ms)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageProcessorImpl</span> <span class="keyword">implements</span> <span class="title">MessageProcessor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MessageService messageService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"emailService"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessageService</span><span class="params">(MessageService ms)</span> </span>&#123;</span><br><span class="line">      messageService = ms;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">processMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> messageService.sendMessage(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-Boot注解"><a href="#Spring-Boot注解" class="headerlink" title="Spring Boot注解"></a>Spring Boot注解</h3><ul><li>@SpringBootApplication</li></ul><p>@SpringBootApplication注解是一个快捷的配置注解，在被它标注的类中，可以定义一个或多个Bean，并自动触发自动配置Bean和自动扫描组件。</p><p>此注解相当于@Configuration、@EnableAutoConfiguration和@ComponentScan的组合。在Spring Boot应用程序的主类中，就使用了此注解。示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">      SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@EnableAutoConfiguration</li></ul><p>@EnableAutoConfiguration注解用于通知Spring，根据当前类路径下引入的依赖包，自动配置与这些依赖包相关的配置项。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRun</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AppRun.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpringContextHolder <span class="title">springContextHolder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpringContextHolder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@ConditionalOnClass与@ConditionalOnMissingClass</li></ul><p>这两个注解属于类条件注解，它们根据是否存在某个类作为判断依据来决定是否要执行某些配置。下面是一个简单的示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(DataSource.class)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQLAutoConfiguration</span> </span>&#123;</span><br><span class="line"> <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@ConditionalOnBean与@ConditionalOnMissingBean</li></ul><p>这两个注解属于对象条件注解，根据是否存在某个对象作为依据来决定是否要执行某些配置方法。示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(name=<span class="string">"dataSource"</span>)</span><br><span class="line"><span class="function">LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MyBean <span class="title">myBean</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@ConditionalOnProperty</li></ul><p>@ConditionalOnProperty注解会根据Spring配置文件中的配置项是否满足配置要求，从而决定是否要执行被其标注的方法。示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(name=<span class="string">"myapp"</span>,havingValue=<span class="string">"on"</span>)</span><br><span class="line"><span class="function">App <span class="title">myapp</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> App();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@ConditionalOnResource</li></ul><p>此注解用于检测当某个配置文件存在使，则触发被其标注的方法，下面是使用此注解的代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnResource</span>(resources = <span class="string">"classpath:website.properties"</span>)</span><br><span class="line"><span class="function">Properties <span class="title">addWebsiteProperties</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@ConditionalOnWebApplication与@ConditionalOnNotWebApplication</li></ul><p>这两个注解用于判断当前的应用程序是否是Web应用程序。如果当前应用是Web应用程序，则使用Spring WebApplicationContext，并定义其会话的生命周期。<br>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="function">HealthCheckController <span class="title">healthCheckController</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@ConditionalExpression</li></ul><p>此注解可以让我们控制更细粒度的基于表达式的配置条件限制。当表达式满足某个条件或者表达式为真的时候，将会执行被此注解标注的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalException</span>(<span class="string">"$&#123;localstore&#125; &amp;&amp; $&#123;local == 'true'&#125;"</span>)</span><br><span class="line"><span class="function">LocalFileStore <span class="title">store</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Conditional</li></ul><p>@Conditional注解可以控制更为复杂的配置条件。在Spring内置的条件控制注解不满足应用需求的时候，可以使用此注解定义自定义的控制条件，以达到自定义的要求。下面是使用该注解的简单示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Conditioanl</span>(CustomConditioanl.class)</span><br><span class="line"><span class="function">CustomProperties <span class="title">addCustomProperties</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Spring Boot框架过程中会遇到许多的注解，在此整理一下方便查阅&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.kming6.com/categories/Java/"/>
    
      <category term="Spring Boot" scheme="https://www.kming6.com/categories/Java/Spring-Boot/"/>
    
    
      <category term="Java" scheme="https://www.kming6.com/tags/Java/"/>
    
      <category term="Spring" scheme="https://www.kming6.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="https://www.kming6.com/tags/Spring-Boot/"/>
    
      <category term="SpringMVC" scheme="https://www.kming6.com/tags/SpringMVC/"/>
    
      <category term="Spring Bean" scheme="https://www.kming6.com/tags/Spring-Bean/"/>
    
      <category term="注解" scheme="https://www.kming6.com/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>script标签中的属性解析</title>
    <link href="https://www.kming6.com/posts/13123/"/>
    <id>https://www.kming6.com/posts/13123/</id>
    <published>2019-12-25T22:05:51.000Z</published>
    <updated>2021-05-27T11:58:15.389Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>使用Script标签导入JS的时候，偶尔会看到标签中带有async、defer、integrity、crossorigin和onerror的属性，一时好奇就花时间研究了一下。</p><a id="more"></a><h3 id="没有任何属性的script"><a href="#没有任何属性的script" class="headerlink" title="没有任何属性的script"></a>没有任何属性的script</h3><p>导入JS代码的HTML代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>没有添加 <code>async、defer</code> 等任何属性时，浏览器会按照顺序解析HTML文档，当解析到JS时，会立即执行JS代码，阻止后面文档的解析,<br>如果JS代码中有操作相关HTML文档代码，JS会由于解析不到该HTML文档而报错。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"a.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'b'</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"c.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器在解析到上面的 <code>script</code> 标签时会阻止 HTML 页面文档解析，并行的下载 a.js, c.js，依次执行 a.js, console.log(‘b’), c.js 后，才会继续解析渲染后续的页面文档。这也是为什么你会经常看到一些建议，需要将 DOM 操作的 js 要放在 body 标签的最后，原因就是不阻塞 HTML 文档的解析，使页面更快的渲染在浏览器上。</p><h3 id="async属性"><a href="#async属性" class="headerlink" title="async属性"></a>async属性</h3><ul><li><code>async</code> 只适用于外部链接的脚步文件，内联JS文件不起作用，规定脚本异步加载</li><li>加载过程不会阻塞HTML页面解析</li><li>加载完成会立即执行，执行时将阻塞HTML页面解析</li><li>先下载完成先执行</li><li>由于加载时间的长短不一致，执行的顺序可能不会按照文档顺序执行</li><li>执行JS的时候，可能HTML还没有解析完</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"app.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>带 <code>async</code> 的 script 标签，加载和渲染后续文档元素的过程将和脚本的加载并行进行（异步加载JS代码），但JS脚本的加载完成后会马上执行，而JS执行时会阻塞 HTML 文档的解析。</p><p>兼容性：<a href="https://caniuse.com/#search=script-async" rel="external nofollow noopener noreferrer" target="_blank">async attribute for external scripts</a></p><h3 id="defer属性"><a href="#defer属性" class="headerlink" title="defer属性"></a>defer属性</h3><ul><li><code>defer</code> 只适用于外部链接的脚步文件，内联JS文件不起作用，规定脚本延迟执行</li><li>不会阻塞HTML页面的解析</li><li>在 HTML 解析完成后, DOMContentLoaded 事件之前执行</li><li>会按照JS脚本出现的顺序依次执行</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">"app.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>加上 <code>defer</code> 属性的 script 标签，加载后续HTML文档元素的过程和脚本的加载过程并行进行（异步），和 <code>async</code> 属性不同的是，<code>defer</code> 属性脚本会在所有元素解析完成之后才执行，在 <code>DOMContentLoaded</code> 事件触发之前完成。</p><p>兼容性：<a href="https://caniuse.com/#search=script-defer" rel="external nofollow noopener noreferrer" target="_blank">defer attribute for external scripts</a></p><h3 id="async-和-defer-属性的区别"><a href="#async-和-defer-属性的区别" class="headerlink" title="async 和 defer 属性的区别"></a>async 和 defer 属性的区别</h3><ul><li><code>defer</code> 和 <code>async</code> 都是并行加载的，不同的是加载完成后的执行时机。</li><li><code>async</code> 属性的脚本在它加载结束就会立刻执行，因加载时间的不同，所以可能出现脚本执行顺序不一致的情况</li><li>每一个 <code>defer</code> 属性的脚本会在 HTML 文档解析完成后, DOMContentLoaded 事件之前执行，按照 DOM 中的顺序执行</li><li>defer 和 async 都只适用于外部链接的脚本文件，对与内联的 script 标签没有作用</li></ul><h3 id="type-module-的-script-标签"><a href="#type-module-的-script-标签" class="headerlink" title="type=module 的 script 标签"></a>type=module 的 script 标签</h3><blockquote><p>相比一般 script ，<code>&lt;script type=&quot;module&quot;&gt;&lt;/script&gt;</code> 将被当作一个 JavaScript 模块对待，不受 charset 和 defer 属性影响，称为 module script。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; assign &#125; <span class="keyword">from</span> <span class="string">"./utils.js"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(</span><br><span class="line">  &#123; <span class="attr">foo</span>: <span class="string">'a'</span> &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    baa: &#123; <span class="attr">value</span>: <span class="string">'b'</span> &#125;,</span><br><span class="line">    bab: &#123; <span class="attr">value</span>: <span class="string">'c'</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">var</span> cp = assign(&#123;&#125;, obj)</span><br><span class="line"><span class="built_in">console</span>.log(cp)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"app.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">nomodule</span> <span class="attr">src</span>=<span class="string">"foo.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关于type=module，可以这么理解：</p><ul><li>支持 <code>module script</code> 的浏览器，不会执行拥有 nomodule 属性的脚本</li><li>不支持 <code>module script</code> 的浏览器，会忽略未知的 type=”module” 的 script，同时也会忽略传统 script 中不认识的 nomodule 属性，进而执行常规的 foo.js 代码</li><li><code>module script</code> 以及其依赖所有文件（源文件中通过 import 声明导入的文件）都会被下载，一旦整个依赖的模块树都被导入，页面文档也完成解析，app.js 将会被执行</li><li>但是如果 <code>module script</code> 里有 <code>async</code> 属性，比如 <code>&lt;script type=&quot;module&quot; src=&quot;util.js&quot; async&gt;&lt;/script&gt;</code> ，<code>module script</code> 及其所有依赖都会异步下载，等待整个依赖的模块树都被导入时就会立即执行，此时页面有可能还没有完成解析渲染。</li></ul><p>兼容性：<a href="https://caniuse.com/#search=modules" rel="external nofollow noopener noreferrer" target="_blank">JavaScript modules via script tag</a></p><h3 id="参考图片-图片取自互联网"><a href="#参考图片-图片取自互联网" class="headerlink" title="参考图片(图片取自互联网)"></a>参考图片(图片取自互联网)</h3><p><img src="https://cdn.jsdelivr.net/gh/liucm-it/ImgHosting/pic/asyncdefer.svg" alt="diagram"></p><p>根据图片总结：</p><ul><li>使用 <code>&lt;script&gt;</code> ，脚本下载和执行会阻塞 HTML 文档的解析。</li><li>使用 <code>&lt;script defer&gt;</code> ，脚本下载与 HTML 解析并行，等 HTML 解析完成后没脚本都会有序执行。</li><li>使用 <code>&lt;script async&gt;</code> ，脚本下载与 HTML 解析并行，但一旦脚本加载完成，就会中断 HTML 解析，开始执行脚本。</li><li><code>&lt;script type =&quot;module&quot;&gt;</code> 的行为类似于 <code>&lt;script defer&gt;</code> ，但是模块依赖关系也会被下载，</li><li><code>&lt;script type =&quot;module&quot; async&gt;</code> 的行为类似于 <code>&lt;script async&gt;</code>，额外的模块依赖关系也会被下载。</li></ul><h3 id="integrity-属性"><a href="#integrity-属性" class="headerlink" title="integrity 属性"></a>integrity 属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span> <span class="attr">src</span>=<span class="string">"//instant.page/3.0.0"</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">defer</span> <span class="attr">integrity</span>=<span class="string">"sha384-OeDn4XE77tdHo8pGtE1apMPmAipjoxUQ++eeJa6EtJCfHlvijigWiJpD7VDPWXV1"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>integrity</code> 属性是资源完整性规范的一部分，它允许你为 script 提供一个 hash，用来进行验签，检验加载的JavaScript 文件是否完整。</p><p>上面的代码，<code>integrity</code>为一个hash值，用来告诉浏览器，使用sha256签名算法对下载的js文件进行计算，并与intergrity提供的摘要签名对比校验，如果二者不一致，就不会执行这个资源。</p><p><code>intergrity</code> 的作用：</p><ul><li>减少由托管在CDN的资源被篡改而引入的XSS的风险</li><li>减少通信过程资源被篡改而引入的XSS风险（同时使用https会更保险）</li><li>可以通过一些技术手段，不执行有脏数据的CDN资源，同时去源站下载对应资源</li></ul><!-- 注意：启用 SRI 策略后，浏览器会对资源进行 CORS 校验，这就要求被请求的资源必须同域，或者配置了 Access-Control-Allow-Origin 响应头 --><h3 id="crossorigin-属性"><a href="#crossorigin-属性" class="headerlink" title="crossorigin 属性"></a>crossorigin 属性</h3><p><code>crossorigin</code> 的属性值可以是 <code>anonymous</code>、<code>use-credentials</code>，如果没有属性值或者非法属性值，会被浏览器默认做<code>anonymous</code>。</p><p><code>crossorigin</code>的作用有三个：</p><ul><li><code>crossorigin</code> 会让浏览器启用CORS访问检查，检查http相应头的 Access-Control-Allow-Origin</li><li>对于传统 <code>script</code> 需要跨域获取的js资源，控制暴露出其报错的详细信息</li><li>对于 <code>module script</code> ，控制用于跨域请求的凭据模式</li></ul><h3 id="onerror-属性"><a href="#onerror-属性" class="headerlink" title="onerror 属性"></a>onerror 属性</h3><blockquote><p>JavaScript运行时的错误（抛出的语法错误和异常）发生时，实现了ErrorEvent接口的error事件在window上触发，并且调用window.onerror(或者window.addEventListener(‘error’, callback))的回调函数</p></blockquote><p>当资源（如 <code>&lt;img&gt;</code> 或 <code>&lt;script&gt;</code> ）无法加载，或者启用SRI策略资源不完整时，使用Event接口的error事件在会在该资源元素处触发，元素上的 <code>onerror</code> 回调函数被调用</p><p>script 标签与 innerHTML<br>通过 innerHTML 动态添加到页面上的 script 标签则不会被执行</p><p>在收集错误日志的时候，通常会在window上注册一个方法来监测所有代码抛出的异常：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg, url, lineno, colno, error</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> string = msg.toLowerCase()</span><br><span class="line">  <span class="keyword">var</span> substring = <span class="string">"script error"</span></span><br><span class="line">  <span class="keyword">if</span> (string.indexOf(substring) &gt; <span class="number">-1</span>)&#123;</span><br><span class="line">    alert(<span class="string">'Script Error: See Browser Console for Detail'</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> message = &#123;</span><br><span class="line">      Message: msg,</span><br><span class="line">      URL:  url,</span><br><span class="line">      Line: lineNo,</span><br><span class="line">      Column: columnNo,</span><br><span class="line">      <span class="string">'Error object'</span>: <span class="built_in">JSON</span>.stringify(error)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// send error log to server</span></span><br><span class="line">    record(message)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>但是对于跨域js来说，只会给出很少的报错信息：’error: script error’，通过使用 <code>crossorigin</code> 属性可以使跨域js暴露出跟同域js同样的报错信息。但是，资源服务器必须返回一个 Access-Control-Allow-Origin 的header，否则资源无法访问。</p><p>动态导入script(Dynamically importing scripts)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadError</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">URIError</span>(<span class="string">`The script <span class="subst">$&#123;error.target.src&#125;</span>  is not accessible.`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">importScript</span> (<span class="params">src, onLoad</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">  script.onerror = loadError</span><br><span class="line">  script.async = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">if</span> (onLoad) &#123; script.onload = onLoad &#125;</span><br><span class="line">  <span class="built_in">document</span>.header.appendChild(script)</span><br><span class="line">  script.src = src</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以上面的方法动态加载js资源，但是要注意的是，默认 append 到文档中的 script 会异步执行（可以理解为默认拥有 async 属性，如果需要加载的js按顺序执行，需要设置 async 为 false ）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Script标签导入JS的时候，偶尔会看到标签中带有async、defer、integrity、crossorigin和onerror的属性，一时好奇就花时间研究了一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://www.kming6.com/categories/JavaScript/"/>
    
    
      <category term="script标签" scheme="https://www.kming6.com/tags/script%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>Vim入门指南</title>
    <link href="https://www.kming6.com/posts/25813/"/>
    <id>https://www.kming6.com/posts/25813/</id>
    <published>2019-11-23T08:52:48.000Z</published>
    <updated>2021-05-27T11:58:15.389Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Vim是一款很老的编辑器，但时至今日还非常流行，以前的Dreamweaver、Sublime Text到现在的VS code、Hbuilder，不少编辑器都有Vim的插件，可以支持Vim的使用方式。而且现在服务器上的编辑基本都默认带有Vim，不可能有其他图形化的编辑器，所以学习了解Vim还是很有必要的。</p><a id="more"></a><h3 id="vi-vim-的基本使用"><a href="#vi-vim-的基本使用" class="headerlink" title="vi/vim 的基本使用"></a>vi/vim 的基本使用</h3><p>基本上 vi/vim 共分为三种模式，分别是命令模式（Command/normal mode），输入/插入模式（Insert mode）和底线命令模式（Last line mode）。 这三种模式的作用分别是：</p><h3 id="Vim进入编辑模式的方式"><a href="#Vim进入编辑模式的方式" class="headerlink" title="Vim进入编辑模式的方式"></a>Vim进入编辑模式的方式</h3><ul><li>i (insert)光标前输入</li><li>a (append)光标后追加输入</li><li>o (open a line below)光标下一行输入</li><li>A (append after line)光标所在行末尾输入</li><li>I (insert before line)光标所在行行首输入</li><li>O (append line above)光标所在行上一行输入</li></ul><h3 id="Vim编辑模式小技巧"><a href="#Vim编辑模式小技巧" class="headerlink" title="Vim编辑模式小技巧"></a>Vim编辑模式小技巧</h3><h4 id="Vim设置"><a href="#Vim设置" class="headerlink" title="Vim设置"></a>Vim设置</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 打开语法高亮</span><br><span class="line">:<span class="keyword">syntax</span> <span class="keyword">on</span></span><br><span class="line"># 打开搜索高亮(<span class="keyword">highlight</span> <span class="built_in">search</span>)</span><br><span class="line">:<span class="keyword">set</span> hls</span><br><span class="line"># 打开增量搜索</span><br><span class="line">:<span class="keyword">set</span> incsearch</span><br></pre></td></tr></table></figure><h4 id="如何快速纠错"><a href="#如何快速纠错" class="headerlink" title="如何快速纠错"></a>如何快速纠错</h4><ul><li><code>ctrl + h</code>删除上一个字符</li><li><code>ctrl + w</code>删除上一个单词</li><li><code>ctrl + u</code>删除当前行</li></ul><h4 id="Vim快速移动"><a href="#Vim快速移动" class="headerlink" title="Vim快速移动"></a>Vim快速移动</h4><ul><li>h左移</li><li>j下移</li><li>k上移</li><li>l右移</li></ul><h4 id="在单词间切换"><a href="#在单词间切换" class="headerlink" title="在单词间切换"></a>在单词间切换</h4><ul><li>w/W 移动到下一个word/WORD开头，e/E移动到下一个word/WORD结尾</li><li>b/B 回到上一个word/WORD开头，可以理解为backword</li><li>word指的是以非空白符分割的单词，WORD以空白符分割的单词</li></ul><h4 id="行间搜索移动"><a href="#行间搜索移动" class="headerlink" title="行间搜索移动"></a>行间搜索移动</h4><blockquote><p>同一行快速移动的方式是搜索一个字符并且快速移动到该字符</p></blockquote><ul><li>使用<code>f{char}</code>可以移动到char字符上，t移动到char的前一个字符</li><li>如果第一次没搜到，可以用分号(;)/逗号(,)继续搜索该行下一个/上一个</li><li>F表示反过来搜索前面的字符</li></ul><h4 id="Vim水平移动"><a href="#Vim水平移动" class="headerlink" title="Vim水平移动"></a>Vim水平移动</h4><ul><li>0移动到行首第一个字符，^移动到第一个非空白字符</li><li>$移动到行尾，g_移动到行尾非空白字符</li><li>常用的0和$就可以满足日常需求</li></ul><h4 id="Vim垂直移动"><a href="#Vim垂直移动" class="headerlink" title="Vim垂直移动"></a>Vim垂直移动</h4><blockquote><p>可以安装easy-motion插件移动</p></blockquote><ul><li>使用括号()在句子间移动</li><li>使用{}在段落间移动</li><li>:help可以查看帮助</li></ul><h4 id="页面移动"><a href="#页面移动" class="headerlink" title="页面移动"></a>页面移动</h4><ul><li>gg/G移动到文件开头和结尾</li><li>Ctrl + o快速返回</li><li>H/M/L跳转到屏幕的开头(Head)，中间(Middle)和结尾(Lower)</li><li>Ctrl + u. Ctrl + f. 上下翻页。(upword/forward)。zz置屏幕到中间。</li></ul><h3 id="Vim快速增删改查"><a href="#Vim快速增删改查" class="headerlink" title="Vim快速增删改查"></a>Vim快速增删改查</h3><h4 id="Vim新增"><a href="#Vim新增" class="headerlink" title="Vim新增"></a>Vim新增</h4><ul><li>i (insert)光标前输入</li><li>a (append)光标后追加输入</li><li>o (open a line below)光标下一行输入</li><li>A (append after line)光标所在行末尾输入</li><li>I (insert before line)光标所在行行首输入</li><li>O (append line above)光标所在行上一行输入</li></ul><h4 id="Vim删除"><a href="#Vim删除" class="headerlink" title="Vim删除"></a>Vim删除</h4><ul><li>vim在normal模式下使用x删除一个字符</li><li>使用d(delete)配合文本对象删除一个单词daw/diw(不包含单词后的空白)/dw(delete around word)</li><li>dd删除一行</li><li>dt{char}删除到x的内容(delete to char)</li><li>d0删除到行首，d$删除到行尾</li><li>d和x配合数字来执行多次</li><li>2dd删除两行，4x删除4个字符</li></ul><h4 id="Vim修改"><a href="#Vim修改" class="headerlink" title="Vim修改"></a>Vim修改</h4><ul><li>常用r(replace)，c(change)，s(substitute)</li><li>normal模式下使用r替换一个字符。s替换一个字符并进入插入模式(编辑模式)</li><li>4s删除4个字符并进入插入模式</li><li>使用c配合文本对象快速进行修改</li><li>R(修改光标位置的字符，覆盖掉旧的字符)</li><li>S(删除光标行，并进入编辑模式)</li><li>caw/cw/ciw(删除当前单词，并进入编辑模式)</li><li>C(删除到行尾，并进入编辑模式)</li><li>ct{char}(删除到char字符，并进入编辑模式)</li></ul><h4 id="Vim查询"><a href="#Vim查询" class="headerlink" title="Vim查询"></a>Vim查询</h4><ul><li>使用<code>/</code>或者<code>?</code>进行先前或反向搜索</li><li>使用n/N跳转到下一个或者上一个匹配</li><li>使用*或者#进行当前单词的向前和向后匹配</li></ul><h4 id="Vim搜索替换"><a href="#Vim搜索替换" class="headerlink" title="Vim搜索替换"></a>Vim搜索替换</h4><blockquote><p>substitute命令允许查找并替换掉文本，且支持正则表达式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:[range]s[ubstitute]/&#123;pattern&#125;/&#123;string&#125;/[flags]</span><br><span class="line"># 将word单词替换成replace(不包含w_word类型)</span><br><span class="line">:% s/\&lt;word\&gt;/replace/g</span><br></pre></td></tr></table></figure><ul><li>range表示范围，如：10,20表示10-20行，%表示全部</li><li>pattern是要替换的模式，string是替换后的字符文本</li><li>flags常用的标志</li><li>g(global)表示全局范围执行</li><li>c(confirm)表示确认，可以确认或者拒绝修改</li><li>n(number)报告匹配到的次数而不替换，可以查询匹配次数</li></ul><h3 id="Vim多文件操作"><a href="#Vim多文件操作" class="headerlink" title="Vim多文件操作"></a>Vim多文件操作</h3><blockquote><p>多文件操作相关名词</p></blockquote><ul><li>Buffer是指打开一个文件的内存缓冲区</li><li>Window(窗口)是Buffer可视化的分割区域</li><li>Tab可以组织窗口为一个工作区</li></ul><h4 id="Vim的Buffer缓冲区"><a href="#Vim的Buffer缓冲区" class="headerlink" title="Vim的Buffer缓冲区"></a>Vim的Buffer缓冲区</h4><ul><li>Vim打开一个文件后会加载文件内容到缓冲区</li><li>之后的修改都是针对内存中的缓冲区，并不会直接保存到文件磁盘</li><li>直到在命令模式执行:w(write)的时候才会把修改内容写入到文件里</li></ul><blockquote><p>buffer之间切换</p></blockquote><ul><li>使用:ls会列举当前的缓冲区</li><li>使用:b n跳转到第n个缓冲区</li><li>:bpre 上一个 :bnext 下一个 :bfirst 第一个 :blast 最后一个</li><li>用:b buffer_name加上tab补全来跳转</li></ul><h4 id="Vim的Window窗口"><a href="#Vim的Window窗口" class="headerlink" title="Vim的Window窗口"></a>Vim的Window窗口</h4><blockquote><p>Vim窗口是可视化的分割区域</p></blockquote><blockquote><p>一个缓冲区可以分割成多个窗口，每个窗口可以打开不同的缓冲区</p></blockquote><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td>&lt; Ctrl + w &gt; s</td><td>水平分割，或者:sp</td></tr><tr><td>&lt; Ctrl + w &gt; v</td><td>垂直分割，或者:vs</td></tr><tr><td>&lt; Ctrl + w &gt; w</td><td>在窗口间循环切换</td></tr><tr><td>&lt; Ctrl + w &gt; h</td><td>切换到左边窗口</td></tr><tr><td>&lt; Ctrl + w &gt; j</td><td>切换到下边窗口</td></tr><tr><td>&lt; Ctrl + w &gt; k</td><td>切换到上边窗口</td></tr><tr><td>&lt; Ctrl + w &gt; l</td><td>切换到右边窗口</td></tr><tr><td>&lt; Ctrl + w &gt; =</td><td>使所有窗口登高、等宽</td></tr><tr><td>&lt; Ctrl + w &gt; _</td><td>最大化活动窗口的高度</td></tr><tr><td>&lt; Ctrl + w &gt; |</td><td>最大化活动窗口的宽度</td></tr><tr><td>[N]&lt; Ctrl + w &gt; _</td><td>把活动窗口的高度设为[N]行</td></tr><tr><td>[N]&lt; Ctrl + w &gt; |</td><td>把活动窗口的宽度设为[N]列</td></tr></tbody></table><h4 id="Vim的Tab-标签页-将窗口分组"><a href="#Vim的Tab-标签页-将窗口分组" class="headerlink" title="Vim的Tab(标签页)将窗口分组"></a>Vim的Tab(标签页)将窗口分组</h4><blockquote><p>Vim的Tab是可以容纳一系列窗口的容器(:h tabpage)</p></blockquote><ul><li>Vim的Tab和其他编辑器不太一样，可以比喻成Linux的虚拟桌面</li><li>比如一个Tab全用来编辑Python文件，一个Tab全是HTML文件</li><li>相比窗口，Tab一般用的比较少，Tab太多管理比较麻烦</li></ul><h5 id="Tab-标签页-操作"><a href="#Tab-标签页-操作" class="headerlink" title="Tab(标签页)操作"></a>Tab(标签页)操作</h5><blockquote><p>Tab使用不多，简单了解常用的操作</p></blockquote><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td>:tabe[dit] {filename}</td><td>在新标签页中大开{filename}</td></tr><tr><td>&lt; Ctrl + w &gt;T</td><td>把当前窗口移动到一个新标签页</td></tr><tr><td>:tabc[lose]</td><td>关闭当前标签页及其中的所有窗口</td></tr><tr><td>:tabo[nly]</td><td>只保留活动标签页，关闭所有其他标签页</td></tr></tbody></table><blockquote><p>如何切换不同的标签页，一般两个就好，太多反而操作繁琐</p></blockquote><table><thead><tr><th>EX命令</th><th>普通模式命令</th><th>用途</th></tr></thead><tbody><tr><td>:tabn[ext] {N}</td><td>{N}gt</td><td>切换到编号为{N}的标签页</td></tr><tr><td>:tabn[ext]</td><td>gt</td><td>切换到下一标签页</td></tr><tr><td>:tabp[revious]</td><td>gT</td><td>切换到上一标签页</td></tr></tbody></table><h3 id="Vim的复制粘贴与寄存器"><a href="#Vim的复制粘贴与寄存器" class="headerlink" title="Vim的复制粘贴与寄存器"></a>Vim的复制粘贴与寄存器</h3><h4 id="normal模式下复制粘贴"><a href="#normal模式下复制粘贴" class="headerlink" title="normal模式下复制粘贴"></a>normal模式下复制粘贴</h4><ul><li>normal模式下复制粘贴分别使用y(yank)和p(put)，剪贴d和p</li><li>使用v(visual)命令选中所要复制的地方，然后使用p粘贴</li><li>配合文本对象:比如使用yiw复制一个单词，yy复制一行</li></ul><blockquote><p>Vim里的剪贴(cut)复制(copy)粘贴(paste)分别是delete/yank/put</p></blockquote><h4 id="insert模式下复制粘贴"><a href="#insert模式下复制粘贴" class="headerlink" title="insert模式下复制粘贴"></a>insert模式下复制粘贴</h4><ul><li>和平常文本编辑器差不多，但粘贴可能会有缩进问题</li><li>:set autoindent设置自动缩进，代码粘贴缩进还是错乱</li><li>使用:set paste后粘贴，代码错乱解决，自动缩进没了，:set nopaste后恢复</li></ul><h4 id="Vim的寄存器"><a href="#Vim的寄存器" class="headerlink" title="Vim的寄存器"></a>Vim的寄存器</h4><ul><li>Vim里操作的是寄存器而不是系统剪贴板，和其他编辑器不同</li><li>默认使用d删除或者y复制的内容都放到<code>无名寄存器</code></li><li>用x删除一个字符放到无名寄存器，然后p粘贴，可调换俩字符位置</li></ul><blockquote><p>Vim不使用单一的剪贴板进行剪贴、复制与粘贴，而是多组寄存器</p></blockquote><ul><li>通过<code>&quot;{register}</code>前缀可以指定寄存器，不指定默认用<code>无名寄存器</code></li><li>使用<code>&quot;ayiw</code>复制一个单词到寄存器a中，<code>&quot;bdd</code>删除当前行到寄存器b中</li><li>Vim中 <code>&quot;&quot;</code>表示无名寄存器，缺省使用。<code>&quot;&quot;</code>p等同于p</li></ul><blockquote><p>除了有名的寄存器a-z，Vim中还有一些其他常见寄存器</p></blockquote><ul><li>复制专用寄存器<code>&quot;0</code>使用y复制文本的同时会被拷贝到复制寄存器0</li><li>系统剪贴板<code>&quot;+</code>可以在复制前加上<code>&quot;+</code>复制到系统剪贴板</li><li>其他寄存器如<code>&quot;%</code>当前文件名，<code>&quot;.</code>上次插入的文本</li></ul><p>查看是否支持系统剪贴板</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 输出：<span class="number">1</span>支持<span class="number">0</span>不支持</span><br><span class="line">:<span class="keyword">echo</span> <span class="built_in">has</span>(<span class="string">'clipboard'</span>)</span><br><span class="line"># 设置<span class="keyword">vim</span>直接复制粘贴系统剪贴板内容</span><br><span class="line">:<span class="keyword">set</span> clipboard=unnamed</span><br></pre></td></tr></table></figure><h3 id="Vim强大的宏-macro-Vim的批量编辑"><a href="#Vim强大的宏-macro-Vim的批量编辑" class="headerlink" title="Vim强大的宏(macro) - Vim的批量编辑"></a>Vim强大的宏(macro) - Vim的批量编辑</h3><ul><li>宏可以看出是一系列命令的集合</li><li>可以使用宏<strong>录制</strong>一系列操作，然后<strong>回放</strong></li><li>宏可以非常方便把一系列命令用在多文本上</li></ul><h4 id="如何使用宏"><a href="#如何使用宏" class="headerlink" title="如何使用宏"></a>如何使用宏</h4><ul><li>Vim使用q来录制，同时也是使用q结束录制</li><li>使用<code>q{register}</code>选择要保存的寄存器，把录制命令保存其中</li><li>使用<code>@{register}</code>回放寄存器中保存的一系列命令</li></ul><h3 id="Vim的补全"><a href="#Vim的补全" class="headerlink" title="Vim的补全"></a>Vim的补全</h3><ul><li>补全是根据当前环境上下文由编辑器<code>猜</code>你想输入的东西</li><li>如补全一个单词、文件名，或者代码中的函数名、变量名等</li><li>Vim中提供了多种补全功能，还可以由插件拓展功能实现代码补全</li></ul><p>Vim中有很多种补全方式</p><table><thead><tr><th>命令</th><th align="left">补全类型</th></tr></thead><tbody><tr><td>&lt; Ctrl - n &gt;</td><td align="left">补全关键字</td></tr><tr><td>&lt; Ctrl - x &gt; &lt; Ctrl - n &gt;</td><td align="left">当前缓冲区关键字</td></tr><tr><td>&lt; Ctrl - x &gt; &lt; Ctrl - i &gt;</td><td align="left">包含文件关键字</td></tr><tr><td>&lt; Ctrl - x &gt; &lt; Ctrl - j &gt;</td><td align="left">标签文件关键字</td></tr><tr><td>&lt; Ctrl - x &gt; &lt; Ctrl - k &gt;</td><td align="left">字典查找</td></tr><tr><td>&lt; Ctrl - x &gt; &lt; Ctrl - l &gt;</td><td align="left">整行补全</td></tr><tr><td>&lt; Ctrl - x &gt; &lt; Ctrl - f &gt;</td><td align="left">文件名补全</td></tr><tr><td>&lt; Ctrl - x &gt; &lt; Ctrl - o &gt;</td><td align="left">全能(Omni)补全</td></tr></tbody></table><p>常见的有以下几种类型:</p><ul><li>使用 ctrl + n 和 ctrl + p 补全单词</li><li>使用 ctrl + x 和 ctrl + f 补全文件名</li><li>使用 ctrl + x 和 ctrl + o 补全代码，需要开启文件类型检查，安装插件</li></ul><p>插入文件名</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:r! <span class="keyword">echo</span> %</span><br></pre></td></tr></table></figure><p>插入文件名全路径</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:r! <span class="keyword">echo</span> %:<span class="keyword">p</span></span><br></pre></td></tr></table></figure><p>more info</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">help</span> <span class="keyword">read</span></span><br><span class="line">:<span class="keyword">help</span> filename-modifiers</span><br></pre></td></tr></table></figure><h3 id="给Vim更换配色"><a href="#给Vim更换配色" class="headerlink" title="给Vim更换配色"></a>给Vim更换配色</h3><ul><li>使用：<code>colorscheme</code>显示当前的主题配色，默认default</li><li>使用：<code>colorscheme &lt;ctrl+d&gt;</code> 可以显示所有的配色</li><li>用：<code>colorscheme 配色名</code>，就可以修改配色</li><li><a href="https://github.com/flazz/vim-colorschemes" rel="external nofollow noopener noreferrer" target="_blank">GitHub配色</a></li></ul><h3 id="Vim的配置"><a href="#Vim的配置" class="headerlink" title="Vim的配置"></a>Vim的配置</h3><ul><li>Vim里非常常用的设置，如：<code>set number</code>设置行号</li><li>底线命令模式的配置都是Vim里临时设置，没法持久化</li><li>Vimrc提供了一种持久化配置的方式</li></ul><h4 id="编写Vim配置文件"><a href="#编写Vim配置文件" class="headerlink" title="编写Vim配置文件"></a>编写Vim配置文件</h4><ul><li>Liunx/Unix下新建一个隐藏文件vim ~/.vimrc</li><li>windows系统vim $MYVIMRC，通过环境变量编辑配置文件</li></ul><h4 id="Vim相关配置"><a href="#Vim相关配置" class="headerlink" title="Vim相关配置"></a>Vim相关配置</h4><ul><li>常用设置，如:set nu设置行号，colorscheme hybrid设置主题</li><li>常用Vim映射，比如noremap &lt; leader &gt;w : w&lt; cr &gt; 保存文件</li><li>自定义vimscript函数和插件配置</li></ul><p>vimrc配置参考</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">" 常用设置</span></span><br><span class="line"><span class="comment">" 设置行号</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">number</span></span><br><span class="line"><span class="keyword">colorscheme</span> hybrid</span><br><span class="line"><span class="comment">" 按F2进入粘贴模式</span></span><br><span class="line"><span class="keyword">set</span> pastetoggle=<span class="symbol">&lt;F2&gt;</span></span><br><span class="line"><span class="comment">" 高亮搜索</span></span><br><span class="line"><span class="keyword">set</span> hlsearch</span><br><span class="line"><span class="comment">" 设置折叠方式</span></span><br><span class="line"><span class="keyword">set</span> foldmethod=<span class="built_in">indent</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" 一些方便的映射</span></span><br><span class="line"><span class="keyword">let</span> mapleader=<span class="string">","</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:mapleader</span>=<span class="string">","</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" 使用 jj 进入normal模式，`^表示上一次编辑模式的位置，这里进入normal模式保持光标不变</span></span><br><span class="line"><span class="keyword">inoremap</span> jj <span class="symbol">&lt;Esc&gt;</span>`^</span><br><span class="line"><span class="comment">" 使用 leader+w 直接保存</span></span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;leader&gt;</span><span class="keyword">w</span> <span class="symbol">&lt;Esc&gt;</span>:<span class="keyword">w</span><span class="symbol">&lt;cr&gt;</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;leader&gt;</span><span class="keyword">w</span> :<span class="keyword">w</span><span class="symbol">&lt;cr&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" 切换 buffer</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span> [<span class="keyword">b</span> :<span class="keyword">bprevious</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span> [n :<span class="keyword">bnext</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" 用 ctrl+h/j/k/l swith window</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;C-h&gt;</span> <span class="symbol">&lt;C-w&gt;</span>h</span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;C-j&gt;</span> <span class="symbol">&lt;C-w&gt;</span><span class="keyword">j</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;C-k&gt;</span> <span class="symbol">&lt;C-w&gt;</span><span class="keyword">k</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;C-l&gt;</span> <span class="symbol">&lt;C-w&gt;</span><span class="keyword">l</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" sudo方式写入</span></span><br><span class="line"><span class="keyword">cnoremap</span> w!! <span class="keyword">w</span> !sudo tee % &gt;/dev/null</span><br><span class="line"><span class="comment">" json格式化</span></span><br><span class="line">com! FormatJSON %!python3 -<span class="keyword">m</span> json.tool</span><br><span class="line"></span><br><span class="line"><span class="comment">" 插件设置，这里使用了vim-plug</span></span><br><span class="line"><span class="keyword">call</span> plug#begin(<span class="string">'~/.vim/plugged'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">" 安装插件只需要把 Github 地址放到这里重启后执行 :PlugInstall</span></span><br><span class="line">Plug <span class="string">'mhinz/vim-startify'</span></span><br><span class="line">Plug <span class="string">'scrooloose/nerdtrre'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看<span class="keyword">vim</span>所有设置选项</span><br><span class="line">:h option-<span class="keyword">list</span></span><br></pre></td></tr></table></figure><h4 id="Vim中的映射-修改默认快捷键配置"><a href="#Vim中的映射-修改默认快捷键配置" class="headerlink" title="Vim中的映射(修改默认快捷键配置)"></a>Vim中的映射(修改默认快捷键配置)</h4><blockquote><p>Vim中映射复杂，源于vim有多种模式</p></blockquote><ul><li>设置leader键let mapleader = “,” 常用逗号或者空格</li><li>用inoremap <code>&lt;leader&gt;w &lt;Esc&gt;:w&lt;cr&gt;</code> 在插入模式保存 </li></ul><p>基本映射</p><ul><li>使用map，如<code>:map - x</code>然后按-就会删除字符</li><li><code>:map &lt;sapce&gt; viw</code> 映射vim空格选中整个单词</li><li><code>:map &lt;c-d&gt; dd</code> 就可以使用ctrl + d执行dd删除一行</li><li><code>:unmap -</code>取消-的映射</li></ul><p>常用模式normal/visual/insert模式定义映射</p><ul><li>用nmap/vmap/imap定义映射只在normal/visual/insert模式分别有效</li><li><code>:vmap \ U</code>把在visual模式下选中的文本大小(u/U转换大小写)</li></ul><p>递归解释，<code>\</code>将删除整行</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">nmap</span> - dd</span><br><span class="line">:<span class="keyword">nmap</span> \ -</span><br></pre></td></tr></table></figure><p>非递归映射</p><ul><li>使用nnoremap/vnoremap/inoremap映射</li><li>尽量全部使用非递归映射</li></ul><h3 id="Vim如何安装插件"><a href="#Vim如何安装插件" class="headerlink" title="Vim如何安装插件"></a>Vim如何安装插件</h3><ul><li>直接通过clone插件代码,选择一个插件管理器</li><li>常见的有vim-plug，Vundle，Pathogen，Dein.Vim，volt等</li><li><a href="https://www.slant.co/topics/1224/~best-plugin-managers-for-vim" rel="external nofollow noopener noreferrer" target="_blank">推荐vim-plug</a></li></ul><h4 id="vim-plug插件安装"><a href="#vim-plug插件安装" class="headerlink" title="vim-plug插件安装"></a>vim-plug插件安装</h4><ul><li><a href="https://github.com/junegunn/vim-plug" rel="external nofollow noopener noreferrer" target="_blank">vim-plug GitHub地址</a></li></ul><p>Unix安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fLo ~/.vim/<span class="built_in">autoload</span>/plug.vim --create-dirs \</span><br><span class="line">    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br></pre></td></tr></table></figure><p>Windows (PowerShell)安装</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">md</span> ~\vimfiles\autoload</span><br><span class="line">$uri = 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'</span><br><span class="line">(New-Object <span class="built_in">Net</span>.WebClient).DownloadFile(</span><br><span class="line">  $uri,</span><br><span class="line">  $ExecutionContext.SessionState.<span class="built_in">Path</span>.GetUnresolvedProviderPathFromPSPath(</span><br><span class="line">    "~\vimfiles\autoload\plug.vim"</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>.vimrc中配置示例</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">" Specify a directory for plugins</span></span><br><span class="line"><span class="comment">" - For Neovim: stdpath('data') . '/plugged'</span></span><br><span class="line"><span class="comment">" - Avoid using standard Vim directory names like 'plugin'</span></span><br><span class="line"><span class="keyword">call</span> plug#begin(<span class="string">'~/.vim/plugged'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">" Make sure you use single quotes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align</span></span><br><span class="line">Plug <span class="string">'junegunn/vim-easy-align'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Any valid git URL is allowed</span></span><br><span class="line">Plug <span class="string">'https://github.com/junegunn/vim-github-dashboard.git'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Multiple Plug commands can be written in a single line using | separators</span></span><br><span class="line">Plug <span class="string">'SirVer/ultisnips'</span> | Plug <span class="string">'honza/vim-snippets'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" On-demand loading</span></span><br><span class="line">Plug <span class="string">'scrooloose/nerdtree'</span>, &#123; <span class="string">'on'</span>:  <span class="string">'NERDTreeToggle'</span> &#125;</span><br><span class="line">Plug <span class="string">'tpope/vim-fireplace'</span>, &#123; <span class="string">'for'</span>: <span class="string">'clojure'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">" Using a non-master branch</span></span><br><span class="line">Plug <span class="string">'rdnetto/YCM-Generator'</span>, &#123; <span class="string">'branch'</span>: <span class="string">'stable'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">" Using a tagged release; wildcard allowed (requires git 1.9.2 or above)</span></span><br><span class="line">Plug <span class="string">'fatih/vim-go'</span>, &#123; <span class="string">'tag'</span>: <span class="string">'*'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">" Plugin options</span></span><br><span class="line">Plug <span class="string">'nsf/gocode'</span>, &#123; <span class="string">'tag'</span>: <span class="string">'v.20150303'</span>, <span class="string">'rtp'</span>: <span class="string">'vim'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">" Plugin outside ~/.vim/plugged with post-update hook</span></span><br><span class="line">Plug <span class="string">'junegunn/fzf'</span>, &#123; <span class="string">'dir'</span>: <span class="string">'~/.fzf'</span>, <span class="string">'do'</span>: <span class="string">'./install --all'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">" Unmanaged plugin (manually installed and updated)</span></span><br><span class="line">Plug <span class="string">'~/my-prototype-plugin'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Initialize plugin system</span></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br></pre></td></tr></table></figure><p>重新加载<code>source .vimrc</code>并且在vim命令行执行<code>:PlugInstall</code>安装插件.</p><h4 id="推荐vim插件"><a href="#推荐vim插件" class="headerlink" title="推荐vim插件"></a>推荐vim插件</h4><ul><li><a href="https://github.com/mhinz/vim-startify" rel="external nofollow noopener noreferrer" target="_blank">vim-startify修改启动界面</a></li><li><a href="https://github.com/vim-airline/vim-airline" rel="external nofollow noopener noreferrer" target="_blank">vim-airline状态栏美化</a></li><li><a href="https://github.com/yggdroot/indentline" rel="external nofollow noopener noreferrer" target="_blank">indentline增加代码缩进线条</a></li><li><a href="https://github.com/w0ng/vim-hybrid" rel="external nofollow noopener noreferrer" target="_blank">hybird配色</a></li><li><a href="https://github.com/altercation/vim-colors-solarized" rel="external nofollow noopener noreferrer" target="_blank">solarized配色</a></li><li><a href="https://github.com/morhetz/gruvbox" rel="external nofollow noopener noreferrer" target="_blank">gruvbox配色</a></li><li><a href="https://github.com/ctrlpvim/ctrlp.vim" rel="external nofollow noopener noreferrer" target="_blank">ctrlp模糊搜索文件并打开</a></li><li><a href="https://github.com/easymotion/vim-easymotion" rel="external nofollow noopener noreferrer" target="_blank">easymotion移动跳转插件</a></li><li><a href="https://github.com/tpope/vim-surround" rel="external nofollow noopener noreferrer" target="_blank">surround快速编辑成对的符号</a></li><li><a href="https://github.com/junegunn/fzf.vim" rel="external nofollow noopener noreferrer" target="_blank">fzf模糊搜索工具</a></li><li><a href="https://github.com/brooth/far.vim" rel="external nofollow noopener noreferrer" target="_blank">far搜索替换工具</a></li><li><a href="https://github.com/fatih/vim-go" rel="external nofollow noopener noreferrer" target="_blank">vim-go golang语言插件</a></li><li><a href="https://github.com/python-mode/python-mode" rel="external nofollow noopener noreferrer" target="_blank">python-mode python语言插件</a></li><li><a href="https://github.com/majutsushi/tagbar" rel="external nofollow noopener noreferrer" target="_blank">tagbar代码大纲浏览插件</a> </li><li><a href="https://github.com/lfv89/vim-interestingwords" rel="external nofollow noopener noreferrer" target="_blank">interestingwords高亮变量单词</a></li><li><a href="https://github.com/shougo/deoplete.nvim" rel="external nofollow noopener noreferrer" target="_blank">deoplete异步代码补全</a></li><li><a href="https://github.com/neoclide/coc.nvim" rel="external nofollow noopener noreferrer" target="_blank">coc强大的neovim/vim8补全插件，LSP支持</a></li><li><a href="https://github.com/sbdchd/neoformat" rel="external nofollow noopener noreferrer" target="_blank">neoformat代码格式化插件</a></li><li><a href="https://github.com/chiel92/vim-autoformat" rel="external nofollow noopener noreferrer" target="_blank">autoformat格式化插件</a></li><li><a href="https://github.com/neomake/neomake" rel="external nofollow noopener noreferrer" target="_blank">neomake静态检查插件</a></li><li><a href="https://github.com/w0rp/ale" rel="external nofollow noopener noreferrer" target="_blank">ale静态检查lint插件</a></li><li><a href="https://github.com/tpope/vim-commentary" rel="external nofollow noopener noreferrer" target="_blank">commentary快速注释插件</a></li><li><a href="https://github.com/tpope/vim-fugitive" rel="external nofollow noopener noreferrer" target="_blank">fugitive vim的git插件</a></li><li><a href="https://github.com/airblade/vim-gitgutter" rel="external nofollow noopener noreferrer" target="_blank">vim-gitgutter vim显示文件改动</a></li><li><a href="https://github.com/junegunn/gv.vim" rel="external nofollow noopener noreferrer" target="_blank">gv命令行查看提交记录</a></li></ul><h4 id="Vim配置推荐"><a href="#Vim配置推荐" class="headerlink" title="Vim配置推荐"></a>Vim配置推荐</h4><ul><li><a href="https://github.com/SpaceVim/SpaceVim" rel="external nofollow noopener noreferrer" target="_blank">SpaceVim</a></li><li><a href="https://github.com/PegasusWang/vim-config" rel="external nofollow noopener noreferrer" target="_blank">vim-config</a></li></ul><h4 id="如何搜寻vim插件"><a href="#如何搜寻vim插件" class="headerlink" title="如何搜寻vim插件"></a>如何搜寻vim插件</h4><ul><li>搜索引擎搜索查找插件</li><li><a href="https://vimawesome.com" rel="external nofollow noopener noreferrer" target="_blank">Vim Awesome</a></li><li>网上开源的vim配置借鉴想要的插件</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vim是一款很老的编辑器，但时至今日还非常流行，以前的Dreamweaver、Sublime Text到现在的VS code、Hbuilder，不少编辑器都有Vim的插件，可以支持Vim的使用方式。而且现在服务器上的编辑基本都默认带有Vim，不可能有其他图形化的编辑器，所以学习了解Vim还是很有必要的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vim" scheme="https://www.kming6.com/categories/Vim/"/>
    
    
      <category term="Vim" scheme="https://www.kming6.com/tags/Vim/"/>
    
      <category term="Vi" scheme="https://www.kming6.com/tags/Vi/"/>
    
  </entry>
  
  <entry>
    <title>git常用操作和问题总结</title>
    <link href="https://www.kming6.com/posts/19017/"/>
    <id>https://www.kming6.com/posts/19017/</id>
    <published>2019-11-19T22:28:51.000Z</published>
    <updated>2021-05-27T11:58:15.389Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>我们首先将一个已存在的 Git 仓库添加为正在工作的仓库的子模块。 你可以通过在 <code>git submodule add</code> 命令后面加上想要跟踪的项目 URL 来添加新的子模块。 例如添加一个名为 “Connector” 的库。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git submodule add https://github.com/xxx/Connector</span><br><span class="line">Cloning into &apos;DbConnector&apos;...</span><br><span class="line">remote: Counting objects: 11, done.</span><br><span class="line">remote: Compressing objects: 100% (10/10), done.</span><br><span class="line">remote: Total 11 (delta 0), reused 11 (delta 0)</span><br><span class="line">Unpacking objects: 100% (11/11), done.</span><br><span class="line">Checking connectivity... done.</span><br></pre></td></tr></table></figure><p>2、每次更新.gitmodules文件, 必须同步下(git submodule sync), 否则识别不到.</p><p>3、如何为一个项目添加一个子项目呢? git submodule add 项目地址, 然后push到<br>你的远程仓库(如gitlab/github)，你可以在项目里看到“子项目名+@+序列号”的链接.</p><p>4、如何删除submodule呢?  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm &lt;submodule-name&gt; || git submodule deinit &lt;submodule-name&gt;</span><br></pre></td></tr></table></figure><p>5、一旦依赖的子项目过多(比如80个), 该如何批量操作呢?  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git submodule foreach &lt;command&gt;  </span><br><span class="line">eg: git submodule foreach git checkout master</span><br><span class="line"># 该命令会按照.gitmodules里的path寻找所有的三方模块,并在每一个模块中都执行foreach后的命令</span><br><span class="line">eg: git submodule foreach git submodule update</span><br></pre></td></tr></table></figure><p>6、更新了子项目, 那么父项目也需要更新. 即子项目属于父项目的一部分, 在子项目commit后, 父也需要.</p><p>7、如何将一个包含子项目的项目所有内容都clone下来呢?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://xxx.xxx.xxx/xxx/xxx.git</span><br><span class="line">git submodule init &amp;&amp; git submodule update</span><br><span class="line"># 下面这一句的效果和上面三条命令的效果是一样的,多加了个参数  `--recursive`</span><br><span class="line">git clone https://xxx.xxx.xxx/xxx/xxx.git --recursive</span><br></pre></td></tr></table></figure><p><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97" rel="external nofollow noopener noreferrer" target="_blank">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Git" scheme="https://www.kming6.com/categories/Git/"/>
    
    
      <category term="Git" scheme="https://www.kming6.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>配置虚拟机桥接模式网络</title>
    <link href="https://www.kming6.com/posts/4143/"/>
    <id>https://www.kming6.com/posts/4143/</id>
    <published>2019-11-14T21:01:14.000Z</published>
    <updated>2021-05-27T11:58:15.389Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>虚拟机CentOS7系统桥接模式网络配置。</p><a id="more"></a><h3 id="配置ip地址等信息在-etc-sysconfig-network-scripts-ifcfg-eth0文件-可能文件名不一样，和网卡名有关"><a href="#配置ip地址等信息在-etc-sysconfig-network-scripts-ifcfg-eth0文件-可能文件名不一样，和网卡名有关" class="headerlink" title="配置ip地址等信息在/etc/sysconfig/network-scripts/ifcfg-eth0文件(可能文件名不一样，和网卡名有关)"></a>配置ip地址等信息在/etc/sysconfig/network-scripts/ifcfg-eth0文件(可能文件名不一样，和网卡名有关)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure><p>修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;   # 网络类型为以太网</span><br><span class="line">BOOTPROTO=&quot;static&quot;  # 手动分配ip</span><br><span class="line">NAME=&quot;eth0&quot;  # 网卡设备名，设备名一定要跟文件名一致</span><br><span class="line">DEVICE=&quot;eth0&quot;  # 网卡设备名，设备名一定要跟文件名一致</span><br><span class="line">ONBOOT=&quot;yes&quot;  # 该网卡是否随网络服务启动</span><br><span class="line">IPADDR=&quot;192.168.22.101&quot;  # 该网卡ip地址就是你要配置的固定IP，如果你要用xshell等工具连接，22这个网段最好和你自己的电脑网段一致，否则有可能用xshell连接失败且连接不上网</span><br><span class="line">GATEWAY=&quot;192.168.22.1&quot;   # 网关</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;   # 子网掩码</span><br><span class="line">DNS1=&quot;8.8.8.8&quot;    # DNS，8.8.8.8为Google提供的免费DNS服务器的IP地址</span><br></pre></td></tr></table></figure><h3 id="配置网络工作"><a href="#配置网络工作" class="headerlink" title="配置网络工作"></a>配置网络工作</h3><p>在/etc/sysconfig/network文件中增加以下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network</span><br><span class="line"></span><br><span class="line"># 修改</span><br><span class="line">NETWORKING=yes #网络是否工作，一定不能是no</span><br></pre></td></tr></table></figure><h3 id="配置公共DNS服务"><a href="#配置公共DNS服务" class="headerlink" title="配置公共DNS服务"></a>配置公共DNS服务</h3><p>在/etc/resolv.conf文件中增加以下配置(可选)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameserver 8.8.8.8</span><br></pre></td></tr></table></figure><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld <span class="comment"># 临时关闭</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld <span class="comment"># 禁止开机启动</span></span><br></pre></td></tr></table></figure><h3 id="重启网络服务"><a href="#重启网络服务" class="headerlink" title="重启网络服务"></a>重启网络服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虚拟机CentOS7系统桥接模式网络配置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Liunx" scheme="https://www.kming6.com/categories/Liunx/"/>
    
      <category term="CentOS" scheme="https://www.kming6.com/categories/Liunx/CentOS/"/>
    
    
      <category term="CentOS" scheme="https://www.kming6.com/tags/CentOS/"/>
    
      <category term="虚拟机" scheme="https://www.kming6.com/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
      <category term="网络配置" scheme="https://www.kming6.com/tags/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Git设置只需要输入一次密码, 就可以进行pull/push操作，不用每次输入密码</title>
    <link href="https://www.kming6.com/posts/62324/"/>
    <id>https://www.kming6.com/posts/62324/</id>
    <published>2019-09-28T21:38:08.000Z</published>
    <updated>2021-05-27T11:58:15.385Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>使用https的方式，每次pull或者push都要输入账号密码，这样操作很烦，又不想设置SSH公钥到远程仓库。如下设置即可输入一次就不用再手输入密码的困扰而且又享受https带来的极速和方便。</p><a id="more"></a><p>设置输入一次密码后记住密码（默认时间15分钟）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper cache</span><br></pre></td></tr></table></figure><p>也可以自己设置时间，比如一个小时之后失效，可以这样做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config credential.helper &apos;cache --timeout=3600&apos;</span><br></pre></td></tr></table></figure><p>还可以永久存储密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用https的方式，每次pull或者push都要输入账号密码，这样操作很烦，又不想设置SSH公钥到远程仓库。如下设置即可输入一次就不用再手输入密码的困扰而且又享受https带来的极速和方便。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://www.kming6.com/categories/Git/"/>
    
    
      <category term="Git" scheme="https://www.kming6.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git提交时忽略已提交过且本地修改过的文件</title>
    <link href="https://www.kming6.com/posts/58014/"/>
    <id>https://www.kming6.com/posts/58014/</id>
    <published>2019-09-26T19:04:27.000Z</published>
    <updated>2021-05-27T11:58:15.385Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>有的时候项目的配置文件和测试环境的不一样，本地开发时需要将配置改为本地的，修改后的文件又不提交到远程仓库，怎么办呢？</p><a id="more"></a><p>可以使用如下命令忽略已经修改后但是不提交的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git update-index --assume-unchanged [file-path]</span><br></pre></td></tr></table></figure><p>重新恢复提交的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git update-index --no-assume-unchanged [file-path]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有的时候项目的配置文件和测试环境的不一样，本地开发时需要将配置改为本地的，修改后的文件又不提交到远程仓库，怎么办呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://www.kming6.com/categories/Git/"/>
    
    
      <category term="Git" scheme="https://www.kming6.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Liunx终端关闭后shell脚本继续运行</title>
    <link href="https://www.kming6.com/posts/2849/"/>
    <id>https://www.kming6.com/posts/2849/</id>
    <published>2019-09-13T06:22:11.000Z</published>
    <updated>2021-05-27T11:58:15.385Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一直执行的shell脚本，在终端关闭后就会退出，怎么解决？</p><a id="more"></a><p>比如运行xxx.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash xxx.sh</span><br></pre></td></tr></table></figure><p>按下ctrl-z中断脚本运行，此时系统提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^Z</span><br><span class="line">[1]+ Stopped bash xxx.sh</span><br></pre></td></tr></table></figure><p>意思是编号为1的任务挂起了，[1]就是任务的编号，里面的数字也可能是2，3，4…</p><p>输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bg</span> 1</span><br></pre></td></tr></table></figure><p>这个命令将1号任务切换到后台执行</p><p>输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">disown</span> -h %1</span><br></pre></td></tr></table></figure><p>这个命令的是将1号任务从当前shell的任务列表中移除，并且忽略HUP信号(Liunx的中断信号)，这样，即使当前Shell结束了，这个任务也不会被结束，而是继续留在后台执行。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直执行的shell脚本，在终端关闭后就会退出，怎么解决？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Liunx" scheme="https://www.kming6.com/categories/Liunx/"/>
    
    
      <category term="Liunx" scheme="https://www.kming6.com/tags/Liunx/"/>
    
  </entry>
  
  <entry>
    <title>Docker拉取镜像出错</title>
    <link href="https://www.kming6.com/posts/6854/"/>
    <id>https://www.kming6.com/posts/6854/</id>
    <published>2019-09-12T21:54:41.000Z</published>
    <updated>2021-05-27T11:58:15.385Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>docker pull镜像的时候出错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Get https://registry-1.docker.io/v2/: dial tcp: lookup registry-1.docker.io on 8.8.8.8:53: too many redirects</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="执行以下命令"><a href="#执行以下命令" class="headerlink" title="执行以下命令"></a>执行以下命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig @114.114.114.114 registry-1.docker.io</span><br></pre></td></tr></table></figure><p>执行后结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.9.4-RedHat-9.9.4-61.el7 &lt;&lt;&gt;&gt; @114.114.114.114 registry-1.docker.io</span><br><span class="line">; (1 server found)</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 52963</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 8, AUTHORITY: 4, ADDITIONAL: 9</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 4096</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;registry-1.docker.io.    IN   A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">registry-1.docker.io.   300 IN   A   3.210.179.11</span><br><span class="line">registry-1.docker.io.   300 IN   A   52.55.198.220</span><br><span class="line">registry-1.docker.io.   300 IN   A   52.70.175.131</span><br><span class="line">registry-1.docker.io.   300 IN   A   54.175.43.85</span><br><span class="line">registry-1.docker.io.   300 IN   A   54.210.105.17</span><br><span class="line">registry-1.docker.io.   300 IN   A   100.24.246.89</span><br><span class="line">registry-1.docker.io.   300 IN   A   54.88.231.116</span><br><span class="line">registry-1.docker.io.   300 IN   A   52.87.94.70</span><br><span class="line"></span><br><span class="line">;; AUTHORITY SECTION:</span><br><span class="line">docker.io.       61407    IN    NS   ns-1168.awsdns-18.org.</span><br><span class="line">docker.io.       61407    IN    NS   ns-421.awsdns-52.com.</span><br><span class="line">docker.io.       61407    IN    NS   ns-1827.awsdns-36.co.uk.</span><br><span class="line">docker.io.       61407    IN    NS   ns-513.awsdns-00.net.</span><br><span class="line"></span><br><span class="line">;; ADDITIONAL SECTION:</span><br><span class="line">ns-1827.awsdns-36.co.uk. 57947    IN    A     205.251.199.35</span><br><span class="line">ns-1827.awsdns-36.co.uk. 57273    IN    AAAA  2600:9000:5307:2300::1</span><br><span class="line">ns-1168.awsdns-18.org.   47450    IN    A     205.251.196.144</span><br><span class="line">ns-1168.awsdns-18.org.   57090    IN    AAAA  2600:9000:5304:9000::1</span><br><span class="line">ns-421.awsdns-52.com.    143703   IN    A     205.251.193.165</span><br><span class="line">ns-421.awsdns-52.com.    57067    IN    AAAA  2600:9000:5301:a500::1</span><br><span class="line">ns-513.awsdns-00.net.    45649    IN    A     205.251.194.1</span><br><span class="line">ns-513.awsdns-00.net.    45650    IN    AAAA  2600:9000:5302:100::1</span><br><span class="line"></span><br><span class="line">;; Query time: 5 msec</span><br><span class="line">;; SERVER: 114.114.114.114#53(114.114.114.114)</span><br><span class="line">;; WHEN: Thu Sep 12 21:50:15 CST 2019</span><br><span class="line">;; MSG SIZE  rcvd: 493</span><br></pre></td></tr></table></figure><h3 id="修改-etc-hosts文件，强制docker-io域名解析到可用IP，添加"><a href="#修改-etc-hosts文件，强制docker-io域名解析到可用IP，添加" class="headerlink" title="修改 /etc/hosts文件，强制docker.io域名解析到可用IP，添加"></a>修改 /etc/hosts文件，强制docker.io域名解析到可用IP，添加</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.210.179.11      registry-1.docker.io</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;docker pull镜像的时候出错&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ERROR: Get https://registry-1.docker.io/v2/: dial tcp: lookup registry-1.docker.io on 8.8.8.8:53: too many redirects&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.kming6.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://www.kming6.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Liunx记录登录用户和操作记录</title>
    <link href="https://www.kming6.com/posts/62916/"/>
    <id>https://www.kming6.com/posts/62916/</id>
    <published>2019-09-11T23:15:37.000Z</published>
    <updated>2021-05-27T11:58:15.385Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>通过在/etc/profile里面加入以下代码就可以实现记录登陆后的IP地址和某用户名所操作的历史记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">PS1=<span class="string">"`whoami`@`hostname`:"</span><span class="string">'[$PWD]'</span></span><br><span class="line"><span class="built_in">history</span></span><br><span class="line">USER_IP=`who -u am i 2&gt;/dev/null| awk <span class="string">'&#123;print $NF&#125;'</span>|sed -e <span class="string">'s/[()]//g'</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$USER_IP</span>"</span> = <span class="string">""</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">USER_IP=`hostname`</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d /tmp/dbasky ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">mkdir /tmp/dbasky</span><br><span class="line">chmod 777 /tmp/dbasky</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d /tmp/dbasky/<span class="variable">$&#123;LOGNAME&#125;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">mkdir /tmp/dbasky/<span class="variable">$&#123;LOGNAME&#125;</span></span><br><span class="line">chmod 300 /tmp/dbasky/<span class="variable">$&#123;LOGNAME&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">export</span> HISTSIZE=4096</span><br><span class="line">DT=`date <span class="string">"+%Y-%m-%d_%H:%M:%S"</span>`</span><br><span class="line"><span class="built_in">export</span> HISTFILE=<span class="string">"/tmp/dbasky/<span class="variable">$&#123;LOGNAME&#125;</span>/<span class="variable">$&#123;USER_IP&#125;</span> dbasky.<span class="variable">$DT</span>"</span></span><br><span class="line">chmod 600 /tmp/dbasky/<span class="variable">$&#123;LOGNAME&#125;</span>/*dbasky* 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p>别忘记执行下面命令使脚本生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>/tmp/dbasky/root目录下查看记录信息</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Liunx" scheme="https://www.kming6.com/categories/Liunx/"/>
    
    
      <category term="Liunx" scheme="https://www.kming6.com/tags/Liunx/"/>
    
  </entry>
  
</feed>
