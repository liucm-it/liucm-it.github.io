<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kermit&#39;s Blog</title>
  
  <subtitle>刘朝铭的网络博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.liuchaoming.cn/"/>
  <updated>2019-09-28T14:01:23.750Z</updated>
  <id>https://blog.liuchaoming.cn/</id>
  
  <author>
    <name>Kermit Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git设置只需要输入一次密码, 就可以进行pull/push操作，不用每次输入密码</title>
    <link href="https://blog.liuchaoming.cn/2019/09/28/Git%E8%AE%BE%E7%BD%AE%E6%B0%B8%E4%B9%85%E4%BF%9D%E5%AD%98%E5%AF%86%E7%A0%81/"/>
    <id>https://blog.liuchaoming.cn/2019/09/28/Git设置永久保存密码/</id>
    <published>2019-09-28T13:38:08.000Z</published>
    <updated>2019-09-28T14:01:23.750Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>使用https的方式，每次pull或者push都要输入账号密码，这样操作很烦，又不想设置SSH公钥到远程仓库。如下设置即可输入一次就不用再手输入密码的困扰而且又享受https带来的极速和方便。</p><a id="more"></a><p>设置输入一次密码后记住密码（默认时间15分钟）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper cache</span><br></pre></td></tr></table></figure><p>也可以自己设置时间，比如一个小时之后失效，可以这样做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config credential.helper &apos;cache --timeout=3600&apos;</span><br></pre></td></tr></table></figure><p>还可以永久存储密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用https的方式，每次pull或者push都要输入账号密码，这样操作很烦，又不想设置SSH公钥到远程仓库。如下设置即可输入一次就不用再手输入密码的困扰而且又享受https带来的极速和方便。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://blog.liuchaoming.cn/categories/Git/"/>
    
    
      <category term="Git" scheme="https://blog.liuchaoming.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git提交时忽略已提交过且本地修改过的文件</title>
    <link href="https://blog.liuchaoming.cn/2019/09/26/Git%E6%8F%90%E4%BA%A4%E6%97%B6%E5%BF%BD%E7%95%A5%E5%B7%B2%E6%8F%90%E4%BA%A4%E8%BF%87%E4%B8%94%E6%9C%AC%E5%9C%B0%E4%BF%AE%E6%94%B9%E8%BF%87%E7%9A%84%E6%96%87%E4%BB%B6/"/>
    <id>https://blog.liuchaoming.cn/2019/09/26/Git提交时忽略已提交过且本地修改过的文件/</id>
    <published>2019-09-26T11:04:27.000Z</published>
    <updated>2019-09-26T11:11:37.774Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>有的时候项目的配置文件和测试环境的不一样，本地开发时需要将配置改为本地的，修改后的文件又不提交到远程仓库，怎么办呢？</p><a id="more"></a><p>可以使用如下命令忽略已经修改后但是不提交的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git update-index --assume-unchanged [file-path]</span><br></pre></td></tr></table></figure><p>重新恢复提交的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git update-index --no-assume-unchanged [file-path]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有的时候项目的配置文件和测试环境的不一样，本地开发时需要将配置改为本地的，修改后的文件又不提交到远程仓库，怎么办呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://blog.liuchaoming.cn/categories/Git/"/>
    
    
      <category term="Git" scheme="https://blog.liuchaoming.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Liunx终端关闭后shell脚本继续运行</title>
    <link href="https://blog.liuchaoming.cn/2019/09/13/Liunx%E7%BB%88%E7%AB%AF%E5%85%B3%E9%97%AD%E5%90%8Eshell%E8%84%9A%E6%9C%AC%E7%BB%A7%E7%BB%AD%E8%BF%90%E8%A1%8C/"/>
    <id>https://blog.liuchaoming.cn/2019/09/13/Liunx终端关闭后shell脚本继续运行/</id>
    <published>2019-09-12T22:22:11.737Z</published>
    <updated>2019-09-13T06:29:54.730Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一直执行的shell脚本，在终端关闭后就会退出，怎么解决？</p><a id="more"></a><p>比如运行xxx.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash xxx.sh</span><br></pre></td></tr></table></figure><p>按下ctrl-z中断脚本运行，此时系统提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^Z</span><br><span class="line">[1]+ Stopped bash xxx.sh</span><br></pre></td></tr></table></figure><p>意思是编号为1的任务挂起了，[1]就是任务的编号，里面的数字也可能是2，3，4…</p><p>输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bg</span> 1</span><br></pre></td></tr></table></figure><p>这个命令将1号任务切换到后台执行</p><p>输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">disown</span> -h %1</span><br></pre></td></tr></table></figure><p>这个命令的是将1号任务从当前shell的任务列表中移除，并且忽略HUP信号(Liunx的中断信号)，这样，即使当前Shell结束了，这个任务也不会被结束，而是继续留在后台执行。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直执行的shell脚本，在终端关闭后就会退出，怎么解决？&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Liunx" scheme="https://blog.liuchaoming.cn/tags/Liunx/"/>
    
  </entry>
  
  <entry>
    <title>Docker拉取镜像出错</title>
    <link href="https://blog.liuchaoming.cn/2019/09/12/Docker%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F%E5%87%BA%E9%94%99/"/>
    <id>https://blog.liuchaoming.cn/2019/09/12/Docker拉取镜像出错/</id>
    <published>2019-09-12T13:54:41.000Z</published>
    <updated>2019-09-21T03:55:26.837Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>docker pull镜像的时候出错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Get https://registry-1.docker.io/v2/: dial tcp: lookup registry-1.docker.io on 8.8.8.8:53: too many redirects</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="执行以下命令"><a href="#执行以下命令" class="headerlink" title="执行以下命令"></a>执行以下命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig @114.114.114.114 registry-1.docker.io</span><br></pre></td></tr></table></figure><p>执行后结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.9.4-RedHat-9.9.4-61.el7 &lt;&lt;&gt;&gt; @114.114.114.114 registry-1.docker.io</span><br><span class="line">; (1 server found)</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 52963</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 8, AUTHORITY: 4, ADDITIONAL: 9</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 4096</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;registry-1.docker.io.    IN   A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">registry-1.docker.io.   300 IN   A   3.210.179.11</span><br><span class="line">registry-1.docker.io.   300 IN   A   52.55.198.220</span><br><span class="line">registry-1.docker.io.   300 IN   A   52.70.175.131</span><br><span class="line">registry-1.docker.io.   300 IN   A   54.175.43.85</span><br><span class="line">registry-1.docker.io.   300 IN   A   54.210.105.17</span><br><span class="line">registry-1.docker.io.   300 IN   A   100.24.246.89</span><br><span class="line">registry-1.docker.io.   300 IN   A   54.88.231.116</span><br><span class="line">registry-1.docker.io.   300 IN   A   52.87.94.70</span><br><span class="line"></span><br><span class="line">;; AUTHORITY SECTION:</span><br><span class="line">docker.io.       61407    IN    NS   ns-1168.awsdns-18.org.</span><br><span class="line">docker.io.       61407    IN    NS   ns-421.awsdns-52.com.</span><br><span class="line">docker.io.       61407    IN    NS   ns-1827.awsdns-36.co.uk.</span><br><span class="line">docker.io.       61407    IN    NS   ns-513.awsdns-00.net.</span><br><span class="line"></span><br><span class="line">;; ADDITIONAL SECTION:</span><br><span class="line">ns-1827.awsdns-36.co.uk. 57947    IN    A     205.251.199.35</span><br><span class="line">ns-1827.awsdns-36.co.uk. 57273    IN    AAAA  2600:9000:5307:2300::1</span><br><span class="line">ns-1168.awsdns-18.org.   47450    IN    A     205.251.196.144</span><br><span class="line">ns-1168.awsdns-18.org.   57090    IN    AAAA  2600:9000:5304:9000::1</span><br><span class="line">ns-421.awsdns-52.com.    143703   IN    A     205.251.193.165</span><br><span class="line">ns-421.awsdns-52.com.    57067    IN    AAAA  2600:9000:5301:a500::1</span><br><span class="line">ns-513.awsdns-00.net.    45649    IN    A     205.251.194.1</span><br><span class="line">ns-513.awsdns-00.net.    45650    IN    AAAA  2600:9000:5302:100::1</span><br><span class="line"></span><br><span class="line">;; Query time: 5 msec</span><br><span class="line">;; SERVER: 114.114.114.114#53(114.114.114.114)</span><br><span class="line">;; WHEN: Thu Sep 12 21:50:15 CST 2019</span><br><span class="line">;; MSG SIZE  rcvd: 493</span><br></pre></td></tr></table></figure><h3 id="修改-etc-hosts文件，强制docker-io域名解析到可用IP，添加"><a href="#修改-etc-hosts文件，强制docker-io域名解析到可用IP，添加" class="headerlink" title="修改 /etc/hosts文件，强制docker.io域名解析到可用IP，添加"></a>修改 /etc/hosts文件，强制docker.io域名解析到可用IP，添加</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.210.179.11      registry-1.docker.io</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;docker pull镜像的时候出错&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ERROR: Get https://registry-1.docker.io/v2/: dial tcp: lookup registry-1.docker.io on 8.8.8.8:53: too many redirects&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://blog.liuchaoming.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://blog.liuchaoming.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Liunx记录登录用户和操作记录</title>
    <link href="https://blog.liuchaoming.cn/2019/09/11/Liunx%E8%AE%B0%E5%BD%95%E7%99%BB%E5%BD%95%E7%94%A8%E6%88%B7%E5%92%8C%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    <id>https://blog.liuchaoming.cn/2019/09/11/Liunx记录登录用户和操作记录/</id>
    <published>2019-09-11T15:15:37.000Z</published>
    <updated>2019-09-21T03:56:29.792Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>通过在/etc/profile里面加入以下代码就可以实现记录登陆后的IP地址和某用户名所操作的历史记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">PS1=<span class="string">"`whoami`@`hostname`:"</span><span class="string">'[$PWD]'</span></span><br><span class="line"><span class="built_in">history</span></span><br><span class="line">USER_IP=`who -u am i 2&gt;/dev/null| awk <span class="string">'&#123;print $NF&#125;'</span>|sed -e <span class="string">'s/[()]//g'</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$USER_IP</span>"</span> = <span class="string">""</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">USER_IP=`hostname`</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d /tmp/dbasky ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">mkdir /tmp/dbasky</span><br><span class="line">chmod 777 /tmp/dbasky</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d /tmp/dbasky/<span class="variable">$&#123;LOGNAME&#125;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">mkdir /tmp/dbasky/<span class="variable">$&#123;LOGNAME&#125;</span></span><br><span class="line">chmod 300 /tmp/dbasky/<span class="variable">$&#123;LOGNAME&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">export</span> HISTSIZE=4096</span><br><span class="line">DT=`date <span class="string">"+%Y-%m-%d_%H:%M:%S"</span>`</span><br><span class="line"><span class="built_in">export</span> HISTFILE=<span class="string">"/tmp/dbasky/<span class="variable">$&#123;LOGNAME&#125;</span>/<span class="variable">$&#123;USER_IP&#125;</span> dbasky.<span class="variable">$DT</span>"</span></span><br><span class="line">chmod 600 /tmp/dbasky/<span class="variable">$&#123;LOGNAME&#125;</span>/*dbasky* 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p>别忘记执行下面命令使脚本生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>/tmp/dbasky/root目录下查看记录信息</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Liunx" scheme="https://blog.liuchaoming.cn/categories/Liunx/"/>
    
    
      <category term="Liunx" scheme="https://blog.liuchaoming.cn/tags/Liunx/"/>
    
  </entry>
  
  <entry>
    <title>Centos7上安装Docker</title>
    <link href="https://blog.liuchaoming.cn/2019/09/10/Centos7%E4%B8%8A%E5%AE%89%E8%A3%85Docker/"/>
    <id>https://blog.liuchaoming.cn/2019/09/10/Centos7上安装Docker/</id>
    <published>2019-09-10T13:13:55.000Z</published>
    <updated>2019-09-21T06:22:10.656Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="通过yum源安装docker"><a href="#通过yum源安装docker" class="headerlink" title="通过yum源安装docker"></a>通过yum源安装docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker</span><br></pre></td></tr></table></figure><h3 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://blog.liuchaoming.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://blog.liuchaoming.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker运行mysql挂载数据卷权限问题</title>
    <link href="https://blog.liuchaoming.cn/2019/09/08/Docker%E8%BF%90%E8%A1%8Cmysql%E6%8C%82%E8%BD%BD%E6%95%B0%E6%8D%AE%E5%8D%B7%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/"/>
    <id>https://blog.liuchaoming.cn/2019/09/08/Docker运行mysql挂载数据卷权限问题/</id>
    <published>2019-09-08T04:04:49.000Z</published>
    <updated>2019-09-21T03:55:47.548Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>使用docker-compose运行mysql容器报错，没有执行权限的问题</p><a id="more"></a><h3 id="docker-compose-yml-内容如下所示"><a href="#docker-compose-yml-内容如下所示" class="headerlink" title="docker-compose.yml 内容如下所示"></a>docker-compose.yml 内容如下所示</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">version: &quot;2&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  mysql:</span><br><span class="line">    container_name: mysql</span><br><span class="line">    image: mysql:5.5.60</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3306:3306&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./mysql/data:/var/lib/mysql</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: &quot;123456&quot;</span><br></pre></td></tr></table></figure><h3 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown: cannot <span class="built_in">read</span> directory <span class="string">'/var/lib/mysql/'</span>: Permission denied</span><br></pre></td></tr></table></figure><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>该原因为centOs7默认开启selinux安全模块,需要临时关闭该安全模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">临时关闭selinux：su -c &quot;setenforce 0&quot;</span><br><span class="line">重新开启selinux：su -c &quot;setenforce 1&quot;</span><br></pre></td></tr></table></figure><p>或者添加目录到白名单，添加selinux规则，将要挂载的目录添加到白名单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chcon -Rt svirt_sandbox_file_t ./mysql/data</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用docker-compose运行mysql容器报错，没有执行权限的问题&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://blog.liuchaoming.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://blog.liuchaoming.cn/tags/Docker/"/>
    
      <category term="Mysql" scheme="https://blog.liuchaoming.cn/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>git push到GitHub的时候遇到! [rejected] master -&gt; master (non-fast-forward)的问题</title>
    <link href="https://blog.liuchaoming.cn/2019/09/05/git-push%E5%88%B0GitHub%E7%9A%84%E6%97%B6%E5%80%99%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://blog.liuchaoming.cn/2019/09/05/git-push到GitHub的时候遇到的问题/</id>
    <published>2019-09-05T13:38:03.000Z</published>
    <updated>2019-09-21T03:56:09.150Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>git push到GitHub的时候遇到! [rejected] master -&gt; master (non-fast-forward)的问题</p><a id="more"></a><h3 id="出现错误的原因"><a href="#出现错误的原因" class="headerlink" title="出现错误的原因"></a>出现错误的原因</h3><p>1、在manage文件夹里打开git，输入git init初始化本地仓库，GitHub创建远程仓库manage</p><p>2、以下命令关联本地和远程仓库，xxx为github厂库用户名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:xxx/manage.git</span><br></pre></td></tr></table></figure><p>3、本地已经有项目代码了在add和commit之后，想要push到远程仓库，报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> ! [rejected]        master -&gt; master (non-fast-forward)</span><br><span class="line">error: failed to push some refs to &apos;git@github.com:xxx/spring-study.git&apos;</span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class="line">hint: &apos;git pull ...&apos;) before pushing again.</span><br><span class="line">hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details.</span><br></pre></td></tr></table></figure><h3 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h3><p>1、git pull origin master –allow-unrelated-histories //把远程仓库和本地同步，消除差异</p><p>2、重新add和commit相应文件</p><p>3、执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>4、此时就能push成功了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git push到GitHub的时候遇到! [rejected] master -&amp;gt; master (non-fast-forward)的问题&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://blog.liuchaoming.cn/categories/Git/"/>
    
    
      <category term="Git" scheme="https://blog.liuchaoming.cn/tags/Git/"/>
    
      <category term="GitHub" scheme="https://blog.liuchaoming.cn/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>关于java的垃圾收集器</title>
    <link href="https://blog.liuchaoming.cn/2019/09/04/%E5%85%B3%E4%BA%8Ejava%E7%9A%84%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"/>
    <id>https://blog.liuchaoming.cn/2019/09/04/关于java的垃圾收集器/</id>
    <published>2019-09-04T13:00:20.000Z</published>
    <updated>2019-10-06T03:50:39.058Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>虽然对各个收集器进行比较，但并非要挑选出一个最好的收集器。因为知道现在为止还没有所谓最好的垃圾收集器出现，也更加没有万能的垃圾收集器，而是根据具体应用场景选择适合自己的垃圾收集器。如果有一种任何场景下都适用的完美收集器存在，那么HotSpot虚拟机就不会实现那么多不同的垃圾收集器了</p><a id="more"></a><h3 id="Serial-收集器"><a href="#Serial-收集器" class="headerlink" title="Serial 收集器"></a>Serial 收集器</h3><blockquote><p>Serial（串行）收集器收集器是最基本、历史最悠久的垃圾收集器了。看名字就知道这个收集器是一个单线程收集器了。它的 “单线程” 的意义不仅仅意味着它只会使用一条垃圾收集线程去完成垃圾收集工作，更重要的是它在进行垃圾收集工作的时候必须暂停其他所有的工作线程（ “Stop The World” ），直到它收集结束。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/liucm-it/ImgHosting/pic/Serial.jpg" alt></p><p>虚拟机的设计者们当然知道 Stop The World 带来的不良用户体验，所以在后续的垃圾收集器设计中停顿时间在不断缩短（仍然还有停顿，寻找最优秀的垃圾收集器的过程仍然在继续）。</p><p>但是 Serial 收集器有没有优于其他垃圾收集器的地方呢？当然有，它简单而高效（与其他收集器的单线程相比）。Serial 收集器由于没有线程交互的开销，自然可以获得很高的单线程收集效率。Serial 收集器对于运行在 Client 模式下的虚拟机来说是个不错的选择</p><h3 id="ParNew-收集器"><a href="#ParNew-收集器" class="headerlink" title="ParNew 收集器"></a>ParNew 收集器</h3><blockquote><p>ParNew 收集器其实就是 Serial 收集器的多线程版本，除了使用多线程进行垃圾收集外，其余行为（控制参数、收集算法、回收策略等等）和 Serial 收集器完全一样。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/liucm-it/ImgHosting/pic/ParNew.jpg" alt></p><p>它是许多运行在 Server 模式下的虚拟机的首要选择，除了 Serial 收集器外，只有它能与 CMS 收集器（真正意义上的并发收集器，后面会介绍到）配合工作。</p><blockquote><p>并行和并发概念：<br>并行（Parallel） ：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。<br>并发（Concurrent）：指用户线程与垃圾收集线程同时执行（但不一定是并行，可能会交替执行），用户程序在继续运行，而垃圾收集器运行在另一个 CPU 上。</p></blockquote><h3 id="Parallel-Scavenge-收集器"><a href="#Parallel-Scavenge-收集器" class="headerlink" title="Parallel Scavenge 收集器"></a>Parallel Scavenge 收集器</h3><blockquote><p>Parallel Scavenge 收集器也是使用复制算法的多线程收集器，它看上去几乎和ParNew都一样</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseParallelGC </span><br><span class="line"></span><br><span class="line">    使用 Parallel 收集器+ 老年代串行</span><br><span class="line"></span><br><span class="line">-XX:+UseParallelOldGC</span><br><span class="line"></span><br><span class="line">    使用 Parallel 收集器+ 老年代并行</span><br></pre></td></tr></table></figure><p>Parallel Scavenge 收集器关注点是吞吐量（高效率的利用 CPU）。CMS 等垃圾收集器的关注点更多的是用户线程的停顿时间（提高用户体验）。所谓吞吐量就是 CPU 中用于运行用户代码的时间与 CPU 总消耗时间的比值。 Parallel Scavenge 收集器提供了很多参数供用户找到最合适的停顿时间或最大吞吐量，如果对于收集器运作不太了解的话，手工优化存在困难的话可以选择把内存管理优化交给虚拟机去完成也是一个不错的选择。</p><p><img src="https://cdn.jsdelivr.net/gh/liucm-it/ImgHosting/pic/Parallel-Scavenge.jpg" alt></p><h3 id="Serial-Old-收集器"><a href="#Serial-Old-收集器" class="headerlink" title="Serial Old 收集器"></a>Serial Old 收集器</h3><blockquote><p><strong>Serial 收集器的老年代版本</strong>，它同样是一个单线程收集器。它主要有两大用途：一种用途是在 JDK1.5 以及以前的版本中与 Parallel Scavenge 收集器搭配使用，另一种用途是作为 CMS 收集器的后备方案。</p></blockquote><h3 id="Parallel-Old-收集器"><a href="#Parallel-Old-收集器" class="headerlink" title="Parallel Old 收集器"></a>Parallel Old 收集器</h3><blockquote><p><strong>Parallel Scavenge 收集器的老年代版本</strong>。使用多线程和“标记-整理”算法。在注重吞吐量以及 CPU 资源的场合，都可以优先考虑 Parallel Scavenge 收集器和 Parallel Old 收集器。</p></blockquote><h3 id="CMS-收集器"><a href="#CMS-收集器" class="headerlink" title="CMS 收集器"></a>CMS 收集器</h3><blockquote><p><strong>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。它非常符合在注重用户体验的应用上使用</strong>。</p></blockquote><blockquote><p><strong>CMS（Concurrent Mark Sweep）收集器是 HotSpot 虚拟机第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程（基本上）同时工作</strong>。</p></blockquote><p>从名字中的<strong>Mark Sweep</strong>这两个词可以看出，CMS 收集器是一种 <strong>“标记-清除”算法</strong>实现的，它的运作过程相比于前面几种垃圾收集器来说更加复杂一些。整个过程分为四个步骤：</p><ul><li>初始标记： 暂停所有的其他线程，并记录下直接与 root 相连的对象，速度很快 ；</li><li>并发标记： 同时开启 GC 和用户线程，用一个闭包结构去记录可达对象。但在这个阶段结束，这个闭包结构并不能保证包含当前所有的可达对象。因为用户线程可能会不断的更新引用域，所以 GC 线程无法保证可达性分析的实时性。所以这个算法里会跟踪记录这些发生引用更新的地方。</li><li>重新标记： 重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短</li><li>并发清除： 开启用户线程，同时 GC 线程开始对为标记的区域做清扫。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liucm-it/ImgHosting/pic/CMS.jpg" alt></p><p>从它的名字就可以看出它是一款优秀的垃圾收集器，主要优点：并发收集、低停顿。但是它有下面三个明显的缺点：</p><ul><li>对 CPU 资源敏感；</li><li>无法处理浮动垃圾；</li><li>它使用的回收算法-“标记-清除”算法会导致收集结束时会有大量空间碎片产生。</li></ul><h3 id="G1-收集器"><a href="#G1-收集器" class="headerlink" title="G1 收集器"></a>G1 收集器</h3><blockquote><p><strong>G1 (Garbage-First) 是一款面向服务器的垃圾收集器,主要针对配备多颗处理器及大容量内存的机器. 以极高概率满足 GC 停顿时间要求的同时,还具备高吞吐量性能特征</strong>.</p></blockquote><p>被视为 JDK1.7 中 HotSpot 虚拟机的一个重要进化特征。它具备一下特点：</p><ul><li>并行与并发：G1 能充分利用 CPU、多核环境下的硬件优势，使用多个 CPU（CPU 或者 CPU 核心）来缩短 Stop-The-World 停顿时间。部分其他收集器原本需要停顿 Java 线程执行的 GC 动作，G1 收集器仍然可以通过并发的方式让 java 程序继续执行。</li><li>分代收集：虽然 G1 可以不需要其他收集器配合就能独立管理整个 GC 堆，但是还是保留了分代的概念。</li><li>空间整合：与 CMS 的“标记–清理”算法不同，G1 从整体来看是基于“标记整理”算法实现的收集器；从局部上来看是基于“复制”算法实现的。</li><li>可预测的停顿：这是 G1 相对于 CMS 的另一个大优势，降低停顿时间是 G1 和 CMS 共同的关注点，但 G1 除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为 M 毫秒的时间片段内。</li></ul><p>G1 收集器的运作大致分为以下几个步骤：</p><ul><li>初始标记</li><li>并发标记</li><li>最终标记</li><li>筛选回收</li></ul><blockquote><p><strong>G1 收集器在后台维护了一个优先列表，每次根据允许的收集时间，优先选择回收价值最大的 Region(这也就是它的名字 Garbage-First 的由来)。</strong>这种使用 Region 划分内存空间以及有优先级的区域回收方式，保证了 GF 收集器在有限时间内可以尽可能高的收集效率（把内存化整为零）。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然对各个收集器进行比较，但并非要挑选出一个最好的收集器。因为知道现在为止还没有所谓最好的垃圾收集器出现，也更加没有万能的垃圾收集器，而是根据具体应用场景选择适合自己的垃圾收集器。如果有一种任何场景下都适用的完美收集器存在，那么HotSpot虚拟机就不会实现那么多不同的垃圾收集器了&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://blog.liuchaoming.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.liuchaoming.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java8的Lambda表达式</title>
    <link href="https://blog.liuchaoming.cn/2019/08/30/Java8%E7%9A%84Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E4%B8%8A/"/>
    <id>https://blog.liuchaoming.cn/2019/08/30/Java8的Lambda表达式-上/</id>
    <published>2019-08-30T13:46:34.000Z</published>
    <updated>2019-09-21T03:56:18.914Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Java 8版本是现在Java最流行的一个版本。主要改进Java在面向对象的基础上对函数式编程的支持。本文将展示Lambda的基本语法。</p><a id="more"></a><h3 id="为什么使用Lambda表达式"><a href="#为什么使用Lambda表达式" class="headerlink" title="为什么使用Lambda表达式"></a>为什么使用Lambda表达式</h3><p>我们使用Java的集合经常会定义比较器来进行集合排序。比如要按照字符串长度对字符进行排序，实现一个自定义的Comparator对象并传递给方法进行排序，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LengthComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String firstStr, String secondStr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(firstStr.length(), secondStr.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Arrays.sort(strings, <span class="keyword">new</span> LengthComparator());</span><br></pre></td></tr></table></figure><p>编写这一段用于比较的代码片段，封装在自定义的Comparator里。Arrays.sort方法会在适当时机就会调用此代码片段，对strings数组进行排序。<br>那么，这个适当时机，是什么时候呢？它可能是某个按钮被点击时，也可能是某个新线程被启动时，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunner</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.our.println(<span class="string">"do work"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> MyRunner()).start();</span><br></pre></td></tr></table></figure><p>把一段代码块传递 - 线程池，排序方法。希望在适当时机需要时，调用这段代码来进行相关工作或排序。</p><p>在java8以前，想要传递代码块很不容易。我们只能把代码块写在一个特殊的类里, 或者使用匿名内部类的方式，实例化一个类对象来传递这段代码。</p><h3 id="Lambda的语法"><a href="#Lambda的语法" class="headerlink" title="Lambda的语法"></a>Lambda的语法</h3><p>对于字符串排序，需要明确两个问题</p><ol><li>处理传入的参数类型是什么？是什么数据类型？</li><li>使用什么代码片段来进行处理？</li></ol><p>于是，Lambda的表达式可以:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(String str1, String str2) -&gt; Integer.compare(str1.length(), str2.length());</span><br></pre></td></tr></table></figure><p>如果可以推断Lambda的参数类型，可以省略类型，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;String&gt; com = (str1, str2) -&gt; Integer.compare(str1.length(), str2.length());</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java 8版本是现在Java最流行的一个版本。主要改进Java在面向对象的基础上对函数式编程的支持。本文将展示Lambda的基本语法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://blog.liuchaoming.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.liuchaoming.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Mysql导入导出命令详解</title>
    <link href="https://blog.liuchaoming.cn/2019/08/13/Mysql%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
    <id>https://blog.liuchaoming.cn/2019/08/13/Mysql导入导出命令详解/</id>
    <published>2019-08-13T12:10:29.000Z</published>
    <updated>2019-09-13T04:57:33.615Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Mysql导入导出数据库经常使用，记录一下以后方便查找</p><a id="more"></a><h3 id="导出数据和表结构"><a href="#导出数据和表结构" class="headerlink" title="导出数据和表结构"></a>导出数据和表结构</h3><blockquote><p>使用mysqldump可以加上–default-character-set=utf8 </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u用户名 -p密码 --default-character-set=utf8  数据库名 &gt; 数据库名.sql</span><br><span class="line"></span><br><span class="line">mysqldump -uroot -p123456 --default-character-set=utf8 test &gt; test.sql</span><br><span class="line"></span><br><span class="line">mysqldump -uroot -p test &gt; test.sql</span><br></pre></td></tr></table></figure><h3 id="只导出表结构"><a href="#只导出表结构" class="headerlink" title="只导出表结构"></a>只导出表结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u用户名 -p密码 -d 数据库名 &gt; 数据库名.sql</span><br><span class="line"></span><br><span class="line">mysqldump -uroot -p123456 -d test &gt; test.sql</span><br></pre></td></tr></table></figure><h3 id="导入数据库"><a href="#导入数据库" class="headerlink" title="导入数据库"></a>导入数据库</h3><h4 id="使用mysql命令导入"><a href="#使用mysql命令导入" class="headerlink" title="使用mysql命令导入"></a>使用mysql命令导入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u用户名 -p 数据库名 &lt; 数据库名.sql</span><br><span class="line"></span><br><span class="line">mysql -uroot -p123456 test &lt; test.sql</span><br></pre></td></tr></table></figure><h4 id="使用source命令导入"><a href="#使用source命令导入" class="headerlink" title="使用source命令导入"></a>使用source命令导入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use test;                     # 使用已经创建的数据库</span><br><span class="line">source /home/test/test.sql    # 导入备份的sql文件</span><br></pre></td></tr></table></figure><h3 id="导出远程数据库"><a href="#导出远程数据库" class="headerlink" title="导出远程数据库"></a>导出远程数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -h远程服务器ip地址 -P端口号  -u用户名 -p密码 --default-character-set=utf8 test &gt; /home/test/test.sql</span><br><span class="line"></span><br><span class="line">mysqldump -h192.168.22.11 –P3306 -uroot -ppassword --default-character-set=utf8 test &gt; /home/test/test.sql</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mysql导入导出数据库经常使用，记录一下以后方便查找&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Mysql" scheme="https://blog.liuchaoming.cn/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql数据库设计规范</title>
    <link href="https://blog.liuchaoming.cn/2019/08/10/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/"/>
    <id>https://blog.liuchaoming.cn/2019/08/10/Mysql数据库设计规范/</id>
    <published>2019-08-10T15:03:34.000Z</published>
    <updated>2019-09-22T02:41:37.422Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般使用Mysql数据比较多，但是有点小伙伴很少考虑Mysql设计上的细节问题，像SQL语句的规范、索引上的规范等等，本文经过整理后得到一些常用的Mysql数据库设计规范。</p><a id="more"></a><h3 id="Mysql命令规范"><a href="#Mysql命令规范" class="headerlink" title="Mysql命令规范"></a>Mysql命令规范</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 所有数据库表命名都用小写字母、并用下换线分割</span><br><span class="line">- 所有数据库表名尽量不要使用Mysql关键字命名、能看到名称大概了解表是做什么的</span><br><span class="line">- 临时表以tmp_为前缀、日期后缀区分，备份表以bak_为前缀、日期后缀</span><br><span class="line">- 相同的数据字段，在所有表中的列明和类型尽量保持一致</span><br></pre></td></tr></table></figure><h3 id="基本设计规范"><a href="#基本设计规范" class="headerlink" title="基本设计规范"></a>基本设计规范</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- 大部分情况尽量使用InnoDB引擎，InnoDB支持事务、行级锁、性能更好</span><br><span class="line">- 数据库尽量使用utf8mb4的字符集，兼容性好，避免乱码和索引创建失败的问题</span><br><span class="line">- 表和字段都尽量加上注释，方便以后维护</span><br><span class="line">- 尽量不要使用存储过程、视图、触发器、Event。可以减少数据库资源的占用、将计算转移到服务层</span><br><span class="line">- 单表的数据量尽量控制在500万以内，数据量过大影响Mysql性能和维护，更多的数据可以对数据库进行分库分表拆分，控制单表的数据量</span><br><span class="line">- 尽量不要使用Mysql的分区功能，分区是物理上多个文件，逻辑上一个文件，查询效率很低。可以使用中间件mycat、sharding-jdbc等进行物理分区</span><br><span class="line">- 尽量减少表的宽度、数据冷热数据进行分离、保证每个表都有主键</span><br><span class="line">  - Mysql列数限制在为4096列，每一行数据不超过65535字节；宽度越大、加载的内存就越大，IO消耗也就越大</span><br><span class="line">  - 经常用的数据放在一起，不常用的数据分离出去，可以极大提高效率</span><br><span class="line">  - 主键可以更好的利用索引，提高查询效率</span><br><span class="line">- 表中尽量不用外键，通过程序来维护，外键导致表与表之间耦合，涉及相关的表，十分影响性能且容易造成死锁</span><br></pre></td></tr></table></figure><h3 id="字段涉及规范"><a href="#字段涉及规范" class="headerlink" title="字段涉及规范"></a>字段涉及规范</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- 优先选择符合业务最小的存储类型，节省数据空间减少IO消耗</span><br><span class="line">- 字段定义使用Not Null，可以提供一个默认值</span><br><span class="line">  - null值索引很难优化，null值更占用空间，需要额外空间标识</span><br><span class="line">  - null值操作只能采用is null或is not null</span><br><span class="line">  - 不能采用=、in、&lt;、&lt;&gt;、not in、！=操作符，不方便操作，where name != &apos;abc&apos;, 不会查询出name为null的数据</span><br><span class="line">- 尽量不使用Text、Blob类型</span><br><span class="line">  - Mysql使用Text、Blob类型就不使用内存临时表而使用磁盘临时空间、性能差浪费磁盘和内存空间。</span><br><span class="line">  - 降低数据库内存命中率</span><br><span class="line">  - 可以单独建立扩展表使用</span><br><span class="line">- 尽量不使用Enum、用Tinyint</span><br><span class="line">  - 修改Enum值时，需要通过alter修改表</span><br><span class="line">  - order by的操作效率低</span><br><span class="line">- 尽量不要使用小数，尤其涉及金钱等精度要求较高的类型</span><br><span class="line">  - 最好使用整数，小数存储有精度的误差，导致金额对不上</span><br><span class="line">- 时间尽量使用Timestamp或者Datetime类型存储时间，不要使用String类型</span><br><span class="line">  - 使用String无法使用日期函数进行比较比较</span><br><span class="line">  - 用String会占用更多的空间</span><br></pre></td></tr></table></figure><h3 id="索引设计规范"><a href="#索引设计规范" class="headerlink" title="索引设计规范"></a>索引设计规范</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- 表的索引不要太多，尽量5个以下，索引增加查询效率同时也会降低插入和更新的效率</span><br><span class="line">  - 索引太多会影响Mysql优化器，优化器消耗时间增加，反而降低查询到的性能</span><br><span class="line">- 更新频繁的列、或者列值区分度不高的列(如：性别，只有男、女、未知)不要加索引</span><br><span class="line">- 联合索引，把区分度高的放在左侧，尽量遵循最左索引原则</span><br><span class="line">  - 区分度高的列放在最左侧</span><br><span class="line">  - 查询频繁的列放在最左侧</span><br><span class="line">  - 字段长度小的放在最左侧</span><br></pre></td></tr></table></figure><h3 id="SQL语句规范"><a href="#SQL语句规范" class="headerlink" title="SQL语句规范"></a>SQL语句规范</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- 尽量不要使属性隐式转换，隐式转换使索引失效</span><br><span class="line">  - SELECT name FROM project WHERE id = `&apos;1000&apos;`; id为整型，用`1000`代替</span><br><span class="line">- 程序中使用预编译语句操作数据库，减少SQL编译时间同时防止SQL注入</span><br><span class="line">- insert语句尽量包含字段</span><br><span class="line">  - 如：INSERT INTO test values(&apos;1&apos;, &apos;abc&apos;);应该INSERT INTO test(id, name) values(&apos;1&apos;, &apos;abc&apos;)</span><br><span class="line">- 尽量不要使用%开头的模糊查询</span><br><span class="line">  - not、!=、&lt;&gt;、not in、not like以及%开头等，会是查询不走索引而全变扫描</span><br><span class="line">- 联合索引只能有一列进行范围查询</span><br><span class="line">  - a1,a2,a3联合索引，a1范围查询，a2，a3列不会走索引，可以把a1放在最后</span><br><span class="line">- Where语句后的字段尽量不要使用函数或表达式，否则不会走索引</span><br><span class="line">  - SELECT id FROM t WHERE num/2=100，这将导致引擎放弃使用索引而进行全表扫描，可改为：SELECT id FROM t WHERE num=100*2</span><br><span class="line">  - SELECT id FROM t WHERE substring(name,1,3)=&apos;abc&apos;--name以abc开头的id，应改为:SELECT id FROM t WHERE name LIKE &apos;abc%&apos;</span><br><span class="line">  - SELECT id FROM t WHERE datediff(day,createdate,&apos;2005-11-30&apos;)=0--&apos;2015-11-30&apos;生成的id，应改为:SELECT id FROM t WHERE createdate&gt;=&apos;2015-11-30&apos; AND createdate&lt;&apos;2015-12-1&apos;</span><br><span class="line">- 大表不要使用子查询，不使用JOIN查询</span><br><span class="line">- 避免JOIN关联太多表</span><br><span class="line">- OR条件可以换成IN查询</span><br><span class="line">- 尽量减少与数据库交互次数</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般使用Mysql数据比较多，但是有点小伙伴很少考虑Mysql设计上的细节问题，像SQL语句的规范、索引上的规范等等，本文经过整理后得到一些常用的Mysql数据库设计规范。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mysql" scheme="https://blog.liuchaoming.cn/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://blog.liuchaoming.cn/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装后报Cannot connect to the docker daemon at ...</title>
    <link href="https://blog.liuchaoming.cn/2019/07/31/Docker%E4%BD%BF%E7%94%A8%E6%8A%A5%E9%94%99/"/>
    <id>https://blog.liuchaoming.cn/2019/07/31/Docker使用报错/</id>
    <published>2019-07-31T15:03:34.000Z</published>
    <updated>2019-09-21T04:42:30.828Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Docker安装后报错：Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</p><a id="more"></a><h3 id="解决方式执行以下命令"><a href="#解决方式执行以下命令" class="headerlink" title="解决方式执行以下命令"></a>解决方式执行以下命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">sudo service docker restart</span><br><span class="line">sudo service docker status (should see active (running))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker安装后报错：Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://blog.liuchaoming.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://blog.liuchaoming.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>About Blog</title>
    <link href="https://blog.liuchaoming.cn/2019/07/31/Blog/"/>
    <id>https://blog.liuchaoming.cn/2019/07/31/Blog/</id>
    <published>2019-07-31T15:03:34.000Z</published>
    <updated>2019-09-26T11:17:39.328Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to this Blog!</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" rel="external nofollow noopener noreferrer" target="_blank">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" rel="external nofollow noopener noreferrer" target="_blank">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" rel="external nofollow noopener noreferrer" target="_blank">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" rel="external nofollow noopener noreferrer" target="_blank">Deployment</a></p><h3 id="Clean"><a href="#Clean" class="headerlink" title="Clean"></a>Clean</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to this Blog!&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://blog.liuchaoming.cn/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://blog.liuchaoming.cn/tags/Hexo/"/>
    
  </entry>
  
</feed>
