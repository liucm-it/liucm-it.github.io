<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kermit&#39;s Blog</title>
  
  <subtitle>刘朝铭的网络博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.liuchaoming.cn/"/>
  <updated>2019-12-23T07:49:47.561Z</updated>
  <id>https://blog.liuchaoming.cn/</id>
  
  <author>
    <name>Kermit Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vim入门指南</title>
    <link href="https://blog.liuchaoming.cn/posts/25813/"/>
    <id>https://blog.liuchaoming.cn/posts/25813/</id>
    <published>2019-11-23T08:52:48.000Z</published>
    <updated>2019-12-23T07:49:47.561Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Vim是一个类似于Vi的著名的功能强大、高度可定制的文本编辑器，在Vi的基础上改进和增加了很多特性。VIM是自由软件。Vim普遍被推崇为类Vi编辑器中最好的一个，事实上真正的劲敌来自Emacs的不同变体。1999 年Emacs被选为Linuxworld文本编辑分类的优胜者，Vim屈居第二。但在2000年2月Vim赢得了Slashdot Beanie的最佳开放源代码文本编辑器大奖，又将Emacs推至二线， 总的来看， Vim和Emacs在文本编辑方面都是非常优秀的。</p><a id="more"></a><h3 id="vi-vim-的基本使用"><a href="#vi-vim-的基本使用" class="headerlink" title="vi/vim 的基本使用"></a>vi/vim 的基本使用</h3><p>基本上 vi/vim 共分为三种模式，分别是命令模式（Command/normal mode），输入/插入模式（Insert mode）和底线命令模式（Last line mode）。 这三种模式的作用分别是：</p><p><strong>命令模式</strong><br>用户刚刚启动 vi/vim，便进入了命令模式。</p><p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p><p>以下是常用的几个命令：</p><ul><li>i 切换到输入模式，以输入字符。</li><li>x 删除当前光标所在处的字符。</li><li>: 切换到底线命令模式，以在最底一行输入命令。</li><li>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</li></ul><p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p><p><strong>输入模式</strong><br>在命令模式下按下i就进入了输入模式。</p><p>在输入模式中，可以使用以下按键：</p><blockquote><p>字符按键以及Shift组合，输入字符<br>ENTER，回车键，换行<br>BACK SPACE，退格键，删除光标前一个字符<br>DEL，删除键，删除光标后一个字符<br>方向键，在文本中移动光标<br>HOME/END，移动光标到行首/行尾<br>Page Up/Page Down，上/下翻页<br>Insert，切换光标为输入/替换模式，光标将变成竖线/下划线<br>ESC，退出输入模式，切换到命令模式</p></blockquote><p><strong>底线命令模式</strong><br>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><p>q 退出程序<br>w 保存文件<br>按ESC键可随时退出底线命令模式。</p><h3 id="Vim进入编辑模式的方式"><a href="#Vim进入编辑模式的方式" class="headerlink" title="Vim进入编辑模式的方式"></a>Vim进入编辑模式的方式</h3><ul><li>i (insert)光标前输入</li><li>a (append)光标后追加输入</li><li>o (open a line below)光标下一行输入</li><li>A (append after line)光标所在行末尾输入</li><li>I (insert before line)光标所在行行首输入</li><li>O (append line above)光标所在行上一行输入</li></ul><h3 id="Vim编辑模式小技巧"><a href="#Vim编辑模式小技巧" class="headerlink" title="Vim编辑模式小技巧"></a>Vim编辑模式小技巧</h3><h4 id="Vim设置"><a href="#Vim设置" class="headerlink" title="Vim设置"></a>Vim设置</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 打开语法高亮</span><br><span class="line">:<span class="keyword">syntax</span> <span class="keyword">on</span></span><br><span class="line"># 打开搜索高亮(<span class="keyword">highlight</span> <span class="built_in">search</span>)</span><br><span class="line">:<span class="keyword">set</span> hls</span><br><span class="line"># 打开增量搜索</span><br><span class="line">:<span class="keyword">set</span> incsearch</span><br></pre></td></tr></table></figure><h4 id="如何快速纠错"><a href="#如何快速纠错" class="headerlink" title="如何快速纠错"></a>如何快速纠错</h4><ul><li><code>ctrl + h</code>删除上一个字符</li><li><code>ctrl + w</code>删除上一个单词</li><li><code>ctrl + u</code>删除当前行</li></ul><h4 id="Vim快速移动"><a href="#Vim快速移动" class="headerlink" title="Vim快速移动"></a>Vim快速移动</h4><ul><li>h左移</li><li>j下移</li><li>k上移</li><li>l右移</li></ul><h4 id="在单词间切换"><a href="#在单词间切换" class="headerlink" title="在单词间切换"></a>在单词间切换</h4><ul><li>w/W 移动到下一个word/WORD开头，e/E移动到下一个word/WORD结尾</li><li>b/B 回到上一个word/WORD开头，可以理解为backword</li><li>word指的是以非空白符分割的单词，WORD以空白符分割的单词</li></ul><h4 id="行间搜索移动"><a href="#行间搜索移动" class="headerlink" title="行间搜索移动"></a>行间搜索移动</h4><blockquote><p>同一行快速移动的方式是搜索一个字符并且快速移动到该字符</p></blockquote><ul><li>使用<code>f{char}</code>可以移动到char字符上，t移动到char的前一个字符</li><li>如果第一次没搜到，可以用分号(;)/逗号(,)继续搜索该行下一个/上一个</li><li>F表示反过来搜索前面的字符</li></ul><h4 id="Vim水平移动"><a href="#Vim水平移动" class="headerlink" title="Vim水平移动"></a>Vim水平移动</h4><ul><li>0移动到行首第一个字符，^移动到第一个非空白字符</li><li>$移动到行尾，g_移动到行尾非空白字符</li><li>常用的0和$就可以满足日常需求</li></ul><h4 id="Vim垂直移动"><a href="#Vim垂直移动" class="headerlink" title="Vim垂直移动"></a>Vim垂直移动</h4><blockquote><p>可以安装easy-motion插件移动</p></blockquote><ul><li>使用括号()在句子间移动</li><li>使用{}在段落间移动</li><li>:help可以查看帮助</li></ul><h4 id="页面移动"><a href="#页面移动" class="headerlink" title="页面移动"></a>页面移动</h4><ul><li>gg/G移动到文件开头和结尾</li><li>Ctrl + o快速返回</li><li>H/M/L跳转到屏幕的开头(Head)，中间(Middle)和结尾(Lower)</li><li>Ctrl + u. Ctrl + f. 上下翻页。(upword/forward)。zz置屏幕到中间。</li></ul><h3 id="Vim快速增删改查"><a href="#Vim快速增删改查" class="headerlink" title="Vim快速增删改查"></a>Vim快速增删改查</h3><h4 id="Vim新增"><a href="#Vim新增" class="headerlink" title="Vim新增"></a>Vim新增</h4><ul><li>i (insert)光标前输入</li><li>a (append)光标后追加输入</li><li>o (open a line below)光标下一行输入</li><li>A (append after line)光标所在行末尾输入</li><li>I (insert before line)光标所在行行首输入</li><li>O (append line above)光标所在行上一行输入</li></ul><h4 id="Vim删除"><a href="#Vim删除" class="headerlink" title="Vim删除"></a>Vim删除</h4><ul><li>vim在normal模式下使用x删除一个字符</li><li>使用d(delete)配合文本对象删除一个单词daw/diw(不包含单词后的空白)/dw(delete around word)</li><li>dd删除一行</li><li>dt{char}删除到x的内容(delete to char)</li><li>d0删除到行首，d$删除到行尾</li><li>d和x配合数字来执行多次</li><li>2dd删除两行，4x删除4个字符</li></ul><h4 id="Vim修改"><a href="#Vim修改" class="headerlink" title="Vim修改"></a>Vim修改</h4><ul><li>常用r(replace)，c(change)，s(substitute)</li><li>normal模式下使用r替换一个字符。s替换一个字符并进入插入模式(编辑模式)</li><li>4s删除4个字符并进入插入模式</li><li>使用c配合文本对象快速进行修改</li><li>R(修改光标位置的字符，覆盖掉旧的字符)</li><li>S(删除光标行，并进入编辑模式)</li><li>caw/cw/ciw(删除当前单词，并进入编辑模式)</li><li>C(删除到行尾，并进入编辑模式)</li><li>ct{char}(删除到char字符，并进入编辑模式)</li></ul><h4 id="Vim查询"><a href="#Vim查询" class="headerlink" title="Vim查询"></a>Vim查询</h4><ul><li>使用<code>/</code>或者<code>?</code>进行先前或反向搜索</li><li>使用n/N跳转到下一个或者上一个匹配</li><li>使用*或者#进行当前单词的向前和向后匹配</li></ul><h4 id="Vim搜索替换"><a href="#Vim搜索替换" class="headerlink" title="Vim搜索替换"></a>Vim搜索替换</h4><blockquote><p>substitute命令允许查找并替换掉文本，且支持正则表达式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:[range]s[ubstitute]/&#123;pattern&#125;/&#123;string&#125;/[flags]</span><br><span class="line"># 将word单词替换成replace(不包含w_word类型)</span><br><span class="line">:% s/\&lt;word\&gt;/replace/g</span><br></pre></td></tr></table></figure><ul><li>range表示范围，如：10,20表示10-20行，%表示全部</li><li>pattern是要替换的模式，string是替换后的字符文本</li><li>flags常用的标志</li><li>g(global)表示全局范围执行</li><li>c(confirm)表示确认，可以确认或者拒绝修改</li><li>n(number)报告匹配到的次数而不替换，可以查询匹配次数</li></ul><h3 id="Vim多文件操作"><a href="#Vim多文件操作" class="headerlink" title="Vim多文件操作"></a>Vim多文件操作</h3><blockquote><p>多文件操作相关名词</p></blockquote><ul><li>Buffer是指打开一个文件的内存缓冲区</li><li>Window(窗口)是Buffer可视化的分割区域</li><li>Tab可以组织窗口为一个工作区</li></ul><h4 id="Vim的Buffer缓冲区"><a href="#Vim的Buffer缓冲区" class="headerlink" title="Vim的Buffer缓冲区"></a>Vim的Buffer缓冲区</h4><ul><li>Vim打开一个文件后会加载文件内容到缓冲区</li><li>之后的修改都是针对内存中的缓冲区，并不会直接保存到文件磁盘</li><li>直到在命令模式执行:w(write)的时候才会把修改内容写入到文件里</li></ul><blockquote><p>buffer之间切换</p></blockquote><ul><li>使用:ls会列举当前的缓冲区</li><li>使用:b n跳转到第n个缓冲区</li><li>:bpre 上一个 :bnext 下一个 :bfirst 第一个 :blast 最后一个</li><li>用:b buffer_name加上tab补全来跳转</li></ul><h4 id="Vim的Window窗口"><a href="#Vim的Window窗口" class="headerlink" title="Vim的Window窗口"></a>Vim的Window窗口</h4><blockquote><p>Vim窗口是可视化的分割区域</p></blockquote><blockquote><p>一个缓冲区可以分割成多个窗口，每个窗口可以打开不同的缓冲区</p></blockquote><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td>&lt; Ctrl + w &gt; s</td><td>水平分割，或者:sp</td></tr><tr><td>&lt; Ctrl + w &gt; v</td><td>垂直分割，或者:vs</td></tr><tr><td>&lt; Ctrl + w &gt; w</td><td>在窗口间循环切换</td></tr><tr><td>&lt; Ctrl + w &gt; h</td><td>切换到左边窗口</td></tr><tr><td>&lt; Ctrl + w &gt; j</td><td>切换到下边窗口</td></tr><tr><td>&lt; Ctrl + w &gt; k</td><td>切换到上边窗口</td></tr><tr><td>&lt; Ctrl + w &gt; l</td><td>切换到右边窗口</td></tr><tr><td>&lt; Ctrl + w &gt; =</td><td>使所有窗口登高、等宽</td></tr><tr><td>&lt; Ctrl + w &gt; _</td><td>最大化活动窗口的高度</td></tr><tr><td>&lt; Ctrl + w &gt; |</td><td>最大化活动窗口的宽度</td></tr><tr><td>[N]&lt; Ctrl + w &gt; _</td><td>把活动窗口的高度设为[N]行</td></tr><tr><td>[N]&lt; Ctrl + w &gt; |</td><td>把活动窗口的宽度设为[N]列</td></tr></tbody></table><h4 id="Vim的Tab-标签页-将窗口分组"><a href="#Vim的Tab-标签页-将窗口分组" class="headerlink" title="Vim的Tab(标签页)将窗口分组"></a>Vim的Tab(标签页)将窗口分组</h4><blockquote><p>Vim的Tab是可以容纳一系列窗口的容器(:h tabpage)</p></blockquote><ul><li>Vim的Tab和其他编辑器不太一样，可以比喻成Linux的虚拟桌面</li><li>比如一个Tab全用来编辑Python文件，一个Tab全是HTML文件</li><li>相比窗口，Tab一般用的比较少，Tab太多管理比较麻烦</li></ul><h5 id="Tab-标签页-操作"><a href="#Tab-标签页-操作" class="headerlink" title="Tab(标签页)操作"></a>Tab(标签页)操作</h5><blockquote><p>Tab使用不多，简单了解常用的操作</p></blockquote><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td>:tabe[dit] {filename}</td><td>在新标签页中大开{filename}</td></tr><tr><td>&lt; Ctrl + w &gt;T</td><td>把当前窗口移动到一个新标签页</td></tr><tr><td>:tabc[lose]</td><td>关闭当前标签页及其中的所有窗口</td></tr><tr><td>:tabo[nly]</td><td>只保留活动标签页，关闭所有其他标签页</td></tr></tbody></table><blockquote><p>如何切换不同的标签页，一般两个就好，太多反而操作繁琐</p></blockquote><table><thead><tr><th>EX命令</th><th>普通模式命令</th><th>用途</th></tr></thead><tbody><tr><td>:tabn[ext] {N}</td><td>{N}gt</td><td>切换到编号为{N}的标签页</td></tr><tr><td>:tabn[ext]</td><td>gt</td><td>切换到下一标签页</td></tr><tr><td>:tabp[revious]</td><td>gT</td><td>切换到上一标签页</td></tr></tbody></table><h3 id="Vim的复制粘贴与寄存器"><a href="#Vim的复制粘贴与寄存器" class="headerlink" title="Vim的复制粘贴与寄存器"></a>Vim的复制粘贴与寄存器</h3><h4 id="normal模式下复制粘贴"><a href="#normal模式下复制粘贴" class="headerlink" title="normal模式下复制粘贴"></a>normal模式下复制粘贴</h4><ul><li>normal模式下复制粘贴分别使用y(yank)和p(put)，剪贴d和p</li><li>使用v(visual)命令选中所要复制的地方，然后使用p粘贴</li><li>配合文本对象:比如使用yiw复制一个单词，yy复制一行</li></ul><blockquote><p>Vim里的剪贴(cut)复制(copy)粘贴(paste)分别是delete/yank/put</p></blockquote><h4 id="insert模式下复制粘贴"><a href="#insert模式下复制粘贴" class="headerlink" title="insert模式下复制粘贴"></a>insert模式下复制粘贴</h4><ul><li>和平常文本编辑器差不多，但粘贴可能会有缩进问题</li><li>:set autoindent设置自动缩进，代码粘贴缩进还是错乱</li><li>使用:set paste后粘贴，代码错乱解决，自动缩进没了，:set nopaste后恢复</li></ul><h4 id="Vim的寄存器"><a href="#Vim的寄存器" class="headerlink" title="Vim的寄存器"></a>Vim的寄存器</h4><ul><li>Vim里操作的是寄存器而不是系统剪贴板，和其他编辑器不同</li><li>默认使用d删除或者y复制的内容都放到<code>无名寄存器</code></li><li>用x删除一个字符放到无名寄存器，然后p粘贴，可调换俩字符位置</li></ul><blockquote><p>Vim不使用单一的剪贴板进行剪贴、复制与粘贴，而是多组寄存器</p></blockquote><ul><li>通过<code>&quot;{register}</code>前缀可以指定寄存器，不指定默认用<code>无名寄存器</code></li><li>使用<code>&quot;ayiw</code>复制一个单词到寄存器a中，<code>&quot;bdd</code>删除当前行到寄存器b中</li><li>Vim中 <code>&quot;&quot;</code>表示无名寄存器，缺省使用。<code>&quot;&quot;</code>p等同于p</li></ul><blockquote><p>除了有名的寄存器a-z，Vim中还有一些其他常见寄存器</p></blockquote><ul><li>复制专用寄存器<code>&quot;0</code>使用y复制文本的同时会被拷贝到复制寄存器0</li><li>系统剪贴板<code>&quot;+</code>可以在复制前加上<code>&quot;+</code>复制到系统剪贴板</li><li>其他寄存器如<code>&quot;%</code>当前文件名，<code>&quot;.</code>上次插入的文本</li></ul><p>查看是否支持系统剪贴板</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 输出：<span class="number">1</span>支持<span class="number">0</span>不支持</span><br><span class="line">:<span class="keyword">echo</span> <span class="built_in">has</span>(<span class="string">'clipboard'</span>)</span><br><span class="line"># 设置<span class="keyword">vim</span>直接复制粘贴系统剪贴板内容</span><br><span class="line">:<span class="keyword">set</span> clipboard=unnamed</span><br></pre></td></tr></table></figure><h3 id="Vim强大的宏-macro-Vim的批量编辑"><a href="#Vim强大的宏-macro-Vim的批量编辑" class="headerlink" title="Vim强大的宏(macro) - Vim的批量编辑"></a>Vim强大的宏(macro) - Vim的批量编辑</h3><ul><li>宏可以看出是一系列命令的集合</li><li>可以使用宏<strong>录制</strong>一系列操作，然后<strong>回放</strong></li><li>宏可以非常方便把一系列命令用在多文本上</li></ul><h4 id="如何使用宏"><a href="#如何使用宏" class="headerlink" title="如何使用宏"></a>如何使用宏</h4><ul><li>Vim使用q来录制，同时也是使用q结束录制</li><li>使用<code>q{register}</code>选择要保存的寄存器，把录制命令保存其中</li><li>使用<code>@{register}</code>回放寄存器中保存的一系列命令</li></ul><h3 id="Vim的补全"><a href="#Vim的补全" class="headerlink" title="Vim的补全"></a>Vim的补全</h3><ul><li>补全是根据当前环境上下文由编辑器<code>猜</code>你想输入的东西</li><li>如补全一个单词、文件名，或者代码中的函数名、变量名等</li><li>Vim中提供了多种补全功能，还可以由插件拓展功能实现代码补全</li></ul><p>Vim中有很多种补全方式</p><table><thead><tr><th>命令</th><th align="left">补全类型</th></tr></thead><tbody><tr><td>&lt; Ctrl - n &gt;</td><td align="left">补全关键字</td></tr><tr><td>&lt; Ctrl - x &gt; &lt; Ctrl - n &gt;</td><td align="left">当前缓冲区关键字</td></tr><tr><td>&lt; Ctrl - x &gt; &lt; Ctrl - i &gt;</td><td align="left">包含文件关键字</td></tr><tr><td>&lt; Ctrl - x &gt; &lt; Ctrl - j &gt;</td><td align="left">标签文件关键字</td></tr><tr><td>&lt; Ctrl - x &gt; &lt; Ctrl - k &gt;</td><td align="left">字典查找</td></tr><tr><td>&lt; Ctrl - x &gt; &lt; Ctrl - l &gt;</td><td align="left">整行补全</td></tr><tr><td>&lt; Ctrl - x &gt; &lt; Ctrl - f &gt;</td><td align="left">文件名补全</td></tr><tr><td>&lt; Ctrl - x &gt; &lt; Ctrl - o &gt;</td><td align="left">全能(Omni)补全</td></tr></tbody></table><p>常见的有以下几种类型:</p><ul><li>使用 ctrl + n 和 ctrl + p 补全单词</li><li>使用 ctrl + x 和 ctrl + f 补全文件名</li><li>使用 ctrl + x 和 ctrl + o 补全代码，需要开启文件类型检查，安装插件</li></ul><p>插入文件名</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:r! <span class="keyword">echo</span> %</span><br></pre></td></tr></table></figure><p>插入文件名全路径</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:r! <span class="keyword">echo</span> %:<span class="keyword">p</span></span><br></pre></td></tr></table></figure><p>more info</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">help</span> <span class="keyword">read</span></span><br><span class="line">:<span class="keyword">help</span> filename-modifiers</span><br></pre></td></tr></table></figure><h3 id="给Vim更换配色"><a href="#给Vim更换配色" class="headerlink" title="给Vim更换配色"></a>给Vim更换配色</h3><ul><li>使用：<code>colorscheme</code>显示当前的主题配色，默认default</li><li>使用：<code>colorscheme &lt;ctrl+d&gt;</code> 可以显示所有的配色</li><li>用：<code>colorscheme 配色名</code>，就可以修改配色</li><li><a href="https://github.com/flazz/vim-colorschemes" rel="external nofollow noopener noreferrer" target="_blank">GitHub配色</a></li></ul><h3 id="Vim的配置"><a href="#Vim的配置" class="headerlink" title="Vim的配置"></a>Vim的配置</h3><ul><li>Vim里非常常用的设置，如：<code>set number</code>设置行号</li><li>底线命令模式的配置都是Vim里临时设置，没法持久化</li><li>Vimrc提供了一种持久化配置的方式</li></ul><h4 id="编写Vim配置文件"><a href="#编写Vim配置文件" class="headerlink" title="编写Vim配置文件"></a>编写Vim配置文件</h4><ul><li>Liunx/Unix下新建一个隐藏文件vim ~/.vimrc</li><li>windows系统vim $MYVIMRC，通过环境变量编辑配置文件</li></ul><h4 id="Vim相关配置"><a href="#Vim相关配置" class="headerlink" title="Vim相关配置"></a>Vim相关配置</h4><ul><li>常用设置，如:set nu设置行号，colorscheme hybrid设置主题</li><li>常用Vim映射，比如noremap &lt; leader &gt;w : w&lt; cr &gt; 保存文件</li><li>自定义vimscript函数和插件配置</li></ul><p>vimrc配置参考</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">" 常用设置</span></span><br><span class="line"><span class="comment">" 设置行号</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">number</span></span><br><span class="line"><span class="keyword">colorscheme</span> hybrid</span><br><span class="line"><span class="comment">" 按F2进入粘贴模式</span></span><br><span class="line"><span class="keyword">set</span> pastetoggle=<span class="symbol">&lt;F2&gt;</span></span><br><span class="line"><span class="comment">" 高亮搜索</span></span><br><span class="line"><span class="keyword">set</span> hlsearch</span><br><span class="line"><span class="comment">" 设置折叠方式</span></span><br><span class="line"><span class="keyword">set</span> foldmethod=<span class="built_in">indent</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" 一些方便的映射</span></span><br><span class="line"><span class="keyword">let</span> mapleader=<span class="string">","</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:mapleader</span>=<span class="string">","</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" 使用 jj 进入normal模式，`^表示上一次编辑模式的位置，这里进入normal模式保持光标不变</span></span><br><span class="line"><span class="keyword">inoremap</span> jj <span class="symbol">&lt;Esc&gt;</span>`^</span><br><span class="line"><span class="comment">" 使用 leader+w 直接保存</span></span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;leader&gt;</span><span class="keyword">w</span> <span class="symbol">&lt;Esc&gt;</span>:<span class="keyword">w</span><span class="symbol">&lt;cr&gt;</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;leader&gt;</span><span class="keyword">w</span> :<span class="keyword">w</span><span class="symbol">&lt;cr&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" 切换 buffer</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span> [<span class="keyword">b</span> :<span class="keyword">bprevious</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span> [n :<span class="keyword">bnext</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" 用 ctrl+h/j/k/l swith window</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;C-h&gt;</span> <span class="symbol">&lt;C-w&gt;</span>h</span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;C-j&gt;</span> <span class="symbol">&lt;C-w&gt;</span><span class="keyword">j</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;C-k&gt;</span> <span class="symbol">&lt;C-w&gt;</span><span class="keyword">k</span></span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;C-l&gt;</span> <span class="symbol">&lt;C-w&gt;</span><span class="keyword">l</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" sudo方式写入</span></span><br><span class="line"><span class="keyword">cnoremap</span> w!! <span class="keyword">w</span> !sudo tee % &gt;/dev/null</span><br><span class="line"><span class="comment">" json格式化</span></span><br><span class="line">com! FormatJSON %!python3 -<span class="keyword">m</span> json.tool</span><br><span class="line"></span><br><span class="line"><span class="comment">" 插件设置，这里使用了vim-plug</span></span><br><span class="line"><span class="keyword">call</span> plug#begin(<span class="string">'~/.vim/plugged'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">" 安装插件只需要把 Github 地址放到这里重启后执行 :PlugInstall</span></span><br><span class="line">Plug <span class="string">'mhinz/vim-startify'</span></span><br><span class="line">Plug <span class="string">'scrooloose/nerdtrre'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看<span class="keyword">vim</span>所有设置选项</span><br><span class="line">:h option-<span class="keyword">list</span></span><br></pre></td></tr></table></figure><h4 id="Vim中的映射-修改默认快捷键配置"><a href="#Vim中的映射-修改默认快捷键配置" class="headerlink" title="Vim中的映射(修改默认快捷键配置)"></a>Vim中的映射(修改默认快捷键配置)</h4><blockquote><p>Vim中映射复杂，源于vim有多种模式</p></blockquote><ul><li>设置leader键let mapleader = “,” 常用逗号或者空格</li><li>用inoremap <code>&lt;leader&gt;w &lt;Esc&gt;:w&lt;cr&gt;</code> 在插入模式保存 </li></ul><p>基本映射</p><ul><li>使用map，如<code>:map - x</code>然后按-就会删除字符</li><li><code>:map &lt;sapce&gt; viw</code> 映射vim空格选中整个单词</li><li><code>:map &lt;c-d&gt; dd</code> 就可以使用ctrl + d执行dd删除一行</li><li><code>:unmap -</code>取消-的映射</li></ul><p>常用模式normal/visual/insert模式定义映射</p><ul><li>用nmap/vmap/imap定义映射只在normal/visual/insert模式分别有效</li><li><code>:vmap \ U</code>把在visual模式下选中的文本大小(u/U转换大小写)</li></ul><p>递归解释，<code>\</code>将删除整行</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">nmap</span> - dd</span><br><span class="line">:<span class="keyword">nmap</span> \ -</span><br></pre></td></tr></table></figure><p>非递归映射</p><ul><li>使用nnoremap/vnoremap/inoremap映射</li><li>尽量全部使用非递归映射</li></ul><h3 id="Vim如何安装插件"><a href="#Vim如何安装插件" class="headerlink" title="Vim如何安装插件"></a>Vim如何安装插件</h3><ul><li>直接通过clone插件代码,选择一个插件管理器</li><li>常见的有vim-plug，Vundle，Pathogen，Dein.Vim，volt等</li><li><a href="https://www.slant.co/topics/1224/~best-plugin-managers-for-vim" rel="external nofollow noopener noreferrer" target="_blank">推荐vim-plug</a></li></ul><h4 id="vim-plug插件安装"><a href="#vim-plug插件安装" class="headerlink" title="vim-plug插件安装"></a>vim-plug插件安装</h4><ul><li><a href="https://github.com/junegunn/vim-plug" rel="external nofollow noopener noreferrer" target="_blank">vim-plug GitHub地址</a></li></ul><p>Unix安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fLo ~/.vim/<span class="built_in">autoload</span>/plug.vim --create-dirs \</span><br><span class="line">    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br></pre></td></tr></table></figure><p>Windows (PowerShell)安装</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">md</span> ~\vimfiles\autoload</span><br><span class="line">$uri = 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'</span><br><span class="line">(New-Object <span class="built_in">Net</span>.WebClient).DownloadFile(</span><br><span class="line">  $uri,</span><br><span class="line">  $ExecutionContext.SessionState.<span class="built_in">Path</span>.GetUnresolvedProviderPathFromPSPath(</span><br><span class="line">    "~\vimfiles\autoload\plug.vim"</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>.vimrc中配置示例</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">" Specify a directory for plugins</span></span><br><span class="line"><span class="comment">" - For Neovim: stdpath('data') . '/plugged'</span></span><br><span class="line"><span class="comment">" - Avoid using standard Vim directory names like 'plugin'</span></span><br><span class="line"><span class="keyword">call</span> plug#begin(<span class="string">'~/.vim/plugged'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">" Make sure you use single quotes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align</span></span><br><span class="line">Plug <span class="string">'junegunn/vim-easy-align'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Any valid git URL is allowed</span></span><br><span class="line">Plug <span class="string">'https://github.com/junegunn/vim-github-dashboard.git'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Multiple Plug commands can be written in a single line using | separators</span></span><br><span class="line">Plug <span class="string">'SirVer/ultisnips'</span> | Plug <span class="string">'honza/vim-snippets'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" On-demand loading</span></span><br><span class="line">Plug <span class="string">'scrooloose/nerdtree'</span>, &#123; <span class="string">'on'</span>:  <span class="string">'NERDTreeToggle'</span> &#125;</span><br><span class="line">Plug <span class="string">'tpope/vim-fireplace'</span>, &#123; <span class="string">'for'</span>: <span class="string">'clojure'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">" Using a non-master branch</span></span><br><span class="line">Plug <span class="string">'rdnetto/YCM-Generator'</span>, &#123; <span class="string">'branch'</span>: <span class="string">'stable'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">" Using a tagged release; wildcard allowed (requires git 1.9.2 or above)</span></span><br><span class="line">Plug <span class="string">'fatih/vim-go'</span>, &#123; <span class="string">'tag'</span>: <span class="string">'*'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">" Plugin options</span></span><br><span class="line">Plug <span class="string">'nsf/gocode'</span>, &#123; <span class="string">'tag'</span>: <span class="string">'v.20150303'</span>, <span class="string">'rtp'</span>: <span class="string">'vim'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">" Plugin outside ~/.vim/plugged with post-update hook</span></span><br><span class="line">Plug <span class="string">'junegunn/fzf'</span>, &#123; <span class="string">'dir'</span>: <span class="string">'~/.fzf'</span>, <span class="string">'do'</span>: <span class="string">'./install --all'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">" Unmanaged plugin (manually installed and updated)</span></span><br><span class="line">Plug <span class="string">'~/my-prototype-plugin'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Initialize plugin system</span></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br></pre></td></tr></table></figure><p>重新加载<code>source .vimrc</code>并且在vim命令行执行<code>:PlugInstall</code>安装插件.</p><h4 id="推荐vim插件"><a href="#推荐vim插件" class="headerlink" title="推荐vim插件"></a>推荐vim插件</h4><ul><li><a href="https://github.com/mhinz/vim-startify" rel="external nofollow noopener noreferrer" target="_blank">vim-startify修改启动界面</a></li><li><a href="https://github.com/vim-airline/vim-airline" rel="external nofollow noopener noreferrer" target="_blank">vim-airline状态栏美化</a></li><li><a href="https://github.com/yggdroot/indentline" rel="external nofollow noopener noreferrer" target="_blank">indentline增加代码缩进线条</a></li><li><a href="https://github.com/w0ng/vim-hybrid" rel="external nofollow noopener noreferrer" target="_blank">hybird配色</a></li><li><a href="https://github.com/altercation/vim-colors-solarized" rel="external nofollow noopener noreferrer" target="_blank">solarized配色</a></li><li><a href="https://github.com/morhetz/gruvbox" rel="external nofollow noopener noreferrer" target="_blank">gruvbox配色</a></li><li><a href="https://github.com/ctrlpvim/ctrlp.vim" rel="external nofollow noopener noreferrer" target="_blank">ctrlp模糊搜索文件并打开</a></li><li><a href="https://github.com/easymotion/vim-easymotion" rel="external nofollow noopener noreferrer" target="_blank">easymotion移动跳转插件</a></li><li><a href="https://github.com/tpope/vim-surround" rel="external nofollow noopener noreferrer" target="_blank">surround快速编辑成对的符号</a></li><li><a href="https://github.com/junegunn/fzf.vim" rel="external nofollow noopener noreferrer" target="_blank">fzf模糊搜索工具</a></li><li><a href="https://github.com/brooth/far.vim" rel="external nofollow noopener noreferrer" target="_blank">far搜索替换工具</a></li><li><a href="https://github.com/fatih/vim-go" rel="external nofollow noopener noreferrer" target="_blank">vim-go golang语言插件</a></li><li><a href="https://github.com/python-mode/python-mode" rel="external nofollow noopener noreferrer" target="_blank">python-mode python语言插件</a></li><li><a href="https://github.com/majutsushi/tagbar" rel="external nofollow noopener noreferrer" target="_blank">tagbar代码大纲浏览插件</a> </li><li><a href="https://github.com/lfv89/vim-interestingwords" rel="external nofollow noopener noreferrer" target="_blank">interestingwords高亮变量单词</a></li><li><a href="https://github.com/shougo/deoplete.nvim" rel="external nofollow noopener noreferrer" target="_blank">deoplete异步代码补全</a></li><li><a href="https://github.com/neoclide/coc.nvim" rel="external nofollow noopener noreferrer" target="_blank">coc强大的neovim/vim8补全插件，LSP支持</a></li><li><a href="https://github.com/sbdchd/neoformat" rel="external nofollow noopener noreferrer" target="_blank">neoformat代码格式化插件</a></li><li><a href="https://github.com/chiel92/vim-autoformat" rel="external nofollow noopener noreferrer" target="_blank">autoformat格式化插件</a></li><li><a href="https://github.com/neomake/neomake" rel="external nofollow noopener noreferrer" target="_blank">neomake静态检查插件</a></li><li><a href="https://github.com/w0rp/ale" rel="external nofollow noopener noreferrer" target="_blank">ale静态检查lint插件</a></li><li><a href="https://github.com/tpope/vim-commentary" rel="external nofollow noopener noreferrer" target="_blank">commentary快速注释插件</a></li><li><a href="https://github.com/tpope/vim-fugitive" rel="external nofollow noopener noreferrer" target="_blank">fugitive vim的git插件</a></li><li><a href="https://github.com/airblade/vim-gitgutter" rel="external nofollow noopener noreferrer" target="_blank">vim-gitgutter vim显示文件改动</a></li><li><a href="https://github.com/junegunn/gv.vim" rel="external nofollow noopener noreferrer" target="_blank">gv命令行查看提交记录</a></li></ul><h4 id="Vim配置推荐"><a href="#Vim配置推荐" class="headerlink" title="Vim配置推荐"></a>Vim配置推荐</h4><ul><li><a href="https://github.com/SpaceVim/SpaceVim" rel="external nofollow noopener noreferrer" target="_blank">SpaceVim</a></li><li><a href="https://github.com/PegasusWang/vim-config" rel="external nofollow noopener noreferrer" target="_blank">vim-config</a></li></ul><h4 id="如何搜寻vim插件"><a href="#如何搜寻vim插件" class="headerlink" title="如何搜寻vim插件"></a>如何搜寻vim插件</h4><ul><li>搜索引擎搜索查找插件</li><li><a href="https://vimawesome.com" rel="external nofollow noopener noreferrer" target="_blank">Vim Awesome</a></li><li>网上开源的vim配置借鉴想要的插件</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vim是一个类似于Vi的著名的功能强大、高度可定制的文本编辑器，在Vi的基础上改进和增加了很多特性。VIM是自由软件。Vim普遍被推崇为类Vi编辑器中最好的一个，事实上真正的劲敌来自Emacs的不同变体。1999 年Emacs被选为Linuxworld文本编辑分类的优胜者，Vim屈居第二。但在2000年2月Vim赢得了Slashdot Beanie的最佳开放源代码文本编辑器大奖，又将Emacs推至二线， 总的来看， Vim和Emacs在文本编辑方面都是非常优秀的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CentOS" scheme="https://blog.liuchaoming.cn/categories/CentOS/"/>
    
    
      <category term="Vim" scheme="https://blog.liuchaoming.cn/tags/Vim/"/>
    
      <category term="Vi" scheme="https://blog.liuchaoming.cn/tags/Vi/"/>
    
  </entry>
  
  <entry>
    <title>git常用操作和问题总结</title>
    <link href="https://blog.liuchaoming.cn/posts/19017/"/>
    <id>https://blog.liuchaoming.cn/posts/19017/</id>
    <published>2019-11-19T22:28:51.000Z</published>
    <updated>2019-12-23T07:49:47.561Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>我们首先将一个已存在的 Git 仓库添加为正在工作的仓库的子模块。 你可以通过在 <code>git submodule add</code> 命令后面加上想要跟踪的项目 URL 来添加新的子模块。 例如添加一个名为 “Connector” 的库。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git submodule add https://github.com/xxx/Connector</span><br><span class="line">Cloning into &apos;DbConnector&apos;...</span><br><span class="line">remote: Counting objects: 11, done.</span><br><span class="line">remote: Compressing objects: 100% (10/10), done.</span><br><span class="line">remote: Total 11 (delta 0), reused 11 (delta 0)</span><br><span class="line">Unpacking objects: 100% (11/11), done.</span><br><span class="line">Checking connectivity... done.</span><br></pre></td></tr></table></figure><p>2、每次更新.gitmodules文件, 必须同步下(git submodule sync), 否则识别不到.</p><p>3、如何为一个项目添加一个子项目呢? git submodule add 项目地址, 然后push到<br>你的远程仓库(如gitlab/github)，你可以在项目里看到“子项目名+@+序列号”的链接.</p><p>4、如何删除submodule呢?  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm &lt;submodule-name&gt; || git submodule deinit &lt;submodule-name&gt;</span><br></pre></td></tr></table></figure><p>5、一旦依赖的子项目过多(比如80个), 该如何批量操作呢?  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git submodule foreach &lt;command&gt;  </span><br><span class="line">eg: git submodule foreach git checkout master</span><br><span class="line"># 该命令会按照.gitmodules里的path寻找所有的三方模块,并在每一个模块中都执行foreach后的命令</span><br><span class="line">eg: git submodule foreach git submodule update</span><br></pre></td></tr></table></figure><p>6、更新了子项目, 那么父项目也需要更新. 即子项目属于父项目的一部分, 在子项目commit后, 父也需要.</p><p>7、如何将一个包含子项目的项目所有内容都clone下来呢?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://xxx.xxx.xxx/xxx/xxx.git</span><br><span class="line">git submodule init &amp;&amp; git submodule update</span><br><span class="line"># 下面这一句的效果和上面三条命令的效果是一样的,多加了个参数  `--recursive`</span><br><span class="line">git clone https://xxx.xxx.xxx/xxx/xxx.git --recursive</span><br></pre></td></tr></table></figure><p><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97" rel="external nofollow noopener noreferrer" target="_blank">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Git" scheme="https://blog.liuchaoming.cn/categories/Git/"/>
    
    
      <category term="Git" scheme="https://blog.liuchaoming.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>配置虚拟机桥接模式网络</title>
    <link href="https://blog.liuchaoming.cn/posts/4143/"/>
    <id>https://blog.liuchaoming.cn/posts/4143/</id>
    <published>2019-11-14T21:01:14.000Z</published>
    <updated>2019-12-23T07:49:47.561Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>虚拟机CentOS7系统桥接模式网络配置。</p><a id="more"></a><h3 id="配置ip地址等信息在-etc-sysconfig-network-scripts-ifcfg-eth0文件-可能文件名不一样，和网卡名有关"><a href="#配置ip地址等信息在-etc-sysconfig-network-scripts-ifcfg-eth0文件-可能文件名不一样，和网卡名有关" class="headerlink" title="配置ip地址等信息在/etc/sysconfig/network-scripts/ifcfg-eth0文件(可能文件名不一样，和网卡名有关)"></a>配置ip地址等信息在/etc/sysconfig/network-scripts/ifcfg-eth0文件(可能文件名不一样，和网卡名有关)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure><p>修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;   # 网络类型为以太网</span><br><span class="line">BOOTPROTO=&quot;static&quot;  # 手动分配ip</span><br><span class="line">NAME=&quot;eth0&quot;  # 网卡设备名，设备名一定要跟文件名一致</span><br><span class="line">DEVICE=&quot;eth0&quot;  # 网卡设备名，设备名一定要跟文件名一致</span><br><span class="line">ONBOOT=&quot;yes&quot;  # 该网卡是否随网络服务启动</span><br><span class="line">IPADDR=&quot;192.168.22.101&quot;  # 该网卡ip地址就是你要配置的固定IP，如果你要用xshell等工具连接，22这个网段最好和你自己的电脑网段一致，否则有可能用xshell连接失败且连接不上网</span><br><span class="line">GATEWAY=&quot;192.168.22.1&quot;   # 网关</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;   # 子网掩码</span><br><span class="line">DNS1=&quot;8.8.8.8&quot;    # DNS，8.8.8.8为Google提供的免费DNS服务器的IP地址</span><br></pre></td></tr></table></figure><h3 id="配置网络工作"><a href="#配置网络工作" class="headerlink" title="配置网络工作"></a>配置网络工作</h3><p>在/etc/sysconfig/network文件中增加以下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network</span><br><span class="line"></span><br><span class="line"># 修改</span><br><span class="line">NETWORKING=yes #网络是否工作，一定不能是no</span><br></pre></td></tr></table></figure><h3 id="配置公共DNS服务"><a href="#配置公共DNS服务" class="headerlink" title="配置公共DNS服务"></a>配置公共DNS服务</h3><p>在/etc/resolv.conf文件中增加以下配置(可选)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameserver 8.8.8.8</span><br></pre></td></tr></table></figure><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld <span class="comment"># 临时关闭</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld <span class="comment"># 禁止开机启动</span></span><br></pre></td></tr></table></figure><h3 id="重启网络服务"><a href="#重启网络服务" class="headerlink" title="重启网络服务"></a>重启网络服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虚拟机CentOS7系统桥接模式网络配置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CentOS" scheme="https://blog.liuchaoming.cn/categories/CentOS/"/>
    
    
      <category term="CentOS" scheme="https://blog.liuchaoming.cn/tags/CentOS/"/>
    
      <category term="虚拟机" scheme="https://blog.liuchaoming.cn/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
      <category term="网络配置" scheme="https://blog.liuchaoming.cn/tags/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Git设置只需要输入一次密码, 就可以进行pull/push操作，不用每次输入密码</title>
    <link href="https://blog.liuchaoming.cn/posts/62324/"/>
    <id>https://blog.liuchaoming.cn/posts/62324/</id>
    <published>2019-09-28T21:38:08.000Z</published>
    <updated>2019-12-23T07:49:47.561Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>使用https的方式，每次pull或者push都要输入账号密码，这样操作很烦，又不想设置SSH公钥到远程仓库。如下设置即可输入一次就不用再手输入密码的困扰而且又享受https带来的极速和方便。</p><a id="more"></a><p>设置输入一次密码后记住密码（默认时间15分钟）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper cache</span><br></pre></td></tr></table></figure><p>也可以自己设置时间，比如一个小时之后失效，可以这样做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config credential.helper &apos;cache --timeout=3600&apos;</span><br></pre></td></tr></table></figure><p>还可以永久存储密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用https的方式，每次pull或者push都要输入账号密码，这样操作很烦，又不想设置SSH公钥到远程仓库。如下设置即可输入一次就不用再手输入密码的困扰而且又享受https带来的极速和方便。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://blog.liuchaoming.cn/categories/Git/"/>
    
    
      <category term="Git" scheme="https://blog.liuchaoming.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git提交时忽略已提交过且本地修改过的文件</title>
    <link href="https://blog.liuchaoming.cn/posts/58014/"/>
    <id>https://blog.liuchaoming.cn/posts/58014/</id>
    <published>2019-09-26T19:04:27.000Z</published>
    <updated>2019-12-23T07:49:47.561Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>有的时候项目的配置文件和测试环境的不一样，本地开发时需要将配置改为本地的，修改后的文件又不提交到远程仓库，怎么办呢？</p><a id="more"></a><p>可以使用如下命令忽略已经修改后但是不提交的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git update-index --assume-unchanged [file-path]</span><br></pre></td></tr></table></figure><p>重新恢复提交的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git update-index --no-assume-unchanged [file-path]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有的时候项目的配置文件和测试环境的不一样，本地开发时需要将配置改为本地的，修改后的文件又不提交到远程仓库，怎么办呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://blog.liuchaoming.cn/categories/Git/"/>
    
    
      <category term="Git" scheme="https://blog.liuchaoming.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Liunx终端关闭后shell脚本继续运行</title>
    <link href="https://blog.liuchaoming.cn/posts/2849/"/>
    <id>https://blog.liuchaoming.cn/posts/2849/</id>
    <published>2019-09-13T06:22:11.000Z</published>
    <updated>2019-12-23T07:49:47.561Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一直执行的shell脚本，在终端关闭后就会退出，怎么解决？</p><a id="more"></a><p>比如运行xxx.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash xxx.sh</span><br></pre></td></tr></table></figure><p>按下ctrl-z中断脚本运行，此时系统提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^Z</span><br><span class="line">[1]+ Stopped bash xxx.sh</span><br></pre></td></tr></table></figure><p>意思是编号为1的任务挂起了，[1]就是任务的编号，里面的数字也可能是2，3，4…</p><p>输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bg</span> 1</span><br></pre></td></tr></table></figure><p>这个命令将1号任务切换到后台执行</p><p>输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">disown</span> -h %1</span><br></pre></td></tr></table></figure><p>这个命令的是将1号任务从当前shell的任务列表中移除，并且忽略HUP信号(Liunx的中断信号)，这样，即使当前Shell结束了，这个任务也不会被结束，而是继续留在后台执行。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直执行的shell脚本，在终端关闭后就会退出，怎么解决？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Liunx" scheme="https://blog.liuchaoming.cn/categories/Liunx/"/>
    
    
      <category term="Liunx" scheme="https://blog.liuchaoming.cn/tags/Liunx/"/>
    
  </entry>
  
  <entry>
    <title>Docker拉取镜像出错</title>
    <link href="https://blog.liuchaoming.cn/posts/6854/"/>
    <id>https://blog.liuchaoming.cn/posts/6854/</id>
    <published>2019-09-12T21:54:41.000Z</published>
    <updated>2019-12-23T07:49:47.561Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>docker pull镜像的时候出错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Get https://registry-1.docker.io/v2/: dial tcp: lookup registry-1.docker.io on 8.8.8.8:53: too many redirects</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="执行以下命令"><a href="#执行以下命令" class="headerlink" title="执行以下命令"></a>执行以下命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig @114.114.114.114 registry-1.docker.io</span><br></pre></td></tr></table></figure><p>执行后结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.9.4-RedHat-9.9.4-61.el7 &lt;&lt;&gt;&gt; @114.114.114.114 registry-1.docker.io</span><br><span class="line">; (1 server found)</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 52963</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 8, AUTHORITY: 4, ADDITIONAL: 9</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 4096</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;registry-1.docker.io.    IN   A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">registry-1.docker.io.   300 IN   A   3.210.179.11</span><br><span class="line">registry-1.docker.io.   300 IN   A   52.55.198.220</span><br><span class="line">registry-1.docker.io.   300 IN   A   52.70.175.131</span><br><span class="line">registry-1.docker.io.   300 IN   A   54.175.43.85</span><br><span class="line">registry-1.docker.io.   300 IN   A   54.210.105.17</span><br><span class="line">registry-1.docker.io.   300 IN   A   100.24.246.89</span><br><span class="line">registry-1.docker.io.   300 IN   A   54.88.231.116</span><br><span class="line">registry-1.docker.io.   300 IN   A   52.87.94.70</span><br><span class="line"></span><br><span class="line">;; AUTHORITY SECTION:</span><br><span class="line">docker.io.       61407    IN    NS   ns-1168.awsdns-18.org.</span><br><span class="line">docker.io.       61407    IN    NS   ns-421.awsdns-52.com.</span><br><span class="line">docker.io.       61407    IN    NS   ns-1827.awsdns-36.co.uk.</span><br><span class="line">docker.io.       61407    IN    NS   ns-513.awsdns-00.net.</span><br><span class="line"></span><br><span class="line">;; ADDITIONAL SECTION:</span><br><span class="line">ns-1827.awsdns-36.co.uk. 57947    IN    A     205.251.199.35</span><br><span class="line">ns-1827.awsdns-36.co.uk. 57273    IN    AAAA  2600:9000:5307:2300::1</span><br><span class="line">ns-1168.awsdns-18.org.   47450    IN    A     205.251.196.144</span><br><span class="line">ns-1168.awsdns-18.org.   57090    IN    AAAA  2600:9000:5304:9000::1</span><br><span class="line">ns-421.awsdns-52.com.    143703   IN    A     205.251.193.165</span><br><span class="line">ns-421.awsdns-52.com.    57067    IN    AAAA  2600:9000:5301:a500::1</span><br><span class="line">ns-513.awsdns-00.net.    45649    IN    A     205.251.194.1</span><br><span class="line">ns-513.awsdns-00.net.    45650    IN    AAAA  2600:9000:5302:100::1</span><br><span class="line"></span><br><span class="line">;; Query time: 5 msec</span><br><span class="line">;; SERVER: 114.114.114.114#53(114.114.114.114)</span><br><span class="line">;; WHEN: Thu Sep 12 21:50:15 CST 2019</span><br><span class="line">;; MSG SIZE  rcvd: 493</span><br></pre></td></tr></table></figure><h3 id="修改-etc-hosts文件，强制docker-io域名解析到可用IP，添加"><a href="#修改-etc-hosts文件，强制docker-io域名解析到可用IP，添加" class="headerlink" title="修改 /etc/hosts文件，强制docker.io域名解析到可用IP，添加"></a>修改 /etc/hosts文件，强制docker.io域名解析到可用IP，添加</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.210.179.11      registry-1.docker.io</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;docker pull镜像的时候出错&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ERROR: Get https://registry-1.docker.io/v2/: dial tcp: lookup registry-1.docker.io on 8.8.8.8:53: too many redirects&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://blog.liuchaoming.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://blog.liuchaoming.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Liunx记录登录用户和操作记录</title>
    <link href="https://blog.liuchaoming.cn/posts/62916/"/>
    <id>https://blog.liuchaoming.cn/posts/62916/</id>
    <published>2019-09-11T23:15:37.000Z</published>
    <updated>2019-12-23T07:49:47.561Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>通过在/etc/profile里面加入以下代码就可以实现记录登陆后的IP地址和某用户名所操作的历史记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">PS1=<span class="string">"`whoami`@`hostname`:"</span><span class="string">'[$PWD]'</span></span><br><span class="line"><span class="built_in">history</span></span><br><span class="line">USER_IP=`who -u am i 2&gt;/dev/null| awk <span class="string">'&#123;print $NF&#125;'</span>|sed -e <span class="string">'s/[()]//g'</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$USER_IP</span>"</span> = <span class="string">""</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">USER_IP=`hostname`</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d /tmp/dbasky ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">mkdir /tmp/dbasky</span><br><span class="line">chmod 777 /tmp/dbasky</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d /tmp/dbasky/<span class="variable">$&#123;LOGNAME&#125;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">mkdir /tmp/dbasky/<span class="variable">$&#123;LOGNAME&#125;</span></span><br><span class="line">chmod 300 /tmp/dbasky/<span class="variable">$&#123;LOGNAME&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">export</span> HISTSIZE=4096</span><br><span class="line">DT=`date <span class="string">"+%Y-%m-%d_%H:%M:%S"</span>`</span><br><span class="line"><span class="built_in">export</span> HISTFILE=<span class="string">"/tmp/dbasky/<span class="variable">$&#123;LOGNAME&#125;</span>/<span class="variable">$&#123;USER_IP&#125;</span> dbasky.<span class="variable">$DT</span>"</span></span><br><span class="line">chmod 600 /tmp/dbasky/<span class="variable">$&#123;LOGNAME&#125;</span>/*dbasky* 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p>别忘记执行下面命令使脚本生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>/tmp/dbasky/root目录下查看记录信息</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Liunx" scheme="https://blog.liuchaoming.cn/categories/Liunx/"/>
    
    
      <category term="Liunx" scheme="https://blog.liuchaoming.cn/tags/Liunx/"/>
    
  </entry>
  
  <entry>
    <title>Centos7上安装Docker</title>
    <link href="https://blog.liuchaoming.cn/posts/19477/"/>
    <id>https://blog.liuchaoming.cn/posts/19477/</id>
    <published>2019-09-10T21:13:55.000Z</published>
    <updated>2019-12-23T07:49:47.561Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="通过yum源安装docker"><a href="#通过yum源安装docker" class="headerlink" title="通过yum源安装docker"></a>通过yum源安装docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker</span><br></pre></td></tr></table></figure><h3 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://blog.liuchaoming.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://blog.liuchaoming.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker运行mysql挂载数据卷权限问题</title>
    <link href="https://blog.liuchaoming.cn/posts/53756/"/>
    <id>https://blog.liuchaoming.cn/posts/53756/</id>
    <published>2019-09-08T12:04:49.000Z</published>
    <updated>2019-12-23T07:49:47.561Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>使用docker-compose运行mysql容器报错，没有执行权限的问题</p><a id="more"></a><h3 id="docker-compose-yml-内容如下所示"><a href="#docker-compose-yml-内容如下所示" class="headerlink" title="docker-compose.yml 内容如下所示"></a>docker-compose.yml 内容如下所示</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">version: &quot;2&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  mysql:</span><br><span class="line">    container_name: mysql</span><br><span class="line">    image: mysql:5.5.60</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3306:3306&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./mysql/data:/var/lib/mysql</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: &quot;123456&quot;</span><br></pre></td></tr></table></figure><h3 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown: cannot <span class="built_in">read</span> directory <span class="string">'/var/lib/mysql/'</span>: Permission denied</span><br></pre></td></tr></table></figure><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>该原因为centOs7默认开启selinux安全模块,需要临时关闭该安全模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">临时关闭selinux：su -c &quot;setenforce 0&quot;</span><br><span class="line">重新开启selinux：su -c &quot;setenforce 1&quot;</span><br></pre></td></tr></table></figure><p>或者添加目录到白名单，添加selinux规则，将要挂载的目录添加到白名单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chcon -Rt svirt_sandbox_file_t ./mysql/data</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用docker-compose运行mysql容器报错，没有执行权限的问题&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://blog.liuchaoming.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://blog.liuchaoming.cn/tags/Docker/"/>
    
      <category term="Mysql" scheme="https://blog.liuchaoming.cn/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>git push到GitHub的时候遇到! [rejected] master -&gt; master (non-fast-forward)的问题</title>
    <link href="https://blog.liuchaoming.cn/posts/59083/"/>
    <id>https://blog.liuchaoming.cn/posts/59083/</id>
    <published>2019-09-05T21:38:03.000Z</published>
    <updated>2019-12-23T07:49:47.561Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>git push到GitHub的时候遇到! [rejected] master -&gt; master (non-fast-forward)的问题</p><a id="more"></a><h3 id="出现错误的原因"><a href="#出现错误的原因" class="headerlink" title="出现错误的原因"></a>出现错误的原因</h3><p>1、在manage文件夹里打开git，输入git init初始化本地仓库，GitHub创建远程仓库manage</p><p>2、以下命令关联本地和远程仓库，xxx为github厂库用户名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:xxx/manage.git</span><br></pre></td></tr></table></figure><p>3、本地已经有项目代码了在add和commit之后，想要push到远程仓库，报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> ! [rejected]        master -&gt; master (non-fast-forward)</span><br><span class="line">error: failed to push some refs to &apos;git@github.com:xxx/spring-study.git&apos;</span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class="line">hint: &apos;git pull ...&apos;) before pushing again.</span><br><span class="line">hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details.</span><br></pre></td></tr></table></figure><h3 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h3><p>1、git pull origin master –allow-unrelated-histories //把远程仓库和本地同步，消除差异</p><p>2、重新add和commit相应文件</p><p>3、执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>4、此时就能push成功了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git push到GitHub的时候遇到! [rejected] master -&amp;gt; master (non-fast-forward)的问题&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://blog.liuchaoming.cn/categories/Git/"/>
    
    
      <category term="Git" scheme="https://blog.liuchaoming.cn/tags/Git/"/>
    
      <category term="GitHub" scheme="https://blog.liuchaoming.cn/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>关于java的垃圾收集器</title>
    <link href="https://blog.liuchaoming.cn/posts/53302/"/>
    <id>https://blog.liuchaoming.cn/posts/53302/</id>
    <published>2019-09-04T21:00:20.000Z</published>
    <updated>2019-12-23T07:49:47.561Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>虽然对各个收集器进行比较，但并非要挑选出一个最好的收集器。因为知道现在为止还没有所谓最好的垃圾收集器出现，也更加没有万能的垃圾收集器，而是根据具体应用场景选择适合自己的垃圾收集器。如果有一种任何场景下都适用的完美收集器存在，那么HotSpot虚拟机就不会实现那么多不同的垃圾收集器了</p><a id="more"></a><h3 id="Serial-收集器"><a href="#Serial-收集器" class="headerlink" title="Serial 收集器"></a>Serial 收集器</h3><blockquote><p>Serial（串行）收集器收集器是最基本、历史最悠久的垃圾收集器了。看名字就知道这个收集器是一个单线程收集器了。它的 “单线程” 的意义不仅仅意味着它只会使用一条垃圾收集线程去完成垃圾收集工作，更重要的是它在进行垃圾收集工作的时候必须暂停其他所有的工作线程（ “Stop The World” ），直到它收集结束。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/liucm-it/ImgHosting/pic/Serial.jpg" alt></p><p>虚拟机的设计者们当然知道 Stop The World 带来的不良用户体验，所以在后续的垃圾收集器设计中停顿时间在不断缩短（仍然还有停顿，寻找最优秀的垃圾收集器的过程仍然在继续）。</p><p>但是 Serial 收集器有没有优于其他垃圾收集器的地方呢？当然有，它简单而高效（与其他收集器的单线程相比）。Serial 收集器由于没有线程交互的开销，自然可以获得很高的单线程收集效率。Serial 收集器对于运行在 Client 模式下的虚拟机来说是个不错的选择</p><h3 id="ParNew-收集器"><a href="#ParNew-收集器" class="headerlink" title="ParNew 收集器"></a>ParNew 收集器</h3><blockquote><p>ParNew 收集器其实就是 Serial 收集器的多线程版本，除了使用多线程进行垃圾收集外，其余行为（控制参数、收集算法、回收策略等等）和 Serial 收集器完全一样。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/liucm-it/ImgHosting/pic/ParNew.jpg" alt></p><p>它是许多运行在 Server 模式下的虚拟机的首要选择，除了 Serial 收集器外，只有它能与 CMS 收集器（真正意义上的并发收集器，后面会介绍到）配合工作。</p><blockquote><p>并行和并发概念：<br>并行（Parallel） ：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。<br>并发（Concurrent）：指用户线程与垃圾收集线程同时执行（但不一定是并行，可能会交替执行），用户程序在继续运行，而垃圾收集器运行在另一个 CPU 上。</p></blockquote><h3 id="Parallel-Scavenge-收集器"><a href="#Parallel-Scavenge-收集器" class="headerlink" title="Parallel Scavenge 收集器"></a>Parallel Scavenge 收集器</h3><blockquote><p>Parallel Scavenge 收集器也是使用复制算法的多线程收集器，它看上去几乎和ParNew都一样</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseParallelGC </span><br><span class="line"></span><br><span class="line">    使用 Parallel 收集器+ 老年代串行</span><br><span class="line"></span><br><span class="line">-XX:+UseParallelOldGC</span><br><span class="line"></span><br><span class="line">    使用 Parallel 收集器+ 老年代并行</span><br></pre></td></tr></table></figure><p>Parallel Scavenge 收集器关注点是吞吐量（高效率的利用 CPU）。CMS 等垃圾收集器的关注点更多的是用户线程的停顿时间（提高用户体验）。所谓吞吐量就是 CPU 中用于运行用户代码的时间与 CPU 总消耗时间的比值。 Parallel Scavenge 收集器提供了很多参数供用户找到最合适的停顿时间或最大吞吐量，如果对于收集器运作不太了解的话，手工优化存在困难的话可以选择把内存管理优化交给虚拟机去完成也是一个不错的选择。</p><p><img src="https://cdn.jsdelivr.net/gh/liucm-it/ImgHosting/pic/Parallel-Scavenge.jpg" alt></p><h3 id="Serial-Old-收集器"><a href="#Serial-Old-收集器" class="headerlink" title="Serial Old 收集器"></a>Serial Old 收集器</h3><blockquote><p><strong>Serial 收集器的老年代版本</strong>，它同样是一个单线程收集器。它主要有两大用途：一种用途是在 JDK1.5 以及以前的版本中与 Parallel Scavenge 收集器搭配使用，另一种用途是作为 CMS 收集器的后备方案。</p></blockquote><h3 id="Parallel-Old-收集器"><a href="#Parallel-Old-收集器" class="headerlink" title="Parallel Old 收集器"></a>Parallel Old 收集器</h3><blockquote><p><strong>Parallel Scavenge 收集器的老年代版本</strong>。使用多线程和“标记-整理”算法。在注重吞吐量以及 CPU 资源的场合，都可以优先考虑 Parallel Scavenge 收集器和 Parallel Old 收集器。</p></blockquote><h3 id="CMS-收集器"><a href="#CMS-收集器" class="headerlink" title="CMS 收集器"></a>CMS 收集器</h3><blockquote><p><strong>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。它非常符合在注重用户体验的应用上使用</strong>。</p></blockquote><blockquote><p><strong>CMS（Concurrent Mark Sweep）收集器是 HotSpot 虚拟机第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程（基本上）同时工作</strong>。</p></blockquote><p>从名字中的<strong>Mark Sweep</strong>这两个词可以看出，CMS 收集器是一种 <strong>“标记-清除”算法</strong>实现的，它的运作过程相比于前面几种垃圾收集器来说更加复杂一些。整个过程分为四个步骤：</p><ul><li>初始标记： 暂停所有的其他线程，并记录下直接与 root 相连的对象，速度很快 ；</li><li>并发标记： 同时开启 GC 和用户线程，用一个闭包结构去记录可达对象。但在这个阶段结束，这个闭包结构并不能保证包含当前所有的可达对象。因为用户线程可能会不断的更新引用域，所以 GC 线程无法保证可达性分析的实时性。所以这个算法里会跟踪记录这些发生引用更新的地方。</li><li>重新标记： 重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短</li><li>并发清除： 开启用户线程，同时 GC 线程开始对为标记的区域做清扫。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liucm-it/ImgHosting/pic/CMS.jpg" alt></p><p>从它的名字就可以看出它是一款优秀的垃圾收集器，主要优点：并发收集、低停顿。但是它有下面三个明显的缺点：</p><ul><li>对 CPU 资源敏感；</li><li>无法处理浮动垃圾；</li><li>它使用的回收算法-“标记-清除”算法会导致收集结束时会有大量空间碎片产生。</li></ul><h3 id="G1-收集器"><a href="#G1-收集器" class="headerlink" title="G1 收集器"></a>G1 收集器</h3><blockquote><p><strong>G1 (Garbage-First) 是一款面向服务器的垃圾收集器,主要针对配备多颗处理器及大容量内存的机器. 以极高概率满足 GC 停顿时间要求的同时,还具备高吞吐量性能特征</strong>.</p></blockquote><p>被视为 JDK1.7 中 HotSpot 虚拟机的一个重要进化特征。它具备一下特点：</p><ul><li>并行与并发：G1 能充分利用 CPU、多核环境下的硬件优势，使用多个 CPU（CPU 或者 CPU 核心）来缩短 Stop-The-World 停顿时间。部分其他收集器原本需要停顿 Java 线程执行的 GC 动作，G1 收集器仍然可以通过并发的方式让 java 程序继续执行。</li><li>分代收集：虽然 G1 可以不需要其他收集器配合就能独立管理整个 GC 堆，但是还是保留了分代的概念。</li><li>空间整合：与 CMS 的“标记–清理”算法不同，G1 从整体来看是基于“标记整理”算法实现的收集器；从局部上来看是基于“复制”算法实现的。</li><li>可预测的停顿：这是 G1 相对于 CMS 的另一个大优势，降低停顿时间是 G1 和 CMS 共同的关注点，但 G1 除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为 M 毫秒的时间片段内。</li></ul><p>G1 收集器的运作大致分为以下几个步骤：</p><ul><li>初始标记</li><li>并发标记</li><li>最终标记</li><li>筛选回收</li></ul><blockquote><p><strong>G1 收集器在后台维护了一个优先列表，每次根据允许的收集时间，优先选择回收价值最大的 Region(这也就是它的名字 Garbage-First 的由来)。</strong>这种使用 Region 划分内存空间以及有优先级的区域回收方式，保证了 GF 收集器在有限时间内可以尽可能高的收集效率（把内存化整为零）。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然对各个收集器进行比较，但并非要挑选出一个最好的收集器。因为知道现在为止还没有所谓最好的垃圾收集器出现，也更加没有万能的垃圾收集器，而是根据具体应用场景选择适合自己的垃圾收集器。如果有一种任何场景下都适用的完美收集器存在，那么HotSpot虚拟机就不会实现那么多不同的垃圾收集器了&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://blog.liuchaoming.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.liuchaoming.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java8的Lambda表达式</title>
    <link href="https://blog.liuchaoming.cn/posts/43742/"/>
    <id>https://blog.liuchaoming.cn/posts/43742/</id>
    <published>2019-08-30T21:46:34.000Z</published>
    <updated>2019-12-23T07:49:47.561Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Java 8版本是现在Java最流行的一个版本。主要改进Java在面向对象的基础上对函数式编程的支持。本文将展示Lambda的基本语法。</p><a id="more"></a><h3 id="为什么使用Lambda表达式"><a href="#为什么使用Lambda表达式" class="headerlink" title="为什么使用Lambda表达式"></a>为什么使用Lambda表达式</h3><p>我们使用Java的集合经常会定义比较器来进行集合排序。比如要按照字符串长度对字符进行排序，实现一个自定义的Comparator对象并传递给方法进行排序，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LengthComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String firstStr, String secondStr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(firstStr.length(), secondStr.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Arrays.sort(strings, <span class="keyword">new</span> LengthComparator());</span><br></pre></td></tr></table></figure><p>编写这一段用于比较的代码片段，封装在自定义的Comparator里。Arrays.sort方法会在适当时机就会调用此代码片段，对strings数组进行排序。<br>那么，这个适当时机，是什么时候呢？它可能是某个按钮被点击时，也可能是某个新线程被启动时，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunner</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.our.println(<span class="string">"do work"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> MyRunner()).start();</span><br></pre></td></tr></table></figure><p>把一段代码块传递 - 线程池，排序方法。希望在适当时机需要时，调用这段代码来进行相关工作或排序。</p><p>在java8以前，想要传递代码块很不容易。我们只能把代码块写在一个特殊的类里, 或者使用匿名内部类的方式，实例化一个类对象来传递这段代码。</p><h3 id="Lambda的语法"><a href="#Lambda的语法" class="headerlink" title="Lambda的语法"></a>Lambda的语法</h3><p>对于字符串排序，需要明确两个问题</p><ol><li>处理传入的参数类型是什么？是什么数据类型？</li><li>使用什么代码片段来进行处理？</li></ol><p>于是，Lambda的表达式可以:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(String str1, String str2) -&gt; Integer.compare(str1.length(), str2.length());</span><br></pre></td></tr></table></figure><p>如果可以推断Lambda的参数类型，可以省略类型，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;String&gt; com = (str1, str2) -&gt; Integer.compare(str1.length(), str2.length());</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java 8版本是现在Java最流行的一个版本。主要改进Java在面向对象的基础上对函数式编程的支持。本文将展示Lambda的基本语法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://blog.liuchaoming.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.liuchaoming.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Mysql导入导出命令详解</title>
    <link href="https://blog.liuchaoming.cn/posts/62076/"/>
    <id>https://blog.liuchaoming.cn/posts/62076/</id>
    <published>2019-08-13T20:10:29.000Z</published>
    <updated>2019-12-23T07:49:47.561Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Mysql导入导出数据库经常使用，记录一下以后方便查找</p><a id="more"></a><h3 id="导出数据和表结构"><a href="#导出数据和表结构" class="headerlink" title="导出数据和表结构"></a>导出数据和表结构</h3><blockquote><p>使用mysqldump可以加上<code>--default-character-set=utf8</code>防止乱码，加上<code>--hex-blob</code>导出二进制数据，如果导出时不设置hex-blob模式，同样将导出数据再次导入时二进制数据会丢失和错乱</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u用户名 -p密码 --default-character-set=utf8 --hex-blob  数据库名 &gt; 数据库名.sql</span><br><span class="line"></span><br><span class="line">mysqldump -uroot -p123456 --default-character-set=utf8 test &gt; test.sql</span><br><span class="line"></span><br><span class="line">mysqldump -uroot -p test &gt; test.sql</span><br></pre></td></tr></table></figure><h3 id="只导出表结构"><a href="#只导出表结构" class="headerlink" title="只导出表结构"></a>只导出表结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u用户名 -p密码 -d 数据库名 &gt; 数据库名.sql</span><br><span class="line"></span><br><span class="line">mysqldump -uroot -p123456 -d test &gt; test.sql</span><br></pre></td></tr></table></figure><h3 id="导入数据库"><a href="#导入数据库" class="headerlink" title="导入数据库"></a>导入数据库</h3><h4 id="使用mysql命令导入"><a href="#使用mysql命令导入" class="headerlink" title="使用mysql命令导入"></a>使用mysql命令导入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u用户名 -p 数据库名 &lt; 数据库名.sql</span><br><span class="line"></span><br><span class="line">mysql -uroot -p123456 test &lt; test.sql</span><br></pre></td></tr></table></figure><h4 id="使用source命令导入"><a href="#使用source命令导入" class="headerlink" title="使用source命令导入"></a>使用source命令导入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use test;                     # 使用已经创建的数据库</span><br><span class="line">source /home/test/test.sql    # 导入备份的sql文件</span><br></pre></td></tr></table></figure><h3 id="导出远程数据库"><a href="#导出远程数据库" class="headerlink" title="导出远程数据库"></a>导出远程数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -h远程服务器ip地址 -P端口号  -u用户名 -p密码 --default-character-set=utf8 test &gt; /home/test/test.sql</span><br><span class="line"></span><br><span class="line">mysqldump -h192.168.22.11 –P3306 -uroot -ppassword --default-character-set=utf8 test &gt; /home/test/test.sql</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mysql导入导出数据库经常使用，记录一下以后方便查找&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mysql" scheme="https://blog.liuchaoming.cn/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://blog.liuchaoming.cn/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql数据库设计规范</title>
    <link href="https://blog.liuchaoming.cn/posts/14649/"/>
    <id>https://blog.liuchaoming.cn/posts/14649/</id>
    <published>2019-08-10T23:03:34.000Z</published>
    <updated>2019-12-23T07:49:47.561Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般使用Mysql数据比较多，但是有点小伙伴很少考虑Mysql设计上的细节问题，像SQL语句的规范、索引上的规范等等，本文经过整理后得到一些常用的Mysql数据库设计规范。</p><a id="more"></a><h3 id="Mysql命令规范"><a href="#Mysql命令规范" class="headerlink" title="Mysql命令规范"></a>Mysql命令规范</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 所有数据库表命名都用小写字母、并用下换线分割</span><br><span class="line">- 所有数据库表名尽量不要使用Mysql关键字命名、能看到名称大概了解表是做什么的</span><br><span class="line">- 临时表以tmp_为前缀、日期后缀区分，备份表以bak_为前缀、日期后缀</span><br><span class="line">- 相同的数据字段，在所有表中的列明和类型尽量保持一致</span><br></pre></td></tr></table></figure><h3 id="基本设计规范"><a href="#基本设计规范" class="headerlink" title="基本设计规范"></a>基本设计规范</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- 大部分情况尽量使用InnoDB引擎，InnoDB支持事务、行级锁、性能更好</span><br><span class="line">- 数据库尽量使用utf8mb4的字符集，兼容性好，避免乱码和索引创建失败的问题</span><br><span class="line">- 表和字段都尽量加上注释，方便以后维护</span><br><span class="line">- 尽量不要使用存储过程、视图、触发器、Event。可以减少数据库资源的占用、将计算转移到服务层</span><br><span class="line">- 单表的数据量尽量控制在500万以内，数据量过大影响Mysql性能和维护，更多的数据可以对数据库进行分库分表拆分，控制单表的数据量</span><br><span class="line">- 尽量不要使用Mysql的分区功能，分区是物理上多个文件，逻辑上一个文件，查询效率很低。可以使用中间件mycat、sharding-jdbc等进行物理分区</span><br><span class="line">- 尽量减少表的宽度、数据冷热数据进行分离、保证每个表都有主键</span><br><span class="line">  - Mysql列数限制在为4096列，每一行数据不超过65535字节；宽度越大、加载的内存就越大，IO消耗也就越大</span><br><span class="line">  - 经常用的数据放在一起，不常用的数据分离出去，可以极大提高效率</span><br><span class="line">  - 主键可以更好的利用索引，提高查询效率</span><br><span class="line">- 表中尽量不用外键，通过程序来维护，外键导致表与表之间耦合，涉及相关的表，十分影响性能且容易造成死锁</span><br></pre></td></tr></table></figure><h3 id="字段涉及规范"><a href="#字段涉及规范" class="headerlink" title="字段涉及规范"></a>字段涉及规范</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- 优先选择符合业务最小的存储类型，节省数据空间减少IO消耗</span><br><span class="line">- 字段定义使用Not Null，可以提供一个默认值</span><br><span class="line">  - null值索引很难优化，null值更占用空间，需要额外空间标识</span><br><span class="line">  - null值操作只能采用is null或is not null</span><br><span class="line">  - 不能采用=、in、&lt;、&lt;&gt;、not in、！=操作符，不方便操作，where name != &apos;abc&apos;, 不会查询出name为null的数据</span><br><span class="line">- 尽量不使用Text、Blob类型</span><br><span class="line">  - Mysql使用Text、Blob类型就不使用内存临时表而使用磁盘临时空间、性能差浪费磁盘和内存空间。</span><br><span class="line">  - 降低数据库内存命中率</span><br><span class="line">  - 可以单独建立扩展表使用</span><br><span class="line">- 尽量不使用Enum、用Tinyint</span><br><span class="line">  - 修改Enum值时，需要通过alter修改表</span><br><span class="line">  - order by的操作效率低</span><br><span class="line">- 尽量不要使用小数，尤其涉及金钱等精度要求较高的类型</span><br><span class="line">  - 最好使用整数，小数存储有精度的误差，导致金额对不上</span><br><span class="line">- 时间尽量使用Timestamp或者Datetime类型存储时间，不要使用String类型</span><br><span class="line">  - 使用String无法使用日期函数进行比较比较</span><br><span class="line">  - 用String会占用更多的空间</span><br></pre></td></tr></table></figure><h3 id="索引设计规范"><a href="#索引设计规范" class="headerlink" title="索引设计规范"></a>索引设计规范</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- 表的索引不要太多，尽量5个以下，索引增加查询效率同时也会降低插入和更新的效率</span><br><span class="line">  - 索引太多会影响Mysql优化器，优化器消耗时间增加，反而降低查询到的性能</span><br><span class="line">- 更新频繁的列、或者列值区分度不高的列(如：性别，只有男、女、未知)不要加索引</span><br><span class="line">- 联合索引，把区分度高的放在左侧，尽量遵循最左索引原则</span><br><span class="line">  - 区分度高的列放在最左侧</span><br><span class="line">  - 查询频繁的列放在最左侧</span><br><span class="line">  - 字段长度小的放在最左侧</span><br></pre></td></tr></table></figure><h3 id="SQL语句规范"><a href="#SQL语句规范" class="headerlink" title="SQL语句规范"></a>SQL语句规范</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- 尽量不要使属性隐式转换，隐式转换使索引失效</span><br><span class="line">  - SELECT name FROM project WHERE id = `&apos;1000&apos;`; id为整型，用`1000`代替</span><br><span class="line">- 程序中使用预编译语句操作数据库，减少SQL编译时间同时防止SQL注入</span><br><span class="line">- insert语句尽量包含字段</span><br><span class="line">  - 如：INSERT INTO test values(&apos;1&apos;, &apos;abc&apos;);应该INSERT INTO test(id, name) values(&apos;1&apos;, &apos;abc&apos;)</span><br><span class="line">- 尽量不要使用%开头的模糊查询</span><br><span class="line">  - not、!=、&lt;&gt;、not in、not like以及%开头等，会是查询不走索引而全变扫描</span><br><span class="line">- 联合索引只能有一列进行范围查询</span><br><span class="line">  - a1,a2,a3联合索引，a1范围查询，a2，a3列不会走索引，可以把a1放在最后</span><br><span class="line">- Where语句后的字段尽量不要使用函数或表达式，否则不会走索引</span><br><span class="line">  - SELECT id FROM t WHERE num/2=100，这将导致引擎放弃使用索引而进行全表扫描，可改为：SELECT id FROM t WHERE num=100*2</span><br><span class="line">  - SELECT id FROM t WHERE substring(name,1,3)=&apos;abc&apos;--name以abc开头的id，应改为:SELECT id FROM t WHERE name LIKE &apos;abc%&apos;</span><br><span class="line">  - SELECT id FROM t WHERE datediff(day,createdate,&apos;2005-11-30&apos;)=0--&apos;2015-11-30&apos;生成的id，应改为:SELECT id FROM t WHERE createdate&gt;=&apos;2015-11-30&apos; AND createdate&lt;&apos;2015-12-1&apos;</span><br><span class="line">- 大表不要使用子查询，不使用JOIN查询</span><br><span class="line">- 避免JOIN关联太多表</span><br><span class="line">- OR条件可以换成IN查询</span><br><span class="line">- 尽量减少与数据库交互次数</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般使用Mysql数据比较多，但是有点小伙伴很少考虑Mysql设计上的细节问题，像SQL语句的规范、索引上的规范等等，本文经过整理后得到一些常用的Mysql数据库设计规范。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mysql" scheme="https://blog.liuchaoming.cn/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://blog.liuchaoming.cn/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>About Hexo</title>
    <link href="https://blog.liuchaoming.cn/posts/15470/"/>
    <id>https://blog.liuchaoming.cn/posts/15470/</id>
    <published>2019-07-31T23:03:34.000Z</published>
    <updated>2019-12-23T07:49:47.561Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to this Blog!</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" rel="external nofollow noopener noreferrer" target="_blank">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" rel="external nofollow noopener noreferrer" target="_blank">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" rel="external nofollow noopener noreferrer" target="_blank">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" rel="external nofollow noopener noreferrer" target="_blank">Deployment</a></p><h3 id="Clean"><a href="#Clean" class="headerlink" title="Clean"></a>Clean</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to this Blog!&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://blog.liuchaoming.cn/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://blog.liuchaoming.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装后报Cannot connect to the docker daemon at ...</title>
    <link href="https://blog.liuchaoming.cn/posts/61412/"/>
    <id>https://blog.liuchaoming.cn/posts/61412/</id>
    <published>2019-07-31T23:03:34.000Z</published>
    <updated>2019-12-23T07:49:47.561Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Docker安装后报错：Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</p><a id="more"></a><h3 id="解决方式执行以下命令"><a href="#解决方式执行以下命令" class="headerlink" title="解决方式执行以下命令"></a>解决方式执行以下命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">sudo service docker restart</span><br><span class="line">sudo service docker status (should see active (running))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker安装后报错：Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://blog.liuchaoming.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://blog.liuchaoming.cn/tags/Docker/"/>
    
  </entry>
  
</feed>
