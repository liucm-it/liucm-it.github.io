{"meta":{"title":"Kermit's Blog","subtitle":"刘朝铭的网络博客","description":"一个博客、一个记录、一份笔记，温故而知新","author":"Kermit Liu","url":"https://blog.liuchaoming.cn","root":"/"},"pages":[{"title":"","date":"2019-12-24T14:46:46.684Z","updated":"2019-12-24T14:46:46.684Z","comments":true,"path":"404.html","permalink":"https://blog.liuchaoming.cn/404.html","excerpt":"","text":"var QZONE = window.QZONE || {}; function imagezoom(imgobj, box_w, box_h) { var src_w = imgobj.width; var src_h = imgobj.height; var r1 = src_w / src_h, r2 = box_w / box_h; var dst_w, dst_h; if (r1 > r2) { dst_w = box_w; dst_h = Math.round(dst_w / src_w * src_h); } else { if (r1 < r2) { dst_h = box_h; dst_w = Math.round(dst_h / src_h * src_w); } else { dst_w = box_w; dst_h = box_h; } } imgobj.style.marginLeft = (box_w - dst_w) / 2 + \"px\"; imgobj.style.marginTop = (box_h - dst_h) / 2 + \"px\"; imgobj.style.width = dst_w + \"px\"; imgobj.style.height = dst_h + \"px\"; imgobj.style.opacity = 1; } (function(_w, _d) { var ha = _d.head || _d.getElementsByTagName(\"head\")[0]; var $scope = {}; var current; var tmnow; var chId; var homePageUrl, homePageName; var scs = document.getElementsByTagName(\"script\"); if (location.href.indexOf(\"fm.qq.com\") > -1 || location.href.indexOf(\"fm.qzone.qq.com\") > -1) { homePageName = \"\\u8fd4\\u56de\\u4f01\\u9e45FM\"; homePageUrl = \"http://fm.qq.com\"; } else { if (location.href.indexOf(\"qzone.qq.com\") > -1) { homePageName = \"\\u8fd4\\u56de\\u6211\\u7684\\u7a7a\\u95f4\"; homePageUrl = \"http://qzone.qq.com\"; } else { homePageName = \"\\u8fd4\\u56de\\u817e\\u8baf\\u7f51\"; homePageUrl = \"http://www.qq.com\"; } } for (var i = 0;i < scs.length;i++) { if (scs[i].src.indexOf(\"404/search_children.js\") > -1) { if (scs[i].getAttribute(\"homePageUrl\")) { homePageUrl = scs[i].getAttribute(\"homePageUrl\"); } if (scs[i].getAttribute(\"homePageName\")) { homePageName = scs[i].getAttribute(\"homePageName\"); } break; } } $scope.rettext = homePageName; $scope.retlink = homePageUrl; function getData(srcUrl, callback) { var sc = _d.createElement(\"script\"); function orc() { if (sc.readyState === \"loaded\") { setTimeout(function() { callback && callback(); }, 0); } } if (sc.addEventListener) { if (callback) { sc.addEventListener(\"load\", callback, false); } } else { sc.attachEvent(\"onreadystatechange\", orc); } ha && ha.appendChild(sc); sc.src = srcUrl; } function resolveData(d) { var tid, len, ddata = [], tdata; if (\"object\" == typeof d && (d.data && (len = d.data.length))) { for (var i = 0;i < len;i++) { var expire = d.data[i].expire; d.data[i]._id = new Date * Math.random() * Math.random() * 1E7; if (expire && tmnow * 1E3 < Date.parse(expire.replace(/\\s[\\s\\S]*$/, \"\").replace(/\\-/g, \"/\"))) { var _c = d.data[i].city, _p = d.data[i].province; if (_c && city) { if ((\"_\" + _c + \"_\").indexOf(\"_\" + city + \"_\") > -1) { ddata.push(d.data[i]); continue; } } if (_p && province) { if ((\"_\" + _p + \"_\").indexOf(\"_\" + province + \"_\") > -1) { ddata.push(d.data[i]); } } } } tid = Math.floor(Math.random() * (ddata.length || len)); tdata = (ddata.length ? ddata : d.data)[chId = tid]; if (_w.foundjsondata) { tdata.ta = tdata.sex.indexOf(\"\\u5973\") > -1 ? \"\\u5979\" : \"\\u4ed6\"; tdata.name = \"\\u201c7\\u00b718\\u7279\\u5927\\u62d0\\u5356\\u5a74\\u513f\\u6848\\u201d\\u544a\\u7834\\uff0c\\u88ab\\u89e3\\u6551\\u768415\\u540d\\u5b69\\u5b50\\u4e2d\\uff0c2\\u4eba\\u7531\\u4eb2\\u751f\\u7236\\u6bcd\\u9886\\u56de\\uff0c\\u4ecd\\u670913\\u540d\\u5b69\\u5b50\\u672a\\u627e\\u5230\\u4eb2\\u751f\\u7236\\u6bcd\\uff0c\\u88ab\\u5b89\\u7f6e\\u5728\\u60e0\\u5dde\\u5e02\\u793e\\u4f1a\\u798f\\u5229\\u9662\\uff0c\" + tdata.ta + \"\\u662f\\u5176\\u4e2d\\u4e4b\\u4e00\\u3002\"; tdata.url = tdata.url.replace(/#p=(\\d{1,2})/, function(a, n) { return \"#p=\" + (+n + 1); }); return format(tmpl2, tdata); } if (!tdata.ext1) { tdata.ext1 = \"\\u4f46\\u6211\\u4eec\\u53ef\\u4ee5\\u4e00\\u8d77\\u5bfb\\u627e\\u5931\\u8e2a\\u5b9d\\u8d1d\"; } return tdata; } } function setTopData(tdata) { current = tdata; $scope.topname = tdata.name; $scope.topgender = tdata.sex; $scope.topbirth = tdata.birth_time; $scope.toplostdate = tdata.lost_time; $scope.toplostplace = tdata.lost_place; $scope.toplostdesc = tdata.child_feature; $scope.toplink = tdata.url; $scope.topimg = tdata.child_pic; $scope.topid = tdata._id; document.body.innerHTML = template(\"body\", $scope); } function init(data) { tmnow = data.tm_now * 1E3; var tdata = resolveData(jsondata); $scope.whichin = 0; jsondata.data.splice(chId, 1); $scope.otherdata = [tdata].concat(jsondata.data.slice(0, 5)); setTopData(tdata); } var timeout; window._Callback = function(d) { clearTimeout(timeout); init(d); }; timeout = setTimeout(function() { _Callback({tm_now:(new Date).getTime() / 1E3}); }, 2E3); _w.share = function(target) { var summary = [\"\\u80cc\\u666f\\uff1a\", current.name, \"\\uff0c\\u6027\\u522b\\uff1a\", current.sex, \"\\uff0c\\u51fa\\u751f\\u65f6\\u95f4\\uff1a\", current.birth_time, \"\\uff0c\\u5931\\u8e2a\\u65f6\\u95f4\\uff1a\", current.lost_time, \"\\uff0c\\u7279\\u5f81\\u63cf\\u8ff0\\uff1a\", current.child_feature].join(\"\"); if (summary) { summary = \"#\\u5bfb\\u627e\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d#\" + summary; } var stitle = \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8be6\\u60c5\"; var desc = \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\"; var encode = encodeURIComponent; var opts = {\"surl\":\"http://qzone.qq.com/gy/404/\" + current.id + \"/lostchild.html\", \"site\":\"QQ\\u7a7a\\u95f4\", \"summary\":summary || \"#\\u5b9d\\u8d1d\\u56de\\u5bb6#\\u817e\\u8baf\\u5fd7\\u613f\\u8005\\u7528\\u6280\\u672f\\u70b9\\u4eae\\u516c\\u76ca\\uff0c\\u8ba9\\u6211\\u4eec\\u4e00\\u8d77\\u5bfb\\u627e\\u8d70\\u5931\\u7684\\u513f\\u7ae5\\u5427\\uff01\", \"stitle\":stitle, \"pics\":current.child_pic, \"desc\":desc, \"origin_url\":current.url}; var surl = opts.surl || \"http://www.qq.com/404/\", summary = opts.summary || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u7684\\u5185\\u5bb9\", stitle = opts.stitle || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u7684\\u6807\\u9898\", pics = opts.pics || \"http://qzonestyle.gtimg.cn/qzone_v6/act/img/20120422_qzone_7_years/pop_up/icon-pop-seven-years.png\", site = opts.site || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u94fe\\u63a5\\u7684\\u6587\\u5b57\", desc = opts.desc || \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\", origin_url = opts.origin_url || \"http://www.qq.com/404/\"; var shareList = {weibo:{method:function(evt) { var w = \"http://v.t.qq.com/share/share.php\", q = [\"?site=\", encode(surl + \"#via=share_t_weib\"), \"&title=\", encode(summary), \"&pic=\", encode(pics), \"&url=\", encode(surl)].join(\"\"), p = [w, q].join(\"\"); openit(p, \"weibo\", \"width=700, height=680, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no\"); }}, qzone:{method:function(evt) { var buff = [], ps = {url:surl + \"#via=404-qzoneshare\", desc:desc || \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\", summary:summary, title:stitle, pics:pics, site:site}; for (var k in ps) { buff.push(k + \"=\" + encode(ps[k] || \"\")); } var w = \"http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?\" + buff.join(\"&\"), q = [\"#via=share_t_qzone\", \"&title=\", encode(summary), \"&pic=\", encode(pics), \"&url=\", encode(surl)].join(\"\"), p = [w, q].join(\"\"); openit(p, \"qzone\", \"width=700, height=680, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no\"); }}, sina:{method:function() { var w = \"http://v.t.sina.com.cn/share/share.php\", q = [\"?url=\", encode(surl + \"#via=share_x_weib\"), \"&title=\", encode(summary), \"&source=\", \"&sourceUrl=\", surl, \"&content=utf-8\", \"&pic=\", encode(pics)].join(\"\"), p = [w, q].join(\"\"); openit(p, \"sina\", \"toolbar=0,status=0,resizable=1,width=440,height=430\"); }}, kaixin:{method:function() { var n = \"http://www.kaixin001.com/repaste/bshare.php?rurl=\" + encode(surl + \"#via=share_kaixin\") + \"&rcontent=&rtitle=\" + encode(summary); openit(n, \"kaixin\", \"toolbar=0,status=0,resizable=1,width=600,height=360\"); }}, renren:{method:function() { var n = \"http://www.connect.renren.com/share/sharer?title=\" + encode(summary) + \"&url=\" + encode(surl + \"#via=share_renren\"), p = window.open(n, \"rr\", \"toolbar=0,status=0,resizable=1,width=510,height=300\"); if (p) { p.focus(); } }}, weixin:{method:function() { var n = \"http://qzone.qq.com/gy/404/page/qrcode.html?url=\" + encode(origin_url + \"#via=share_weixin\"), p = window.open(n, \"rr\", \"toolbar=0,status=0,resizable=1,width=620,height=430\"); if (p) { p.focus(); } }}}; var openit = function(u, n, p) { function o() { var z; if (!(z = window.open(u, n, p))) { location.href = u; } else { z.focus(); } } o(); }; shareList[target] && shareList[target].method(); }; _w.toThis = function(id) { for (var i = 0;i < $scope.otherdata.length;i++) { if ($scope.otherdata[i]._id == id) { setTopData($scope.otherdata[i]); break; } } return false; }; var meta = document.createElement(\"meta\"); meta.name = \"viewport\"; meta.content = \"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"; ha.appendChild(meta); (function registerStyle() { var link = document.createElement(\"link\"); link.rel = \"stylesheet\"; link.type = \"text/css\"; link.href = \"https://qzone.qq.com/gy/404/style/404style.css\"; ha.appendChild(link); })(); (function initStat() { var qqDomainNameRE = /\\.qq\\.com$/i, qzoneDomainNameRE = /\\bqzone\\.qq\\.com$/i, qzsDomainNameRE = /\\bqzonestyle\\.gtimg\\.cn$/i; function cb() { var url = location.host; var src = \"\"; if (qzoneDomainNameRE.test(url)) { src = \"new404.qzone\"; } else { if (qqDomainNameRE.test(url)) { src = \"new404.qq\"; } else { if (qzsDomainNameRE.test(url)) { src = \"new404.qzonestyle\"; } else { src = url.replace(\".\", \"_\"); } } } _w.TCISD && (_w.TCISD.pv && _w.TCISD.pv(\"hat.qzone.qq.com\", \"/gy/lostchild/\" + src)); } getData(\"https://qzonestyle.gtimg.cn/ac/qzfl/stat.js\", cb); })(); })(window, document); !function() { function a(a, b) { return(/string|function/.test(typeof b) ? h : g)(a, b); } function b(a, c) { return \"string\" != typeof a && (c = typeof a, \"number\" === c ? a += \"\" : a = \"function\" === c ? b(a.call(a)) : \"\"), a; } function c(a) { return l[a]; } function d(a) { return b(a).replace(/&(?![\\w#]+;)|[\"']/g, c); } function e(a, b) { if (m(a)) { for (var c = 0, d = a.length;d > c;c++) { b.call(a, a[c], c, a); } } else { for (c in a) { b.call(a, a[c], c); } } } function f(a, b) { var c = /(\\/)[^/]+\\1\\.\\.\\1/, d = (\"./\" + a).replace(/[^/]+$/, \"\"), e = d + b; for (e = e.replace(/\\/\\.\\//g, \"/\");e.match(c);) { e = e.replace(c, \"/\"); } return e; } function g(b, c) { var d = a.get(b) || i({filename:b, name:\"Render Error\", message:\"Template not found\"}); return c ? d(c) : d; } function h(a, b) { if (\"string\" == typeof b) { var c = b; b = function() { return new k(c); }; } var d = j[a] = function(c) { try { return new b(c, a) + \"\"; } catch (d) { return i(d)(); } }; return d.prototype = b.prototype = n, d.toString = function() { return b + \"\"; }, d; } function i(a) { var b = \"{Template Error}\", c = a.stack || \"\"; if (c) { c = c.split(\"\\n\").slice(0, 2).join(\"\\n\"); } else { for (var d in a) { c += \"\\n\" + a[d] + \"\\n\\n\"; } } return function() { return \"object\" == typeof console && console.error(b + \"\\n\\n\" + c), b; }; } var j = a.cache = {}, k = this.String, l = {\"\":\"&#62;\", '\"':\"&#34;\", \"'\":\"&#39;\", \"&\":\"&#38;\"}, m = Array.isArray || function(a) { return \"[object Array]\" === {}.toString.call(a); }, n = a.utils = {$helpers:{}, $include:function(a, b, c) { return a = f(c, a), g(a, b); }, $string:b, $escape:d, $each:e}, o = a.helpers = n.$helpers; a.get = function(a) { return j[a.replace(/^\\.\\//, \"\")]; }, a.helper = function(a, b) { o[a] = b; }, \"function\" == typeof define ? define(function() { return a; }) : \"undefined\" != typeof exports ? module.exports = a : this.template = a, a(\"body\", function(a) { var b = this, c = (b.$helpers, b.$escape), d = a.retlink, e = a.rettext, f = a.topid, g = a.topimg, h = a.topname, i = a.topgender, j = a.topbirth, l = a.toplostdate, m = a.toplostplace, n = a.toplostdesc, o = a.toplink, p = b.$each, q = a.otherdata, r = (a.otheritem, a.index, \"\"); return r += ' 404\\uff0c\\u60a8\\u8bbf\\u95ee\\u7684\\u9875\\u9762\\u627e\\u4e0d\\u56de\\u6765\\u4e86\\uff0c\\u4f46\\u6211\\u4eec\\u53ef\\u4ee5\\u4e00\\u8d77\\u5e2e\\u4ed6\\u4eec\\u56de\\u5bb6\\uff01 ', r += c(e), r += ' ', r += c(h), r += '(', r += c(i), r += ') \\u51fa\\u751f\\u65e5\\u671f\\uff1a', r += c(j), r += ' \\u5931\\u8e2a\\u65f6\\u95f4\\uff1a', r += c(l), r += ' \\u5931\\u8e2a\\u5730\\u70b9\\uff1a', r += c(m), r += ' \\u5931\\u8e2a\\u4eba\\u7279\\u5f81\\u63cf\\u8ff0\\uff1a', r += c(n), r += ' \\u67e5\\u770b\\u8be6\\u60c5 \\u5206\\u4eab \\u817e\\u8baf\\u5fae\\u535a QQ\\u7a7a\\u95f4 \\u65b0\\u6d6a\\u5fae\\u535a \\u5fae\\u4fe1 ', p(q, function(a) { r += ' '; }), r += \" \", new k(r); }); }(); L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"log\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/hibiki.model.json\"},\"display\":{\"position\":\"left\",\"width\":150,\"height\":300},\"mobile\":{\"show\":true},\"react\":{\"opacity\":0.7}});"},{"title":"","date":"2019-12-24T14:46:46.684Z","updated":"2019-12-24T14:46:46.684Z","comments":true,"path":"about/index.html","permalink":"https://blog.liuchaoming.cn/about/index.html","excerpt":"","text":"Kermit's Blog | About document.onkeydown = function () { if (window.event && window.event.keyCode == 123) { event.keyCode = 0; event.returnValue = false; return false; } }; 您的浏览器不支持audio标签，无法播放音乐！ 江湖名称：Kermit 常驻之地：中国 | 上海 初度之辰：90后 兴趣爱好：编程 | 乒乓球 | 游戏 技能简介 | Skill HTML/CSS/JS 85% JAVA 90% PHP 60% VUE 80% GIT 90% SVN 80% Hexo 80% 个人简介 | Introduction ● 学历：本科； ● 现况：Java后端、Web前端开发； ● 目标：Java后端 or 前端开发工程师； ● 博客：记录学习过程，厚积才能薄发； ● 兴趣：兴趣是最好的老师； ● 其他：虽然很菜，但是正在努力学习中！ 联系我 | Contact me Copyright © 2019 Kermit's Blog. All rights reserved. if ('addEventListener' in window) { window.addEventListener('load', function () { document.body.className = document.body.className.replace(/\\bis-loading\\b/, ''); }); document.body.className += (navigator.userAgent.match(/(MSIE|rv:11\\.0)/) ? ' is-ie' : ''); } uniform mat4 uProjection; uniform mat4 uModelview; uniform vec3 uResolution; uniform vec3 uOffset; uniform vec3 uDOF; //x:focus distance, y:focus radius, z:max radius uniform vec3 uFade; //x:start distance, y:half distance, z:near fade start attribute vec3 aPosition; attribute vec3 aEuler; attribute vec2 aMisc; //x:size, y:fade varying vec3 pposition; varying float psize; varying float palpha; varying float pdist; //varying mat3 rotMat; varying vec3 normX; varying vec3 normY; varying vec3 normZ; varying vec3 normal; varying float diffuse; varying float specular; varying float rstop; varying float distancefade; void main(void) { // Projection is based on vertical angle vec4 pos = uModelview * vec4(aPosition + uOffset, 1.0); gl_Position = uProjection * pos; gl_PointSize = aMisc.x * uProjection[1][1] / -pos.z * uResolution.y * 0.5; pposition = pos.xyz; psize = aMisc.x; pdist = length(pos.xyz); palpha = smoothstep(0.0, 1.0, (pdist - 0.1) / uFade.z); vec3 elrsn = sin(aEuler); vec3 elrcs = cos(aEuler); mat3 rotx = mat3( 1.0, 0.0, 0.0, 0.0, elrcs.x, elrsn.x, 0.0, -elrsn.x, elrcs.x ); mat3 roty = mat3( elrcs.y, 0.0, -elrsn.y, 0.0, 1.0, 0.0, elrsn.y, 0.0, elrcs.y ); mat3 rotz = mat3( elrcs.z, elrsn.z, 0.0, -elrsn.z, elrcs.z, 0.0, 0.0, 0.0, 1.0 ); mat3 rotmat = rotx * roty * rotz; normal = rotmat[2]; mat3 trrotm = mat3( rotmat[0][0], rotmat[1][0], rotmat[2][0], rotmat[0][1], rotmat[1][1], rotmat[2][1], rotmat[0][2], rotmat[1][2], rotmat[2][2] ); normX = trrotm[0]; normY = trrotm[1]; normZ = trrotm[2]; const vec3 lit = vec3(0.6917144638660746, 0.6917144638660746, -0.20751433915982237); float tmpdfs = dot(lit, normal); if(tmpdfs < 0.0) { normal = -normal; tmpdfs = dot(lit, normal); } diffuse = 0.4 + tmpdfs; vec3 eyev = normalize(-pos.xyz); if(dot(eyev, normal) > 0.0) { vec3 hv = normalize(eyev + lit); specular = pow(max(dot(hv, normal), 0.0), 20.0); } else { specular = 0.0; } rstop = clamp((abs(pdist - uDOF.x) - uDOF.y) / uDOF.z, 0.0, 1.0); rstop = pow(rstop, 0.5); //-0.69315 = ln(0.5) distancefade = min(1.0, exp((uFade.x - pdist) * 0.69315 / uFade.y)); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform vec3 uDOF; //x:focus distance, y:focus radius, z:max radius uniform vec3 uFade; //x:start distance, y:half distance, z:near fade start const vec3 fadeCol = vec3(0.08, 0.03, 0.06); varying vec3 pposition; varying float psize; varying float palpha; varying float pdist; //varying mat3 rotMat; varying vec3 normX; varying vec3 normY; varying vec3 normZ; varying vec3 normal; varying float diffuse; varying float specular; varying float rstop; varying float distancefade; float ellipse(vec2 p, vec2 o, vec2 r) { vec2 lp = (p - o) / r; return length(lp) - 1.0; } void main(void) { vec3 p = vec3(gl_PointCoord - vec2(0.5, 0.5), 0.0) * 2.0; vec3 d = vec3(0.0, 0.0, -1.0); float nd = normZ.z; //dot(-normZ, d); if(abs(nd) < 0.0001) discard; float np = dot(normZ, p); vec3 tp = p + d * np / nd; vec2 coord = vec2(dot(normX, tp), dot(normY, tp)); //angle = 15 degree const float flwrsn = 0.258819045102521; const float flwrcs = 0.965925826289068; mat2 flwrm = mat2(flwrcs, -flwrsn, flwrsn, flwrcs); vec2 flwrp = vec2(abs(coord.x), coord.y) * flwrm; float r; if(flwrp.x < 0.0) { r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.36, 0.96) * 0.5); } else { r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.58, 0.96) * 0.5); } if(r > rstop) discard; vec3 col = mix(vec3(1.0, 0.8, 0.75), vec3(1.0, 0.9, 0.87), r); float grady = mix(0.0, 1.0, pow(coord.y * 0.5 + 0.5, 0.35)); col *= vec3(1.0, grady, grady); col *= mix(0.8, 1.0, pow(abs(coord.x), 0.3)); col = col * diffuse + specular; col = mix(fadeCol, col, distancefade); float alpha = (rstop > 0.001)? (0.5 - r / (rstop * 2.0)) : 1.0; alpha = smoothstep(0.0, 1.0, alpha) * palpha; gl_FragColor = vec4(col * 0.5, alpha); } uniform vec3 uResolution; attribute vec2 aPosition; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { gl_Position = vec4(aPosition, 0.0, 1.0); texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5); screenCoord = aPosition.xy * vec2(uResolution.z, 1.0); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform vec2 uTimes; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { vec3 col; float c; vec2 tmpv = texCoord * vec2(0.8, 1.0) - vec2(0.95, 1.0); c = exp(-pow(length(tmpv) * 1.8, 2.0)); col = mix(vec3(0.02, 0.0, 0.03), vec3(0.96, 0.98, 1.0) * 1.5, c); gl_FragColor = vec4(col * 0.5, 1.0); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform sampler2D uSrc; uniform vec2 uDelta; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { vec4 col = texture2D(uSrc, texCoord); gl_FragColor = vec4(col.rgb * 2.0 - vec3(0.5), 1.0); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform sampler2D uSrc; uniform vec2 uDelta; uniform vec4 uBlurDir; //dir(x, y), stride(z, w) varying vec2 texCoord; varying vec2 screenCoord; void main(void) { vec4 col = texture2D(uSrc, texCoord); col = col + texture2D(uSrc, texCoord + uBlurDir.xy * uDelta); col = col + texture2D(uSrc, texCoord - uBlurDir.xy * uDelta); col = col + texture2D(uSrc, texCoord + (uBlurDir.xy + uBlurDir.zw) * uDelta); col = col + texture2D(uSrc, texCoord - (uBlurDir.xy + uBlurDir.zw) * uDelta); gl_FragColor = col / 5.0; } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform sampler2D uSrc; uniform vec2 uDelta; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { gl_FragColor = texture2D(uSrc, texCoord); } uniform vec3 uResolution; attribute vec2 aPosition; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { gl_Position = vec4(aPosition, 0.0, 1.0); texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5); screenCoord = aPosition.xy * vec2(uResolution.z, 1.0); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform sampler2D uSrc; uniform sampler2D uBloom; uniform vec2 uDelta; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { vec4 srccol = texture2D(uSrc, texCoord) * 2.0; vec4 bloomcol = texture2D(uBloom, texCoord); vec4 col; col = srccol + bloomcol * (vec4(1.0) + srccol); col *= smoothstep(1.0, 0.0, pow(length((texCoord - vec2(0.5)) * 2.0), 1.2) * 0.5); col = pow(col, vec4(0.45454545454545)); //(1.0 / 2.2) gl_FragColor = vec4(col.rgb, 1.0); gl_FragColor.a = 1.0; } L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"log\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/hibiki.model.json\"},\"display\":{\"position\":\"left\",\"width\":150,\"height\":300},\"mobile\":{\"show\":true},\"react\":{\"opacity\":0.7}});"},{"title":"所有分类","date":"2019-12-24T14:46:46.684Z","updated":"2019-12-24T14:46:46.684Z","comments":true,"path":"categories/index.html","permalink":"https://blog.liuchaoming.cn/categories/index.html","excerpt":"","text":""},{"title":"给我留言","date":"2019-12-24T14:46:46.684Z","updated":"2019-12-24T14:46:46.684Z","comments":true,"path":"comments/index.html","permalink":"https://blog.liuchaoming.cn/comments/index.html","excerpt":"","text":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 欢迎灌水"},{"title":"我的友链","date":"2019-09-21T18:52:29.000Z","updated":"2019-12-24T14:46:46.684Z","comments":true,"path":"friends/index.html","permalink":"https://blog.liuchaoming.cn/friends/index.html","excerpt":"","text":"各位大佬想交换友链的话可以在下方留言，必须要有名称、头像链接、和至少一个标签哦～ 名称： Kermit’ Blog头像： https://cdn.jsdelivr.net/gh/liucm-it/ImgHosting/pic/head-img.jpg网址： https://blog.liuchaoming.cn标签： Java、Web前端 分组和标签不合适的话可以留言或者发邮件私聊我进行更改。"},{"title":"所有标签","date":"2019-12-24T14:46:46.684Z","updated":"2019-12-24T14:46:46.684Z","comments":true,"path":"tags/index.html","permalink":"https://blog.liuchaoming.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Vim入门指南","slug":"Vim入门指南","date":"2019-11-23T08:52:48.000Z","updated":"2019-12-24T14:46:46.684Z","comments":true,"path":"posts/25813/","link":"","permalink":"https://blog.liuchaoming.cn/posts/25813/","excerpt":"Vim是一款很老的编辑器，但时至今日还非常流行，以前的Dreamweaver、Sublime Text到现在的VS code、Hbuilder，不少编辑器都有Vim的插件，可以支持Vim的使用方式。而且现在服务器上的编辑基本都默认带有Vim，不可能有其他图形化的编辑器，所以学习了解Vim还是很有必要的。","text":"Vim是一款很老的编辑器，但时至今日还非常流行，以前的Dreamweaver、Sublime Text到现在的VS code、Hbuilder，不少编辑器都有Vim的插件，可以支持Vim的使用方式。而且现在服务器上的编辑基本都默认带有Vim，不可能有其他图形化的编辑器，所以学习了解Vim还是很有必要的。 vi/vim 的基本使用基本上 vi/vim 共分为三种模式，分别是命令模式（Command/normal mode），输入/插入模式（Insert mode）和底线命令模式（Last line mode）。 这三种模式的作用分别是： Vim进入编辑模式的方式 i (insert)光标前输入 a (append)光标后追加输入 o (open a line below)光标下一行输入 A (append after line)光标所在行末尾输入 I (insert before line)光标所在行行首输入 O (append line above)光标所在行上一行输入 Vim编辑模式小技巧Vim设置123456# 打开语法高亮:syntax on# 打开搜索高亮(highlight search):set hls# 打开增量搜索:set incsearch 如何快速纠错 ctrl + h删除上一个字符 ctrl + w删除上一个单词 ctrl + u删除当前行 Vim快速移动 h左移 j下移 k上移 l右移 在单词间切换 w/W 移动到下一个word/WORD开头，e/E移动到下一个word/WORD结尾 b/B 回到上一个word/WORD开头，可以理解为backword word指的是以非空白符分割的单词，WORD以空白符分割的单词 行间搜索移动 同一行快速移动的方式是搜索一个字符并且快速移动到该字符 使用f{char}可以移动到char字符上，t移动到char的前一个字符 如果第一次没搜到，可以用分号(;)/逗号(,)继续搜索该行下一个/上一个 F表示反过来搜索前面的字符 Vim水平移动 0移动到行首第一个字符，^移动到第一个非空白字符 $移动到行尾，g_移动到行尾非空白字符 常用的0和$就可以满足日常需求 Vim垂直移动 可以安装easy-motion插件移动 使用括号()在句子间移动 使用{}在段落间移动 :help可以查看帮助 页面移动 gg/G移动到文件开头和结尾 Ctrl + o快速返回 H/M/L跳转到屏幕的开头(Head)，中间(Middle)和结尾(Lower) Ctrl + u. Ctrl + f. 上下翻页。(upword/forward)。zz置屏幕到中间。 Vim快速增删改查Vim新增 i (insert)光标前输入 a (append)光标后追加输入 o (open a line below)光标下一行输入 A (append after line)光标所在行末尾输入 I (insert before line)光标所在行行首输入 O (append line above)光标所在行上一行输入 Vim删除 vim在normal模式下使用x删除一个字符 使用d(delete)配合文本对象删除一个单词daw/diw(不包含单词后的空白)/dw(delete around word) dd删除一行 dt{char}删除到x的内容(delete to char) d0删除到行首，d$删除到行尾 d和x配合数字来执行多次 2dd删除两行，4x删除4个字符 Vim修改 常用r(replace)，c(change)，s(substitute) normal模式下使用r替换一个字符。s替换一个字符并进入插入模式(编辑模式) 4s删除4个字符并进入插入模式 使用c配合文本对象快速进行修改 R(修改光标位置的字符，覆盖掉旧的字符) S(删除光标行，并进入编辑模式) caw/cw/ciw(删除当前单词，并进入编辑模式) C(删除到行尾，并进入编辑模式) ct{char}(删除到char字符，并进入编辑模式) Vim查询 使用/或者?进行先前或反向搜索 使用n/N跳转到下一个或者上一个匹配 使用*或者#进行当前单词的向前和向后匹配 Vim搜索替换 substitute命令允许查找并替换掉文本，且支持正则表达式 123:[range]s[ubstitute]/&#123;pattern&#125;/&#123;string&#125;/[flags]# 将word单词替换成replace(不包含w_word类型):% s/\\&lt;word\\&gt;/replace/g range表示范围，如：10,20表示10-20行，%表示全部 pattern是要替换的模式，string是替换后的字符文本 flags常用的标志 g(global)表示全局范围执行 c(confirm)表示确认，可以确认或者拒绝修改 n(number)报告匹配到的次数而不替换，可以查询匹配次数 Vim多文件操作 多文件操作相关名词 Buffer是指打开一个文件的内存缓冲区 Window(窗口)是Buffer可视化的分割区域 Tab可以组织窗口为一个工作区 Vim的Buffer缓冲区 Vim打开一个文件后会加载文件内容到缓冲区 之后的修改都是针对内存中的缓冲区，并不会直接保存到文件磁盘 直到在命令模式执行:w(write)的时候才会把修改内容写入到文件里 buffer之间切换 使用:ls会列举当前的缓冲区 使用:b n跳转到第n个缓冲区 :bpre 上一个 :bnext 下一个 :bfirst 第一个 :blast 最后一个 用:b buffer_name加上tab补全来跳转 Vim的Window窗口 Vim窗口是可视化的分割区域 一个缓冲区可以分割成多个窗口，每个窗口可以打开不同的缓冲区 命令 用途 &lt; Ctrl + w &gt; s 水平分割，或者:sp &lt; Ctrl + w &gt; v 垂直分割，或者:vs &lt; Ctrl + w &gt; w 在窗口间循环切换 &lt; Ctrl + w &gt; h 切换到左边窗口 &lt; Ctrl + w &gt; j 切换到下边窗口 &lt; Ctrl + w &gt; k 切换到上边窗口 &lt; Ctrl + w &gt; l 切换到右边窗口 &lt; Ctrl + w &gt; = 使所有窗口登高、等宽 &lt; Ctrl + w &gt; _ 最大化活动窗口的高度 &lt; Ctrl + w &gt; | 最大化活动窗口的宽度 [N]&lt; Ctrl + w &gt; _ 把活动窗口的高度设为[N]行 [N]&lt; Ctrl + w &gt; | 把活动窗口的宽度设为[N]列 Vim的Tab(标签页)将窗口分组 Vim的Tab是可以容纳一系列窗口的容器(:h tabpage) Vim的Tab和其他编辑器不太一样，可以比喻成Linux的虚拟桌面 比如一个Tab全用来编辑Python文件，一个Tab全是HTML文件 相比窗口，Tab一般用的比较少，Tab太多管理比较麻烦 Tab(标签页)操作 Tab使用不多，简单了解常用的操作 命令 用途 :tabe[dit] {filename} 在新标签页中大开{filename} &lt; Ctrl + w &gt;T 把当前窗口移动到一个新标签页 :tabc[lose] 关闭当前标签页及其中的所有窗口 :tabo[nly] 只保留活动标签页，关闭所有其他标签页 如何切换不同的标签页，一般两个就好，太多反而操作繁琐 EX命令 普通模式命令 用途 :tabn[ext] {N} {N}gt 切换到编号为{N}的标签页 :tabn[ext] gt 切换到下一标签页 :tabp[revious] gT 切换到上一标签页 Vim的复制粘贴与寄存器normal模式下复制粘贴 normal模式下复制粘贴分别使用y(yank)和p(put)，剪贴d和p 使用v(visual)命令选中所要复制的地方，然后使用p粘贴 配合文本对象:比如使用yiw复制一个单词，yy复制一行 Vim里的剪贴(cut)复制(copy)粘贴(paste)分别是delete/yank/put insert模式下复制粘贴 和平常文本编辑器差不多，但粘贴可能会有缩进问题 :set autoindent设置自动缩进，代码粘贴缩进还是错乱 使用:set paste后粘贴，代码错乱解决，自动缩进没了，:set nopaste后恢复 Vim的寄存器 Vim里操作的是寄存器而不是系统剪贴板，和其他编辑器不同 默认使用d删除或者y复制的内容都放到无名寄存器 用x删除一个字符放到无名寄存器，然后p粘贴，可调换俩字符位置 Vim不使用单一的剪贴板进行剪贴、复制与粘贴，而是多组寄存器 通过&quot;{register}前缀可以指定寄存器，不指定默认用无名寄存器 使用&quot;ayiw复制一个单词到寄存器a中，&quot;bdd删除当前行到寄存器b中 Vim中 &quot;&quot;表示无名寄存器，缺省使用。&quot;&quot;p等同于p 除了有名的寄存器a-z，Vim中还有一些其他常见寄存器 复制专用寄存器&quot;0使用y复制文本的同时会被拷贝到复制寄存器0 系统剪贴板&quot;+可以在复制前加上&quot;+复制到系统剪贴板 其他寄存器如&quot;%当前文件名，&quot;.上次插入的文本 查看是否支持系统剪贴板 1234# 输出：1支持0不支持:echo has('clipboard')# 设置vim直接复制粘贴系统剪贴板内容:set clipboard=unnamed Vim强大的宏(macro) - Vim的批量编辑 宏可以看出是一系列命令的集合 可以使用宏录制一系列操作，然后回放 宏可以非常方便把一系列命令用在多文本上 如何使用宏 Vim使用q来录制，同时也是使用q结束录制 使用q{register}选择要保存的寄存器，把录制命令保存其中 使用@{register}回放寄存器中保存的一系列命令 Vim的补全 补全是根据当前环境上下文由编辑器猜你想输入的东西 如补全一个单词、文件名，或者代码中的函数名、变量名等 Vim中提供了多种补全功能，还可以由插件拓展功能实现代码补全 Vim中有很多种补全方式 命令 补全类型 &lt; Ctrl - n &gt; 补全关键字 &lt; Ctrl - x &gt; &lt; Ctrl - n &gt; 当前缓冲区关键字 &lt; Ctrl - x &gt; &lt; Ctrl - i &gt; 包含文件关键字 &lt; Ctrl - x &gt; &lt; Ctrl - j &gt; 标签文件关键字 &lt; Ctrl - x &gt; &lt; Ctrl - k &gt; 字典查找 &lt; Ctrl - x &gt; &lt; Ctrl - l &gt; 整行补全 &lt; Ctrl - x &gt; &lt; Ctrl - f &gt; 文件名补全 &lt; Ctrl - x &gt; &lt; Ctrl - o &gt; 全能(Omni)补全 常见的有以下几种类型: 使用 ctrl + n 和 ctrl + p 补全单词 使用 ctrl + x 和 ctrl + f 补全文件名 使用 ctrl + x 和 ctrl + o 补全代码，需要开启文件类型检查，安装插件 插入文件名 1:r! echo % 插入文件名全路径 1:r! echo %:p more info 12:help read:help filename-modifiers 给Vim更换配色 使用：colorscheme显示当前的主题配色，默认default 使用：colorscheme &lt;ctrl+d&gt; 可以显示所有的配色 用：colorscheme 配色名，就可以修改配色 GitHub配色 Vim的配置 Vim里非常常用的设置，如：set number设置行号 底线命令模式的配置都是Vim里临时设置，没法持久化 Vimrc提供了一种持久化配置的方式 编写Vim配置文件 Liunx/Unix下新建一个隐藏文件vim ~/.vimrc windows系统vim $MYVIMRC，通过环境变量编辑配置文件 Vim相关配置 常用设置，如:set nu设置行号，colorscheme hybrid设置主题 常用Vim映射，比如noremap &lt; leader &gt;w : w&lt; cr &gt; 保存文件 自定义vimscript函数和插件配置 vimrc配置参考 1234567891011121314151617181920212223242526272829303132333435363738394041424344\" 常用设置\" 设置行号set numbercolorscheme hybrid\" 按F2进入粘贴模式set pastetoggle=&lt;F2&gt;\" 高亮搜索set hlsearch\" 设置折叠方式set foldmethod=indent\" 一些方便的映射let mapleader=\",\"let g:mapleader=\",\"\" 使用 jj 进入normal模式，`^表示上一次编辑模式的位置，这里进入normal模式保持光标不变inoremap jj &lt;Esc&gt;`^\" 使用 leader+w 直接保存inoremap &lt;leader&gt;w &lt;Esc&gt;:w&lt;cr&gt;noremap &lt;leader&gt;w :w&lt;cr&gt;\" 切换 buffernnoremap &lt;silent&gt; [b :bprevious&lt;CR&gt;nnoremap &lt;silent&gt; [n :bnext&lt;CR&gt;\" 用 ctrl+h/j/k/l swith windownoremap &lt;C-h&gt; &lt;C-w&gt;hnoremap &lt;C-j&gt; &lt;C-w&gt;jnoremap &lt;C-k&gt; &lt;C-w&gt;knoremap &lt;C-l&gt; &lt;C-w&gt;l\" sudo方式写入cnoremap w!! w !sudo tee % &gt;/dev/null\" json格式化com! FormatJSON %!python3 -m json.tool\" 插件设置，这里使用了vim-plugcall plug#begin('~/.vim/plugged')\" 安装插件只需要把 Github 地址放到这里重启后执行 :PlugInstallPlug 'mhinz/vim-startify'Plug 'scrooloose/nerdtrre'call plug#end() 12# 查看vim所有设置选项:h option-list Vim中的映射(修改默认快捷键配置) Vim中映射复杂，源于vim有多种模式 设置leader键let mapleader = “,” 常用逗号或者空格 用inoremap &lt;leader&gt;w &lt;Esc&gt;:w&lt;cr&gt; 在插入模式保存 基本映射 使用map，如:map - x然后按-就会删除字符 :map &lt;sapce&gt; viw 映射vim空格选中整个单词 :map &lt;c-d&gt; dd 就可以使用ctrl + d执行dd删除一行 :unmap -取消-的映射 常用模式normal/visual/insert模式定义映射 用nmap/vmap/imap定义映射只在normal/visual/insert模式分别有效 :vmap \\ U把在visual模式下选中的文本大小(u/U转换大小写) 递归解释，\\将删除整行 12:nmap - dd:nmap \\ - 非递归映射 使用nnoremap/vnoremap/inoremap映射 尽量全部使用非递归映射 Vim如何安装插件 直接通过clone插件代码,选择一个插件管理器 常见的有vim-plug，Vundle，Pathogen，Dein.Vim，volt等 推荐vim-plug vim-plug插件安装 vim-plug GitHub地址 Unix安装 12curl -fLo ~/.vim/autoload/plug.vim --create-dirs \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim Windows (PowerShell)安装 12345678md ~\\vimfiles\\autoload$uri = 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'(New-Object Net.WebClient).DownloadFile( $uri, $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath( \"~\\vimfiles\\autoload\\plug.vim\" )) .vimrc中配置示例 12345678910111213141516171819202122232425262728293031323334353637\" Specify a directory for plugins\" - For Neovim: stdpath('data') . '/plugged'\" - Avoid using standard Vim directory names like 'plugin'call plug#begin('~/.vim/plugged')\" Make sure you use single quotes\" Shorthand notation; fetches https://github.com/junegunn/vim-easy-alignPlug 'junegunn/vim-easy-align'\" Any valid git URL is allowedPlug 'https://github.com/junegunn/vim-github-dashboard.git'\" Multiple Plug commands can be written in a single line using | separatorsPlug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'\" On-demand loadingPlug 'scrooloose/nerdtree', &#123; 'on': 'NERDTreeToggle' &#125;Plug 'tpope/vim-fireplace', &#123; 'for': 'clojure' &#125;\" Using a non-master branchPlug 'rdnetto/YCM-Generator', &#123; 'branch': 'stable' &#125;\" Using a tagged release; wildcard allowed (requires git 1.9.2 or above)Plug 'fatih/vim-go', &#123; 'tag': '*' &#125;\" Plugin optionsPlug 'nsf/gocode', &#123; 'tag': 'v.20150303', 'rtp': 'vim' &#125;\" Plugin outside ~/.vim/plugged with post-update hookPlug 'junegunn/fzf', &#123; 'dir': '~/.fzf', 'do': './install --all' &#125;\" Unmanaged plugin (manually installed and updated)Plug '~/my-prototype-plugin'\" Initialize plugin systemcall plug#end() 重新加载source .vimrc并且在vim命令行执行:PlugInstall安装插件. 推荐vim插件 vim-startify修改启动界面 vim-airline状态栏美化 indentline增加代码缩进线条 hybird配色 solarized配色 gruvbox配色 ctrlp模糊搜索文件并打开 easymotion移动跳转插件 surround快速编辑成对的符号 fzf模糊搜索工具 far搜索替换工具 vim-go golang语言插件 python-mode python语言插件 tagbar代码大纲浏览插件 interestingwords高亮变量单词 deoplete异步代码补全 coc强大的neovim/vim8补全插件，LSP支持 neoformat代码格式化插件 autoformat格式化插件 neomake静态检查插件 ale静态检查lint插件 commentary快速注释插件 fugitive vim的git插件 vim-gitgutter vim显示文件改动 gv命令行查看提交记录 Vim配置推荐 SpaceVim vim-config 如何搜寻vim插件 搜索引擎搜索查找插件 Vim Awesome 网上开源的vim配置借鉴想要的插件","categories":[{"name":"Vim","slug":"Vim","permalink":"https://blog.liuchaoming.cn/categories/Vim/"}],"tags":[{"name":"Vim","slug":"Vim","permalink":"https://blog.liuchaoming.cn/tags/Vim/"},{"name":"Vi","slug":"Vi","permalink":"https://blog.liuchaoming.cn/tags/Vi/"}]},{"title":"git常用操作和问题总结","slug":"git常用操作命令","date":"2019-11-19T22:28:51.000Z","updated":"2019-12-24T14:46:46.684Z","comments":true,"path":"posts/19017/","link":"","permalink":"https://blog.liuchaoming.cn/posts/19017/","excerpt":"","text":"我们首先将一个已存在的 Git 仓库添加为正在工作的仓库的子模块。 你可以通过在 git submodule add 命令后面加上想要跟踪的项目 URL 来添加新的子模块。 例如添加一个名为 “Connector” 的库。 1234567$ git submodule add https://github.com/xxx/ConnectorCloning into &apos;DbConnector&apos;...remote: Counting objects: 11, done.remote: Compressing objects: 100% (10/10), done.remote: Total 11 (delta 0), reused 11 (delta 0)Unpacking objects: 100% (11/11), done.Checking connectivity... done. 2、每次更新.gitmodules文件, 必须同步下(git submodule sync), 否则识别不到. 3、如何为一个项目添加一个子项目呢? git submodule add 项目地址, 然后push到你的远程仓库(如gitlab/github)，你可以在项目里看到“子项目名+@+序列号”的链接. 4、如何删除submodule呢? 1git rm &lt;submodule-name&gt; || git submodule deinit &lt;submodule-name&gt; 5、一旦依赖的子项目过多(比如80个), 该如何批量操作呢? 1234git submodule foreach &lt;command&gt; eg: git submodule foreach git checkout master# 该命令会按照.gitmodules里的path寻找所有的三方模块,并在每一个模块中都执行foreach后的命令eg: git submodule foreach git submodule update 6、更新了子项目, 那么父项目也需要更新. 即子项目属于父项目的一部分, 在子项目commit后, 父也需要. 7、如何将一个包含子项目的项目所有内容都clone下来呢? 1234git clone https://xxx.xxx.xxx/xxx/xxx.gitgit submodule init &amp;&amp; git submodule update# 下面这一句的效果和上面三条命令的效果是一样的,多加了个参数 `--recursive`git clone https://xxx.xxx.xxx/xxx/xxx.git --recursive 参考链接","categories":[{"name":"Git","slug":"Git","permalink":"https://blog.liuchaoming.cn/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://blog.liuchaoming.cn/tags/Git/"}]},{"title":"配置虚拟机桥接模式网络","slug":"配置虚拟机桥接模式网络","date":"2019-11-14T21:01:14.000Z","updated":"2019-12-24T14:46:46.684Z","comments":true,"path":"posts/4143/","link":"","permalink":"https://blog.liuchaoming.cn/posts/4143/","excerpt":"虚拟机CentOS7系统桥接模式网络配置。","text":"虚拟机CentOS7系统桥接模式网络配置。 配置ip地址等信息在/etc/sysconfig/network-scripts/ifcfg-eth0文件(可能文件名不一样，和网卡名有关)1vim /etc/sysconfig/network-scripts/ifcfg-eth0 修改如下： 123456789TYPE=&quot;Ethernet&quot; # 网络类型为以太网BOOTPROTO=&quot;static&quot; # 手动分配ipNAME=&quot;eth0&quot; # 网卡设备名，设备名一定要跟文件名一致DEVICE=&quot;eth0&quot; # 网卡设备名，设备名一定要跟文件名一致ONBOOT=&quot;yes&quot; # 该网卡是否随网络服务启动IPADDR=&quot;192.168.22.101&quot; # 该网卡ip地址就是你要配置的固定IP，如果你要用xshell等工具连接，22这个网段最好和你自己的电脑网段一致，否则有可能用xshell连接失败且连接不上网GATEWAY=&quot;192.168.22.1&quot; # 网关NETMASK=&quot;255.255.255.0&quot; # 子网掩码DNS1=&quot;8.8.8.8&quot; # DNS，8.8.8.8为Google提供的免费DNS服务器的IP地址 配置网络工作在/etc/sysconfig/network文件中增加以下配置 1234vim /etc/sysconfig/network# 修改NETWORKING=yes #网络是否工作，一定不能是no 配置公共DNS服务在/etc/resolv.conf文件中增加以下配置(可选) 1nameserver 8.8.8.8 关闭防火墙12systemctl stop firewalld # 临时关闭systemctl disable firewalld # 禁止开机启动 重启网络服务1service network restart","categories":[{"name":"CentOS","slug":"CentOS","permalink":"https://blog.liuchaoming.cn/categories/CentOS/"}],"tags":[{"name":"CentOS","slug":"CentOS","permalink":"https://blog.liuchaoming.cn/tags/CentOS/"},{"name":"虚拟机","slug":"虚拟机","permalink":"https://blog.liuchaoming.cn/tags/虚拟机/"},{"name":"网络配置","slug":"网络配置","permalink":"https://blog.liuchaoming.cn/tags/网络配置/"}]},{"title":"Git设置只需要输入一次密码, 就可以进行pull/push操作，不用每次输入密码","slug":"Git设置永久保存密码","date":"2019-09-28T21:38:08.000Z","updated":"2019-12-24T14:46:46.684Z","comments":true,"path":"posts/62324/","link":"","permalink":"https://blog.liuchaoming.cn/posts/62324/","excerpt":"使用https的方式，每次pull或者push都要输入账号密码，这样操作很烦，又不想设置SSH公钥到远程仓库。如下设置即可输入一次就不用再手输入密码的困扰而且又享受https带来的极速和方便。","text":"使用https的方式，每次pull或者push都要输入账号密码，这样操作很烦，又不想设置SSH公钥到远程仓库。如下设置即可输入一次就不用再手输入密码的困扰而且又享受https带来的极速和方便。 设置输入一次密码后记住密码（默认时间15分钟）： 1git config --global credential.helper cache 也可以自己设置时间，比如一个小时之后失效，可以这样做： 1git config credential.helper &apos;cache --timeout=3600&apos; 还可以永久存储密码： 1git config --global credential.helper store","categories":[{"name":"Git","slug":"Git","permalink":"https://blog.liuchaoming.cn/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://blog.liuchaoming.cn/tags/Git/"}]},{"title":"Git提交时忽略已提交过且本地修改过的文件","slug":"Git提交时忽略已提交过且本地修改过的文件","date":"2019-09-26T19:04:27.000Z","updated":"2019-12-24T14:46:46.684Z","comments":true,"path":"posts/58014/","link":"","permalink":"https://blog.liuchaoming.cn/posts/58014/","excerpt":"有的时候项目的配置文件和测试环境的不一样，本地开发时需要将配置改为本地的，修改后的文件又不提交到远程仓库，怎么办呢？","text":"有的时候项目的配置文件和测试环境的不一样，本地开发时需要将配置改为本地的，修改后的文件又不提交到远程仓库，怎么办呢？ 可以使用如下命令忽略已经修改后但是不提交的文件 1git update-index --assume-unchanged [file-path] 重新恢复提交的命令 1git update-index --no-assume-unchanged [file-path]","categories":[{"name":"Git","slug":"Git","permalink":"https://blog.liuchaoming.cn/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://blog.liuchaoming.cn/tags/Git/"}]},{"title":"Liunx终端关闭后shell脚本继续运行","slug":"Liunx终端关闭后shell脚本继续运行","date":"2019-09-13T06:22:11.000Z","updated":"2019-12-24T14:46:46.684Z","comments":true,"path":"posts/2849/","link":"","permalink":"https://blog.liuchaoming.cn/posts/2849/","excerpt":"一直执行的shell脚本，在终端关闭后就会退出，怎么解决？","text":"一直执行的shell脚本，在终端关闭后就会退出，怎么解决？ 比如运行xxx.sh 1bash xxx.sh 按下ctrl-z中断脚本运行，此时系统提示： 12^Z[1]+ Stopped bash xxx.sh 意思是编号为1的任务挂起了，[1]就是任务的编号，里面的数字也可能是2，3，4… 输入命令： 1bg 1 这个命令将1号任务切换到后台执行 输入命令： 1disown -h %1 这个命令的是将1号任务从当前shell的任务列表中移除，并且忽略HUP信号(Liunx的中断信号)，这样，即使当前Shell结束了，这个任务也不会被结束，而是继续留在后台执行。","categories":[{"name":"Liunx","slug":"Liunx","permalink":"https://blog.liuchaoming.cn/categories/Liunx/"}],"tags":[{"name":"Liunx","slug":"Liunx","permalink":"https://blog.liuchaoming.cn/tags/Liunx/"}]},{"title":"Docker拉取镜像出错","slug":"Docker拉取镜像出错","date":"2019-09-12T21:54:41.000Z","updated":"2019-12-24T14:46:46.684Z","comments":true,"path":"posts/6854/","link":"","permalink":"https://blog.liuchaoming.cn/posts/6854/","excerpt":"docker pull镜像的时候出错 1ERROR: Get https://registry-1.docker.io/v2/: dial tcp: lookup registry-1.docker.io on 8.8.8.8:53: too many redirects","text":"docker pull镜像的时候出错 1ERROR: Get https://registry-1.docker.io/v2/: dial tcp: lookup registry-1.docker.io on 8.8.8.8:53: too many redirects 解决方法执行以下命令1dig @114.114.114.114 registry-1.docker.io 执行后结果如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243; &lt;&lt;&gt;&gt; DiG 9.9.4-RedHat-9.9.4-61.el7 &lt;&lt;&gt;&gt; @114.114.114.114 registry-1.docker.io; (1 server found);; global options: +cmd;; Got answer:;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 52963;; flags: qr rd ra; QUERY: 1, ANSWER: 8, AUTHORITY: 4, ADDITIONAL: 9;; OPT PSEUDOSECTION:; EDNS: version: 0, flags:; udp: 4096;; QUESTION SECTION:;registry-1.docker.io. IN A;; ANSWER SECTION:registry-1.docker.io. 300 IN A 3.210.179.11registry-1.docker.io. 300 IN A 52.55.198.220registry-1.docker.io. 300 IN A 52.70.175.131registry-1.docker.io. 300 IN A 54.175.43.85registry-1.docker.io. 300 IN A 54.210.105.17registry-1.docker.io. 300 IN A 100.24.246.89registry-1.docker.io. 300 IN A 54.88.231.116registry-1.docker.io. 300 IN A 52.87.94.70;; AUTHORITY SECTION:docker.io. 61407 IN NS ns-1168.awsdns-18.org.docker.io. 61407 IN NS ns-421.awsdns-52.com.docker.io. 61407 IN NS ns-1827.awsdns-36.co.uk.docker.io. 61407 IN NS ns-513.awsdns-00.net.;; ADDITIONAL SECTION:ns-1827.awsdns-36.co.uk. 57947 IN A 205.251.199.35ns-1827.awsdns-36.co.uk. 57273 IN AAAA 2600:9000:5307:2300::1ns-1168.awsdns-18.org. 47450 IN A 205.251.196.144ns-1168.awsdns-18.org. 57090 IN AAAA 2600:9000:5304:9000::1ns-421.awsdns-52.com. 143703 IN A 205.251.193.165ns-421.awsdns-52.com. 57067 IN AAAA 2600:9000:5301:a500::1ns-513.awsdns-00.net. 45649 IN A 205.251.194.1ns-513.awsdns-00.net. 45650 IN AAAA 2600:9000:5302:100::1;; Query time: 5 msec;; SERVER: 114.114.114.114#53(114.114.114.114);; WHEN: Thu Sep 12 21:50:15 CST 2019;; MSG SIZE rcvd: 493 修改 /etc/hosts文件，强制docker.io域名解析到可用IP，添加13.210.179.11 registry-1.docker.io","categories":[{"name":"Docker","slug":"Docker","permalink":"https://blog.liuchaoming.cn/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://blog.liuchaoming.cn/tags/Docker/"}]},{"title":"Liunx记录登录用户和操作记录","slug":"Liunx记录登录用户和操作记录","date":"2019-09-11T23:15:37.000Z","updated":"2019-12-24T14:46:46.684Z","comments":true,"path":"posts/62916/","link":"","permalink":"https://blog.liuchaoming.cn/posts/62916/","excerpt":"","text":"通过在/etc/profile里面加入以下代码就可以实现记录登陆后的IP地址和某用户名所操作的历史记录 123456789101112131415161718192021PS1=\"`whoami`@`hostname`:\"'[$PWD]'historyUSER_IP=`who -u am i 2&gt;/dev/null| awk '&#123;print $NF&#125;'|sed -e 's/[()]//g'`if [ \"$USER_IP\" = \"\" ]thenUSER_IP=`hostname`fiif [ ! -d /tmp/dbasky ]thenmkdir /tmp/dbaskychmod 777 /tmp/dbaskyfiif [ ! -d /tmp/dbasky/$&#123;LOGNAME&#125; ]thenmkdir /tmp/dbasky/$&#123;LOGNAME&#125;chmod 300 /tmp/dbasky/$&#123;LOGNAME&#125;fiexport HISTSIZE=4096DT=`date \"+%Y-%m-%d_%H:%M:%S\"`export HISTFILE=\"/tmp/dbasky/$&#123;LOGNAME&#125;/$&#123;USER_IP&#125; dbasky.$DT\"chmod 600 /tmp/dbasky/$&#123;LOGNAME&#125;/*dbasky* 2&gt;/dev/null 别忘记执行下面命令使脚本生效 1source /etc/profile /tmp/dbasky/root目录下查看记录信息","categories":[{"name":"Liunx","slug":"Liunx","permalink":"https://blog.liuchaoming.cn/categories/Liunx/"}],"tags":[{"name":"Liunx","slug":"Liunx","permalink":"https://blog.liuchaoming.cn/tags/Liunx/"}]},{"title":"Centos7上安装Docker","slug":"Centos7上安装Docker","date":"2019-09-10T21:13:55.000Z","updated":"2019-12-24T14:46:46.684Z","comments":true,"path":"posts/19477/","link":"","permalink":"https://blog.liuchaoming.cn/posts/19477/","excerpt":"","text":"通过yum源安装docker1yum -y install docker 启动docker1systemctl start docker 开机自启1sudo systemctl enable docker","categories":[{"name":"Docker","slug":"Docker","permalink":"https://blog.liuchaoming.cn/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://blog.liuchaoming.cn/tags/Docker/"}]},{"title":"Docker运行mysql挂载数据卷权限问题","slug":"Docker运行mysql挂载数据卷权限问题","date":"2019-09-08T12:04:49.000Z","updated":"2019-12-24T14:46:46.684Z","comments":true,"path":"posts/53756/","link":"","permalink":"https://blog.liuchaoming.cn/posts/53756/","excerpt":"使用docker-compose运行mysql容器报错，没有执行权限的问题","text":"使用docker-compose运行mysql容器报错，没有执行权限的问题 docker-compose.yml 内容如下所示1234567891011121314version: &quot;2&quot;services: mysql: container_name: mysql image: mysql:5.5.60 restart: always ports: - &quot;3306:3306&quot; volumes: - ./mysql/data:/var/lib/mysql environment: MYSQL_ROOT_PASSWORD: &quot;123456&quot; 报错信息1chown: cannot read directory '/var/lib/mysql/': Permission denied 解决方法该原因为centOs7默认开启selinux安全模块,需要临时关闭该安全模块。 12临时关闭selinux：su -c &quot;setenforce 0&quot;重新开启selinux：su -c &quot;setenforce 1&quot; 或者添加目录到白名单，添加selinux规则，将要挂载的目录添加到白名单： 1chcon -Rt svirt_sandbox_file_t ./mysql/data","categories":[{"name":"Docker","slug":"Docker","permalink":"https://blog.liuchaoming.cn/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://blog.liuchaoming.cn/tags/Docker/"},{"name":"Mysql","slug":"Mysql","permalink":"https://blog.liuchaoming.cn/tags/Mysql/"}]},{"title":"git push到GitHub的时候遇到! [rejected] master -> master (non-fast-forward)的问题","slug":"git-push到GitHub的时候遇到的问题","date":"2019-09-05T21:38:03.000Z","updated":"2019-12-24T14:46:46.684Z","comments":true,"path":"posts/59083/","link":"","permalink":"https://blog.liuchaoming.cn/posts/59083/","excerpt":"git push到GitHub的时候遇到! [rejected] master -&gt; master (non-fast-forward)的问题","text":"git push到GitHub的时候遇到! [rejected] master -&gt; master (non-fast-forward)的问题 出现错误的原因1、在manage文件夹里打开git，输入git init初始化本地仓库，GitHub创建远程仓库manage 2、以下命令关联本地和远程仓库，xxx为github厂库用户名 1git remote add origin git@github.com:xxx/manage.git 3、本地已经有项目代码了在add和commit之后，想要push到远程仓库，报错： 123456 ! [rejected] master -&gt; master (non-fast-forward)error: failed to push some refs to &apos;git@github.com:xxx/spring-study.git&apos;hint: Updates were rejected because the tip of your current branch is behindhint: its remote counterpart. Integrate the remote changes (e.g.hint: &apos;git pull ...&apos;) before pushing again.hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details. 解决方式1、git pull origin master –allow-unrelated-histories //把远程仓库和本地同步，消除差异 2、重新add和commit相应文件 3、执行命令 1git push origin master 4、此时就能push成功了","categories":[{"name":"Git","slug":"Git","permalink":"https://blog.liuchaoming.cn/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://blog.liuchaoming.cn/tags/Git/"},{"name":"GitHub","slug":"GitHub","permalink":"https://blog.liuchaoming.cn/tags/GitHub/"}]},{"title":"关于java的垃圾收集器","slug":"关于java的垃圾收集器","date":"2019-09-04T21:00:20.000Z","updated":"2019-12-24T14:46:46.684Z","comments":true,"path":"posts/53302/","link":"","permalink":"https://blog.liuchaoming.cn/posts/53302/","excerpt":"虽然对各个收集器进行比较，但并非要挑选出一个最好的收集器。因为知道现在为止还没有所谓最好的垃圾收集器出现，也更加没有万能的垃圾收集器，而是根据具体应用场景选择适合自己的垃圾收集器。如果有一种任何场景下都适用的完美收集器存在，那么HotSpot虚拟机就不会实现那么多不同的垃圾收集器了","text":"虽然对各个收集器进行比较，但并非要挑选出一个最好的收集器。因为知道现在为止还没有所谓最好的垃圾收集器出现，也更加没有万能的垃圾收集器，而是根据具体应用场景选择适合自己的垃圾收集器。如果有一种任何场景下都适用的完美收集器存在，那么HotSpot虚拟机就不会实现那么多不同的垃圾收集器了 Serial 收集器 Serial（串行）收集器收集器是最基本、历史最悠久的垃圾收集器了。看名字就知道这个收集器是一个单线程收集器了。它的 “单线程” 的意义不仅仅意味着它只会使用一条垃圾收集线程去完成垃圾收集工作，更重要的是它在进行垃圾收集工作的时候必须暂停其他所有的工作线程（ “Stop The World” ），直到它收集结束。 虚拟机的设计者们当然知道 Stop The World 带来的不良用户体验，所以在后续的垃圾收集器设计中停顿时间在不断缩短（仍然还有停顿，寻找最优秀的垃圾收集器的过程仍然在继续）。 但是 Serial 收集器有没有优于其他垃圾收集器的地方呢？当然有，它简单而高效（与其他收集器的单线程相比）。Serial 收集器由于没有线程交互的开销，自然可以获得很高的单线程收集效率。Serial 收集器对于运行在 Client 模式下的虚拟机来说是个不错的选择 ParNew 收集器 ParNew 收集器其实就是 Serial 收集器的多线程版本，除了使用多线程进行垃圾收集外，其余行为（控制参数、收集算法、回收策略等等）和 Serial 收集器完全一样。 它是许多运行在 Server 模式下的虚拟机的首要选择，除了 Serial 收集器外，只有它能与 CMS 收集器（真正意义上的并发收集器，后面会介绍到）配合工作。 并行和并发概念：并行（Parallel） ：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。并发（Concurrent）：指用户线程与垃圾收集线程同时执行（但不一定是并行，可能会交替执行），用户程序在继续运行，而垃圾收集器运行在另一个 CPU 上。 Parallel Scavenge 收集器 Parallel Scavenge 收集器也是使用复制算法的多线程收集器，它看上去几乎和ParNew都一样 1234567-XX:+UseParallelGC 使用 Parallel 收集器+ 老年代串行-XX:+UseParallelOldGC 使用 Parallel 收集器+ 老年代并行 Parallel Scavenge 收集器关注点是吞吐量（高效率的利用 CPU）。CMS 等垃圾收集器的关注点更多的是用户线程的停顿时间（提高用户体验）。所谓吞吐量就是 CPU 中用于运行用户代码的时间与 CPU 总消耗时间的比值。 Parallel Scavenge 收集器提供了很多参数供用户找到最合适的停顿时间或最大吞吐量，如果对于收集器运作不太了解的话，手工优化存在困难的话可以选择把内存管理优化交给虚拟机去完成也是一个不错的选择。 Serial Old 收集器 Serial 收集器的老年代版本，它同样是一个单线程收集器。它主要有两大用途：一种用途是在 JDK1.5 以及以前的版本中与 Parallel Scavenge 收集器搭配使用，另一种用途是作为 CMS 收集器的后备方案。 Parallel Old 收集器 Parallel Scavenge 收集器的老年代版本。使用多线程和“标记-整理”算法。在注重吞吐量以及 CPU 资源的场合，都可以优先考虑 Parallel Scavenge 收集器和 Parallel Old 收集器。 CMS 收集器 CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。它非常符合在注重用户体验的应用上使用。 CMS（Concurrent Mark Sweep）收集器是 HotSpot 虚拟机第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程（基本上）同时工作。 从名字中的Mark Sweep这两个词可以看出，CMS 收集器是一种 “标记-清除”算法实现的，它的运作过程相比于前面几种垃圾收集器来说更加复杂一些。整个过程分为四个步骤： 初始标记： 暂停所有的其他线程，并记录下直接与 root 相连的对象，速度很快 ； 并发标记： 同时开启 GC 和用户线程，用一个闭包结构去记录可达对象。但在这个阶段结束，这个闭包结构并不能保证包含当前所有的可达对象。因为用户线程可能会不断的更新引用域，所以 GC 线程无法保证可达性分析的实时性。所以这个算法里会跟踪记录这些发生引用更新的地方。 重新标记： 重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短 并发清除： 开启用户线程，同时 GC 线程开始对为标记的区域做清扫。 从它的名字就可以看出它是一款优秀的垃圾收集器，主要优点：并发收集、低停顿。但是它有下面三个明显的缺点： 对 CPU 资源敏感； 无法处理浮动垃圾； 它使用的回收算法-“标记-清除”算法会导致收集结束时会有大量空间碎片产生。 G1 收集器 G1 (Garbage-First) 是一款面向服务器的垃圾收集器,主要针对配备多颗处理器及大容量内存的机器. 以极高概率满足 GC 停顿时间要求的同时,还具备高吞吐量性能特征. 被视为 JDK1.7 中 HotSpot 虚拟机的一个重要进化特征。它具备一下特点： 并行与并发：G1 能充分利用 CPU、多核环境下的硬件优势，使用多个 CPU（CPU 或者 CPU 核心）来缩短 Stop-The-World 停顿时间。部分其他收集器原本需要停顿 Java 线程执行的 GC 动作，G1 收集器仍然可以通过并发的方式让 java 程序继续执行。 分代收集：虽然 G1 可以不需要其他收集器配合就能独立管理整个 GC 堆，但是还是保留了分代的概念。 空间整合：与 CMS 的“标记–清理”算法不同，G1 从整体来看是基于“标记整理”算法实现的收集器；从局部上来看是基于“复制”算法实现的。 可预测的停顿：这是 G1 相对于 CMS 的另一个大优势，降低停顿时间是 G1 和 CMS 共同的关注点，但 G1 除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为 M 毫秒的时间片段内。 G1 收集器的运作大致分为以下几个步骤： 初始标记 并发标记 最终标记 筛选回收 G1 收集器在后台维护了一个优先列表，每次根据允许的收集时间，优先选择回收价值最大的 Region(这也就是它的名字 Garbage-First 的由来)。这种使用 Region 划分内存空间以及有优先级的区域回收方式，保证了 GF 收集器在有限时间内可以尽可能高的收集效率（把内存化整为零）。","categories":[{"name":"Java","slug":"Java","permalink":"https://blog.liuchaoming.cn/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://blog.liuchaoming.cn/tags/Java/"}]},{"title":"Java8的Lambda表达式","slug":"Java8的Lambda表达式-上","date":"2019-08-30T21:46:34.000Z","updated":"2019-12-24T14:46:46.684Z","comments":true,"path":"posts/43742/","link":"","permalink":"https://blog.liuchaoming.cn/posts/43742/","excerpt":"Java 8版本是现在Java最流行的一个版本。主要改进Java在面向对象的基础上对函数式编程的支持。本文将展示Lambda的基本语法。","text":"Java 8版本是现在Java最流行的一个版本。主要改进Java在面向对象的基础上对函数式编程的支持。本文将展示Lambda的基本语法。 为什么使用Lambda表达式我们使用Java的集合经常会定义比较器来进行集合排序。比如要按照字符串长度对字符进行排序，实现一个自定义的Comparator对象并传递给方法进行排序，如： 12345678class LengthComparator implements Comparator&lt;String&gt; &#123; public int compare(String firstStr, String secondStr) &#123; return Integer.compare(firstStr.length(), secondStr.length()); &#125;&#125;Arrays.sort(strings, new LengthComparator()); 编写这一段用于比较的代码片段，封装在自定义的Comparator里。Arrays.sort方法会在适当时机就会调用此代码片段，对strings数组进行排序。那么，这个适当时机，是什么时候呢？它可能是某个按钮被点击时，也可能是某个新线程被启动时，如： 12345678910class MyRunner implements Runnable &#123; public void run() &#123; for(int i = 0; i &lt; 1000; i++) &#123; System.our.println(\"do work\"); &#125; &#125; ...&#125;new Thread(new MyRunner()).start(); 把一段代码块传递 - 线程池，排序方法。希望在适当时机需要时，调用这段代码来进行相关工作或排序。 在java8以前，想要传递代码块很不容易。我们只能把代码块写在一个特殊的类里, 或者使用匿名内部类的方式，实例化一个类对象来传递这段代码。 Lambda的语法对于字符串排序，需要明确两个问题 处理传入的参数类型是什么？是什么数据类型？ 使用什么代码片段来进行处理？ 于是，Lambda的表达式可以: 1(String str1, String str2) -&gt; Integer.compare(str1.length(), str2.length()); 如果可以推断Lambda的参数类型，可以省略类型，如： 1Comparator&lt;String&gt; com = (str1, str2) -&gt; Integer.compare(str1.length(), str2.length());","categories":[{"name":"Java","slug":"Java","permalink":"https://blog.liuchaoming.cn/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://blog.liuchaoming.cn/tags/Java/"}]},{"title":"Mysql导入导出命令详解","slug":"Mysql导入导出命令详解","date":"2019-08-13T20:10:29.000Z","updated":"2019-12-24T14:46:46.684Z","comments":true,"path":"posts/62076/","link":"","permalink":"https://blog.liuchaoming.cn/posts/62076/","excerpt":"Mysql导入导出数据库经常使用，记录一下以后方便查找","text":"Mysql导入导出数据库经常使用，记录一下以后方便查找 导出数据和表结构 使用mysqldump可以加上--default-character-set=utf8防止乱码，加上--hex-blob导出二进制数据，如果导出时不设置hex-blob模式，同样将导出数据再次导入时二进制数据会丢失和错乱 12345mysqldump -u用户名 -p密码 --default-character-set=utf8 --hex-blob 数据库名 &gt; 数据库名.sqlmysqldump -uroot -p123456 --default-character-set=utf8 test &gt; test.sqlmysqldump -uroot -p test &gt; test.sql 只导出表结构123mysqldump -u用户名 -p密码 -d 数据库名 &gt; 数据库名.sqlmysqldump -uroot -p123456 -d test &gt; test.sql 导入数据库使用mysql命令导入123mysql -u用户名 -p 数据库名 &lt; 数据库名.sqlmysql -uroot -p123456 test &lt; test.sql 使用source命令导入12use test; # 使用已经创建的数据库source /home/test/test.sql # 导入备份的sql文件 导出远程数据库123mysqldump -h远程服务器ip地址 -P端口号 -u用户名 -p密码 --default-character-set=utf8 test &gt; /home/test/test.sqlmysqldump -h192.168.22.11 –P3306 -uroot -ppassword --default-character-set=utf8 test &gt; /home/test/test.sql","categories":[{"name":"Mysql","slug":"Mysql","permalink":"https://blog.liuchaoming.cn/categories/Mysql/"}],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"https://blog.liuchaoming.cn/tags/Mysql/"}]},{"title":"Mysql数据库设计规范","slug":"Mysql数据库设计规范","date":"2019-08-10T23:03:34.000Z","updated":"2019-12-24T14:46:46.684Z","comments":true,"path":"posts/14649/","link":"","permalink":"https://blog.liuchaoming.cn/posts/14649/","excerpt":"一般使用Mysql数据比较多，但是有点小伙伴很少考虑Mysql设计上的细节问题，像SQL语句的规范、索引上的规范等等，本文经过整理后得到一些常用的Mysql数据库设计规范。","text":"一般使用Mysql数据比较多，但是有点小伙伴很少考虑Mysql设计上的细节问题，像SQL语句的规范、索引上的规范等等，本文经过整理后得到一些常用的Mysql数据库设计规范。 Mysql命令规范1234- 所有数据库表命名都用小写字母、并用下换线分割- 所有数据库表名尽量不要使用Mysql关键字命名、能看到名称大概了解表是做什么的- 临时表以tmp_为前缀、日期后缀区分，备份表以bak_为前缀、日期后缀- 相同的数据字段，在所有表中的列明和类型尽量保持一致 基本设计规范1234567891011- 大部分情况尽量使用InnoDB引擎，InnoDB支持事务、行级锁、性能更好- 数据库尽量使用utf8mb4的字符集，兼容性好，避免乱码和索引创建失败的问题- 表和字段都尽量加上注释，方便以后维护- 尽量不要使用存储过程、视图、触发器、Event。可以减少数据库资源的占用、将计算转移到服务层- 单表的数据量尽量控制在500万以内，数据量过大影响Mysql性能和维护，更多的数据可以对数据库进行分库分表拆分，控制单表的数据量- 尽量不要使用Mysql的分区功能，分区是物理上多个文件，逻辑上一个文件，查询效率很低。可以使用中间件mycat、sharding-jdbc等进行物理分区- 尽量减少表的宽度、数据冷热数据进行分离、保证每个表都有主键 - Mysql列数限制在为4096列，每一行数据不超过65535字节；宽度越大、加载的内存就越大，IO消耗也就越大 - 经常用的数据放在一起，不常用的数据分离出去，可以极大提高效率 - 主键可以更好的利用索引，提高查询效率- 表中尽量不用外键，通过程序来维护，外键导致表与表之间耦合，涉及相关的表，十分影响性能且容易造成死锁 字段涉及规范1234567891011121314151617- 优先选择符合业务最小的存储类型，节省数据空间减少IO消耗- 字段定义使用Not Null，可以提供一个默认值 - null值索引很难优化，null值更占用空间，需要额外空间标识 - null值操作只能采用is null或is not null - 不能采用=、in、&lt;、&lt;&gt;、not in、！=操作符，不方便操作，where name != &apos;abc&apos;, 不会查询出name为null的数据- 尽量不使用Text、Blob类型 - Mysql使用Text、Blob类型就不使用内存临时表而使用磁盘临时空间、性能差浪费磁盘和内存空间。 - 降低数据库内存命中率 - 可以单独建立扩展表使用- 尽量不使用Enum、用Tinyint - 修改Enum值时，需要通过alter修改表 - order by的操作效率低- 尽量不要使用小数，尤其涉及金钱等精度要求较高的类型 - 最好使用整数，小数存储有精度的误差，导致金额对不上- 时间尽量使用Timestamp或者Datetime类型存储时间，不要使用String类型 - 使用String无法使用日期函数进行比较比较 - 用String会占用更多的空间 索引设计规范1234567- 表的索引不要太多，尽量5个以下，索引增加查询效率同时也会降低插入和更新的效率 - 索引太多会影响Mysql优化器，优化器消耗时间增加，反而降低查询到的性能- 更新频繁的列、或者列值区分度不高的列(如：性别，只有男、女、未知)不要加索引- 联合索引，把区分度高的放在左侧，尽量遵循最左索引原则 - 区分度高的列放在最左侧 - 查询频繁的列放在最左侧 - 字段长度小的放在最左侧 SQL语句规范1234567891011121314151617- 尽量不要使属性隐式转换，隐式转换使索引失效 - SELECT name FROM project WHERE id = `&apos;1000&apos;`; id为整型，用`1000`代替- 程序中使用预编译语句操作数据库，减少SQL编译时间同时防止SQL注入- insert语句尽量包含字段 - 如：INSERT INTO test values(&apos;1&apos;, &apos;abc&apos;);应该INSERT INTO test(id, name) values(&apos;1&apos;, &apos;abc&apos;)- 尽量不要使用%开头的模糊查询 - not、!=、&lt;&gt;、not in、not like以及%开头等，会是查询不走索引而全变扫描- 联合索引只能有一列进行范围查询 - a1,a2,a3联合索引，a1范围查询，a2，a3列不会走索引，可以把a1放在最后- Where语句后的字段尽量不要使用函数或表达式，否则不会走索引 - SELECT id FROM t WHERE num/2=100，这将导致引擎放弃使用索引而进行全表扫描，可改为：SELECT id FROM t WHERE num=100*2 - SELECT id FROM t WHERE substring(name,1,3)=&apos;abc&apos;--name以abc开头的id，应改为:SELECT id FROM t WHERE name LIKE &apos;abc%&apos; - SELECT id FROM t WHERE datediff(day,createdate,&apos;2005-11-30&apos;)=0--&apos;2015-11-30&apos;生成的id，应改为:SELECT id FROM t WHERE createdate&gt;=&apos;2015-11-30&apos; AND createdate&lt;&apos;2015-12-1&apos;- 大表不要使用子查询，不使用JOIN查询- 避免JOIN关联太多表- OR条件可以换成IN查询- 尽量减少与数据库交互次数","categories":[{"name":"Mysql","slug":"Mysql","permalink":"https://blog.liuchaoming.cn/categories/Mysql/"}],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"https://blog.liuchaoming.cn/tags/Mysql/"}]},{"title":"About Hexo","slug":"Blog","date":"2019-07-31T23:03:34.000Z","updated":"2019-12-24T14:46:46.684Z","comments":true,"path":"posts/15470/","link":"","permalink":"https://blog.liuchaoming.cn/posts/15470/","excerpt":"Welcome to this Blog!","text":"Welcome to this Blog! Quick StartCreate a new post1hexo new \"My New Post\" More info: Writing Run server1hexo server More info: Server Generate static files1hexo generate More info: Generating Deploy to remote sites1hexo deploy More info: Deployment Clean1hexo clean","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.liuchaoming.cn/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.liuchaoming.cn/tags/Hexo/"}]},{"title":"Docker安装后报Cannot connect to the docker daemon at ...","slug":"Docker使用报错","date":"2019-07-31T23:03:34.000Z","updated":"2019-12-24T14:46:46.684Z","comments":true,"path":"posts/61412/","link":"","permalink":"https://blog.liuchaoming.cn/posts/61412/","excerpt":"Docker安装后报错：Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?","text":"Docker安装后报错：Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running? 解决方式执行以下命令123systemctl daemon-reloadsudo service docker restartsudo service docker status (should see active (running))","categories":[{"name":"Docker","slug":"Docker","permalink":"https://blog.liuchaoming.cn/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://blog.liuchaoming.cn/tags/Docker/"}]}]}